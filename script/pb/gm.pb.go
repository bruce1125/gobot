// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/base/gm.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 获取玩家大厅路由
type Gm2ConnGetPlayerLobby struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *Gm2ConnGetPlayerLobby) Reset()         { *m = Gm2ConnGetPlayerLobby{} }
func (m *Gm2ConnGetPlayerLobby) String() string { return proto.CompactTextString(m) }
func (*Gm2ConnGetPlayerLobby) ProtoMessage()    {}
func (*Gm2ConnGetPlayerLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{0}
}
func (m *Gm2ConnGetPlayerLobby) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gm2ConnGetPlayerLobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gm2ConnGetPlayerLobby.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gm2ConnGetPlayerLobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gm2ConnGetPlayerLobby.Merge(m, src)
}
func (m *Gm2ConnGetPlayerLobby) XXX_Size() int {
	return m.Size()
}
func (m *Gm2ConnGetPlayerLobby) XXX_DiscardUnknown() {
	xxx_messageInfo_Gm2ConnGetPlayerLobby.DiscardUnknown(m)
}

var xxx_messageInfo_Gm2ConnGetPlayerLobby proto.InternalMessageInfo

func (m *Gm2ConnGetPlayerLobby) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// 玩家大厅路由数据
type Conn2GmPlayerLobby struct {
	Uid     string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LobbyId string `protobuf:"bytes,2,opt,name=lobbyId,proto3" json:"lobbyId,omitempty"`
}

func (m *Conn2GmPlayerLobby) Reset()         { *m = Conn2GmPlayerLobby{} }
func (m *Conn2GmPlayerLobby) String() string { return proto.CompactTextString(m) }
func (*Conn2GmPlayerLobby) ProtoMessage()    {}
func (*Conn2GmPlayerLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{1}
}
func (m *Conn2GmPlayerLobby) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Conn2GmPlayerLobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Conn2GmPlayerLobby.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Conn2GmPlayerLobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conn2GmPlayerLobby.Merge(m, src)
}
func (m *Conn2GmPlayerLobby) XXX_Size() int {
	return m.Size()
}
func (m *Conn2GmPlayerLobby) XXX_DiscardUnknown() {
	xxx_messageInfo_Conn2GmPlayerLobby.DiscardUnknown(m)
}

var xxx_messageInfo_Conn2GmPlayerLobby proto.InternalMessageInfo

func (m *Conn2GmPlayerLobby) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Conn2GmPlayerLobby) GetLobbyId() string {
	if m != nil {
		return m.LobbyId
	}
	return ""
}

// 获取玩家数据
type Gm2LGetPlayer struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *Gm2LGetPlayer) Reset()         { *m = Gm2LGetPlayer{} }
func (m *Gm2LGetPlayer) String() string { return proto.CompactTextString(m) }
func (*Gm2LGetPlayer) ProtoMessage()    {}
func (*Gm2LGetPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{2}
}
func (m *Gm2LGetPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gm2LGetPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gm2LGetPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gm2LGetPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gm2LGetPlayer.Merge(m, src)
}
func (m *Gm2LGetPlayer) XXX_Size() int {
	return m.Size()
}
func (m *Gm2LGetPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_Gm2LGetPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_Gm2LGetPlayer proto.InternalMessageInfo

func (m *Gm2LGetPlayer) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// GM服务通用数据格式定义
type Any2GmJsonMsg struct {
	Msg  string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Any2GmJsonMsg) Reset()         { *m = Any2GmJsonMsg{} }
func (m *Any2GmJsonMsg) String() string { return proto.CompactTextString(m) }
func (*Any2GmJsonMsg) ProtoMessage()    {}
func (*Any2GmJsonMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{3}
}
func (m *Any2GmJsonMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Any2GmJsonMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Any2GmJsonMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Any2GmJsonMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Any2GmJsonMsg.Merge(m, src)
}
func (m *Any2GmJsonMsg) XXX_Size() int {
	return m.Size()
}
func (m *Any2GmJsonMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_Any2GmJsonMsg.DiscardUnknown(m)
}

var xxx_messageInfo_Any2GmJsonMsg proto.InternalMessageInfo

func (m *Any2GmJsonMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Any2GmJsonMsg) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 变更玩家道具
type Gm2LUpdatePlayerItem struct {
	Uid     string          `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	IsMinus bool            `protobuf:"varint,2,opt,name=isMinus,proto3" json:"isMinus,omitempty"`
	Items   map[int32]int32 `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Gm2LUpdatePlayerItem) Reset()         { *m = Gm2LUpdatePlayerItem{} }
func (m *Gm2LUpdatePlayerItem) String() string { return proto.CompactTextString(m) }
func (*Gm2LUpdatePlayerItem) ProtoMessage()    {}
func (*Gm2LUpdatePlayerItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{4}
}
func (m *Gm2LUpdatePlayerItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gm2LUpdatePlayerItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gm2LUpdatePlayerItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gm2LUpdatePlayerItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gm2LUpdatePlayerItem.Merge(m, src)
}
func (m *Gm2LUpdatePlayerItem) XXX_Size() int {
	return m.Size()
}
func (m *Gm2LUpdatePlayerItem) XXX_DiscardUnknown() {
	xxx_messageInfo_Gm2LUpdatePlayerItem.DiscardUnknown(m)
}

var xxx_messageInfo_Gm2LUpdatePlayerItem proto.InternalMessageInfo

func (m *Gm2LUpdatePlayerItem) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Gm2LUpdatePlayerItem) GetIsMinus() bool {
	if m != nil {
		return m.IsMinus
	}
	return false
}

func (m *Gm2LUpdatePlayerItem) GetItems() map[int32]int32 {
	if m != nil {
		return m.Items
	}
	return nil
}

// 删除玩家道具
type Gm2LDeletePlayerItem struct {
	Uid     string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ItemIds []int32 `protobuf:"varint,2,rep,packed,name=itemIds,proto3" json:"itemIds,omitempty"`
}

func (m *Gm2LDeletePlayerItem) Reset()         { *m = Gm2LDeletePlayerItem{} }
func (m *Gm2LDeletePlayerItem) String() string { return proto.CompactTextString(m) }
func (*Gm2LDeletePlayerItem) ProtoMessage()    {}
func (*Gm2LDeletePlayerItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{5}
}
func (m *Gm2LDeletePlayerItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gm2LDeletePlayerItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gm2LDeletePlayerItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gm2LDeletePlayerItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gm2LDeletePlayerItem.Merge(m, src)
}
func (m *Gm2LDeletePlayerItem) XXX_Size() int {
	return m.Size()
}
func (m *Gm2LDeletePlayerItem) XXX_DiscardUnknown() {
	xxx_messageInfo_Gm2LDeletePlayerItem.DiscardUnknown(m)
}

var xxx_messageInfo_Gm2LDeletePlayerItem proto.InternalMessageInfo

func (m *Gm2LDeletePlayerItem) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Gm2LDeletePlayerItem) GetItemIds() []int32 {
	if m != nil {
		return m.ItemIds
	}
	return nil
}

// 抽奖
type Gm2LLottery struct {
	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Times     int32  `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	LotteryId int32  `protobuf:"varint,3,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`
}

func (m *Gm2LLottery) Reset()         { *m = Gm2LLottery{} }
func (m *Gm2LLottery) String() string { return proto.CompactTextString(m) }
func (*Gm2LLottery) ProtoMessage()    {}
func (*Gm2LLottery) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{6}
}
func (m *Gm2LLottery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gm2LLottery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gm2LLottery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gm2LLottery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gm2LLottery.Merge(m, src)
}
func (m *Gm2LLottery) XXX_Size() int {
	return m.Size()
}
func (m *Gm2LLottery) XXX_DiscardUnknown() {
	xxx_messageInfo_Gm2LLottery.DiscardUnknown(m)
}

var xxx_messageInfo_Gm2LLottery proto.InternalMessageInfo

func (m *Gm2LLottery) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Gm2LLottery) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *Gm2LLottery) GetLotteryId() int32 {
	if m != nil {
		return m.LotteryId
	}
	return 0
}

// 邮件
type Gm2LPlayerMail struct {
	Uid  string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Mail *Mail  `protobuf:"bytes,2,opt,name=mail,proto3" json:"mail,omitempty"`
}

func (m *Gm2LPlayerMail) Reset()         { *m = Gm2LPlayerMail{} }
func (m *Gm2LPlayerMail) String() string { return proto.CompactTextString(m) }
func (*Gm2LPlayerMail) ProtoMessage()    {}
func (*Gm2LPlayerMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{7}
}
func (m *Gm2LPlayerMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gm2LPlayerMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gm2LPlayerMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gm2LPlayerMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gm2LPlayerMail.Merge(m, src)
}
func (m *Gm2LPlayerMail) XXX_Size() int {
	return m.Size()
}
func (m *Gm2LPlayerMail) XXX_DiscardUnknown() {
	xxx_messageInfo_Gm2LPlayerMail.DiscardUnknown(m)
}

var xxx_messageInfo_Gm2LPlayerMail proto.InternalMessageInfo

func (m *Gm2LPlayerMail) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Gm2LPlayerMail) GetMail() *Mail {
	if m != nil {
		return m.Mail
	}
	return nil
}

type Gm2LWorldMail struct {
	Mail *Mail `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail,omitempty"`
}

func (m *Gm2LWorldMail) Reset()         { *m = Gm2LWorldMail{} }
func (m *Gm2LWorldMail) String() string { return proto.CompactTextString(m) }
func (*Gm2LWorldMail) ProtoMessage()    {}
func (*Gm2LWorldMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac1fb92a0728d31, []int{8}
}
func (m *Gm2LWorldMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gm2LWorldMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gm2LWorldMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gm2LWorldMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gm2LWorldMail.Merge(m, src)
}
func (m *Gm2LWorldMail) XXX_Size() int {
	return m.Size()
}
func (m *Gm2LWorldMail) XXX_DiscardUnknown() {
	xxx_messageInfo_Gm2LWorldMail.DiscardUnknown(m)
}

var xxx_messageInfo_Gm2LWorldMail proto.InternalMessageInfo

func (m *Gm2LWorldMail) GetMail() *Mail {
	if m != nil {
		return m.Mail
	}
	return nil
}

func init() {
	proto.RegisterType((*Gm2ConnGetPlayerLobby)(nil), "Gm2ConnGetPlayerLobby")
	proto.RegisterType((*Conn2GmPlayerLobby)(nil), "Conn2GmPlayerLobby")
	proto.RegisterType((*Gm2LGetPlayer)(nil), "Gm2LGetPlayer")
	proto.RegisterType((*Any2GmJsonMsg)(nil), "Any2GmJsonMsg")
	proto.RegisterType((*Gm2LUpdatePlayerItem)(nil), "Gm2LUpdatePlayerItem")
	proto.RegisterMapType((map[int32]int32)(nil), "Gm2LUpdatePlayerItem.ItemsEntry")
	proto.RegisterType((*Gm2LDeletePlayerItem)(nil), "Gm2LDeletePlayerItem")
	proto.RegisterType((*Gm2LLottery)(nil), "Gm2LLottery")
	proto.RegisterType((*Gm2LPlayerMail)(nil), "Gm2LPlayerMail")
	proto.RegisterType((*Gm2LWorldMail)(nil), "Gm2LWorldMail")
}

func init() { proto.RegisterFile("proto/base/gm.proto", fileDescriptor_1ac1fb92a0728d31) }

var fileDescriptor_1ac1fb92a0728d31 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xdd, 0x8a, 0xd3, 0x40,
	0x18, 0xed, 0x6c, 0x36, 0xea, 0x7e, 0x75, 0x45, 0x62, 0xc5, 0xb8, 0x48, 0xac, 0xb9, 0xaa, 0x5e,
	0xa4, 0x10, 0x51, 0x16, 0x41, 0xd0, 0xad, 0x12, 0x22, 0x2d, 0x2c, 0x59, 0x44, 0xf0, 0x6e, 0x92,
	0x0c, 0x71, 0x70, 0x7e, 0x4a, 0x66, 0xba, 0x90, 0xb7, 0xf0, 0x61, 0x7c, 0x08, 0x2f, 0xf7, 0xd2,
	0x4b, 0x69, 0x5f, 0x44, 0x66, 0xc6, 0x58, 0xc1, 0x20, 0xde, 0x84, 0xef, 0x9c, 0xef, 0xcc, 0x39,
	0x07, 0xbe, 0xc0, 0x9d, 0x75, 0x2b, 0xb5, 0x9c, 0x97, 0x58, 0x91, 0x79, 0xc3, 0x13, 0x8b, 0x4e,
	0xee, 0xfd, 0x41, 0x56, 0x92, 0x73, 0x29, 0xdc, 0x22, 0x7e, 0x0c, 0x77, 0x33, 0x9e, 0x2e, 0xa4,
	0x10, 0x19, 0xd1, 0xe7, 0x0c, 0x77, 0xa4, 0x5d, 0xca, 0xb2, 0xec, 0x82, 0xdb, 0xe0, 0x6d, 0x68,
	0x1d, 0xa2, 0x29, 0x9a, 0x1d, 0x15, 0x66, 0x8c, 0x5f, 0x41, 0x60, 0x74, 0x69, 0xc6, 0xff, 0xa9,
	0x0b, 0x42, 0xb8, 0xce, 0xcc, 0x2a, 0xaf, 0xc3, 0x03, 0xcb, 0xf6, 0x30, 0x7e, 0x04, 0xc7, 0x19,
	0x4f, 0x97, 0xbf, 0x93, 0x06, 0x42, 0x9e, 0xc1, 0xf1, 0x6b, 0xd1, 0xa5, 0x19, 0x7f, 0xa7, 0xa4,
	0x58, 0xa9, 0xc6, 0x48, 0xb8, 0x6a, 0x7a, 0x09, 0x57, 0x4d, 0x10, 0xc0, 0x61, 0x8d, 0x35, 0xfe,
	0x65, 0x6e, 0xe7, 0xf8, 0x2b, 0x82, 0x89, 0xb1, 0x7e, 0xbf, 0xae, 0xb1, 0x26, 0xce, 0x3d, 0xd7,
	0x84, 0x0f, 0xd7, 0xa3, 0x6a, 0x45, 0xc5, 0x46, 0x59, 0x87, 0x1b, 0x45, 0x0f, 0x83, 0xe7, 0xe0,
	0x53, 0x4d, 0xb8, 0x0a, 0xbd, 0xa9, 0x37, 0x1b, 0xa7, 0xd3, 0x64, 0xc8, 0x31, 0x31, 0x1f, 0xf5,
	0x56, 0xe8, 0xb6, 0x2b, 0x9c, 0xfc, 0xe4, 0x14, 0x60, 0x4f, 0x9a, 0xc4, 0xcf, 0xa4, 0xb3, 0x89,
	0x7e, 0x61, 0xc6, 0x60, 0x02, 0xfe, 0x25, 0x66, 0x1b, 0x62, 0xf3, 0xfc, 0xc2, 0x81, 0x17, 0x07,
	0xa7, 0x28, 0x3e, 0x73, 0xad, 0xdf, 0x10, 0x46, 0xfe, 0xa3, 0xb5, 0x26, 0x3c, 0xaf, 0x4d, 0x6b,
	0x6f, 0xe6, 0x17, 0x3d, 0x8c, 0x2f, 0x60, 0x6c, 0x3c, 0x96, 0x52, 0x6b, 0xd2, 0x0e, 0xdd, 0x63,
	0x02, 0xbe, 0xa6, 0x9c, 0xa8, 0x3e, 0xde, 0x82, 0xe0, 0x01, 0x1c, 0x31, 0xf7, 0x24, 0xaf, 0x43,
	0xcf, 0x6e, 0xf6, 0x44, 0xfc, 0x12, 0x6e, 0x19, 0x53, 0x57, 0x69, 0x85, 0x29, 0x1b, 0xf0, 0xbd,
	0x0f, 0x87, 0x1c, 0x53, 0x66, 0x6d, 0xc7, 0xa9, 0x9f, 0x18, 0x59, 0x61, 0xa9, 0xf8, 0x89, 0x3b,
	0xf4, 0x07, 0xd9, 0xb2, 0xda, 0xbe, 0xee, 0xb5, 0xe8, 0x2f, 0xed, 0x59, 0xfe, 0x6d, 0x1b, 0xa1,
	0xab, 0x6d, 0x84, 0x7e, 0x6c, 0x23, 0xf4, 0x65, 0x17, 0x8d, 0xae, 0x76, 0xd1, 0xe8, 0xfb, 0x2e,
	0x1a, 0xc1, 0xc3, 0x4a, 0xf2, 0x44, 0x7d, 0xda, 0x28, 0x2c, 0x9a, 0x44, 0x57, 0x8d, 0xfb, 0x65,
	0x2b, 0xc9, 0x92, 0x8a, 0x51, 0x22, 0xf4, 0x39, 0xfa, 0x78, 0x73, 0xb1, 0xc8, 0x2e, 0x48, 0x7b,
	0x49, 0xda, 0xf9, 0xba, 0x2c, 0xaf, 0x59, 0xc1, 0xd3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf5,
	0x71, 0x48, 0x82, 0x03, 0x03, 0x00, 0x00,
}

func (m *Gm2ConnGetPlayerLobby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gm2ConnGetPlayerLobby) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gm2ConnGetPlayerLobby) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Conn2GmPlayerLobby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conn2GmPlayerLobby) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Conn2GmPlayerLobby) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LobbyId) > 0 {
		i -= len(m.LobbyId)
		copy(dAtA[i:], m.LobbyId)
		i = encodeVarintGm(dAtA, i, uint64(len(m.LobbyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gm2LGetPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gm2LGetPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gm2LGetPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Any2GmJsonMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any2GmJsonMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Any2GmJsonMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gm2LUpdatePlayerItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gm2LUpdatePlayerItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gm2LUpdatePlayerItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintGm(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintGm(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGm(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsMinus {
		i--
		if m.IsMinus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gm2LDeletePlayerItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gm2LDeletePlayerItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gm2LDeletePlayerItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemIds) > 0 {
		dAtA2 := make([]byte, len(m.ItemIds)*10)
		var j1 int
		for _, num1 := range m.ItemIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGm(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gm2LLottery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gm2LLottery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gm2LLottery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LotteryId != 0 {
		i = encodeVarintGm(dAtA, i, uint64(m.LotteryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Times != 0 {
		i = encodeVarintGm(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gm2LPlayerMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gm2LPlayerMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gm2LPlayerMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mail != nil {
		{
			size, err := m.Mail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintGm(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gm2LWorldMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gm2LWorldMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gm2LWorldMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mail != nil {
		{
			size, err := m.Mail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGm(dAtA []byte, offset int, v uint64) int {
	offset -= sovGm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Gm2ConnGetPlayerLobby) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *Conn2GmPlayerLobby) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	l = len(m.LobbyId)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *Gm2LGetPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *Any2GmJsonMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *Gm2LUpdatePlayerItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	if m.IsMinus {
		n += 2
	}
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGm(uint64(k)) + 1 + sovGm(uint64(v))
			n += mapEntrySize + 1 + sovGm(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Gm2LDeletePlayerItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	if len(m.ItemIds) > 0 {
		l = 0
		for _, e := range m.ItemIds {
			l += sovGm(uint64(e))
		}
		n += 1 + sovGm(uint64(l)) + l
	}
	return n
}

func (m *Gm2LLottery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	if m.Times != 0 {
		n += 1 + sovGm(uint64(m.Times))
	}
	if m.LotteryId != 0 {
		n += 1 + sovGm(uint64(m.LotteryId))
	}
	return n
}

func (m *Gm2LPlayerMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *Gm2LWorldMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func sovGm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGm(x uint64) (n int) {
	return sovGm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gm2ConnGetPlayerLobby) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gm2ConnGetPlayerLobby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gm2ConnGetPlayerLobby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conn2GmPlayerLobby) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conn2GmPlayerLobby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conn2GmPlayerLobby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LobbyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LobbyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gm2LGetPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gm2LGetPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gm2LGetPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Any2GmJsonMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any2GmJsonMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any2GmJsonMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gm2LUpdatePlayerItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gm2LUpdatePlayerItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gm2LUpdatePlayerItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMinus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMinus = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGm(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGm
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gm2LDeletePlayerItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gm2LDeletePlayerItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gm2LDeletePlayerItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemIds = append(m.ItemIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGm
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGm
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ItemIds) == 0 {
					m.ItemIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemIds = append(m.ItemIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gm2LLottery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gm2LLottery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gm2LLottery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryId", wireType)
			}
			m.LotteryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gm2LPlayerMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gm2LPlayerMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gm2LPlayerMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &Mail{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gm2LWorldMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gm2LWorldMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gm2LWorldMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &Mail{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGm = fmt.Errorf("proto: unexpected end of group")
)
