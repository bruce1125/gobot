// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/base/match.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 开始匹配
type L2MJoinMatching struct {
	Uid        string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head       int32             `protobuf:"varint,3,opt,name=head,proto3" json:"head,omitempty"`
	Card       []*CardDetailInfo `protobuf:"bytes,4,rep,name=card,proto3" json:"card,omitempty"`
	Deckinfo   *Deck             `protobuf:"bytes,5,opt,name=deckinfo,proto3" json:"deckinfo,omitempty"`
	Mode       MatchMode         `protobuf:"varint,6,opt,name=mode,proto3,enum=MatchMode" json:"mode,omitempty"`
	SeasonInfo *SeasonInfo       `protobuf:"bytes,7,opt,name=seasonInfo,proto3" json:"seasonInfo,omitempty"`
}

func (m *L2MJoinMatching) Reset()         { *m = L2MJoinMatching{} }
func (m *L2MJoinMatching) String() string { return proto.CompactTextString(m) }
func (*L2MJoinMatching) ProtoMessage()    {}
func (*L2MJoinMatching) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{0}
}
func (m *L2MJoinMatching) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L2MJoinMatching) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L2MJoinMatching.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L2MJoinMatching) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2MJoinMatching.Merge(m, src)
}
func (m *L2MJoinMatching) XXX_Size() int {
	return m.Size()
}
func (m *L2MJoinMatching) XXX_DiscardUnknown() {
	xxx_messageInfo_L2MJoinMatching.DiscardUnknown(m)
}

var xxx_messageInfo_L2MJoinMatching proto.InternalMessageInfo

func (m *L2MJoinMatching) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *L2MJoinMatching) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *L2MJoinMatching) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *L2MJoinMatching) GetCard() []*CardDetailInfo {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *L2MJoinMatching) GetDeckinfo() *Deck {
	if m != nil {
		return m.Deckinfo
	}
	return nil
}

func (m *L2MJoinMatching) GetMode() MatchMode {
	if m != nil {
		return m.Mode
	}
	return MatchMode_MatchMode_None
}

func (m *L2MJoinMatching) GetSeasonInfo() *SeasonInfo {
	if m != nil {
		return m.SeasonInfo
	}
	return nil
}

type M2LJoinMatching struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *M2LJoinMatching) Reset()         { *m = M2LJoinMatching{} }
func (m *M2LJoinMatching) String() string { return proto.CompactTextString(m) }
func (*M2LJoinMatching) ProtoMessage()    {}
func (*M2LJoinMatching) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{1}
}
func (m *M2LJoinMatching) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *M2LJoinMatching) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_M2LJoinMatching.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *M2LJoinMatching) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M2LJoinMatching.Merge(m, src)
}
func (m *M2LJoinMatching) XXX_Size() int {
	return m.Size()
}
func (m *M2LJoinMatching) XXX_DiscardUnknown() {
	xxx_messageInfo_M2LJoinMatching.DiscardUnknown(m)
}

var xxx_messageInfo_M2LJoinMatching proto.InternalMessageInfo

func (m *M2LJoinMatching) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

type S2CJoinMatching struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CJoinMatching) Reset()         { *m = S2CJoinMatching{} }
func (m *S2CJoinMatching) String() string { return proto.CompactTextString(m) }
func (*S2CJoinMatching) ProtoMessage()    {}
func (*S2CJoinMatching) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{2}
}
func (m *S2CJoinMatching) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CJoinMatching) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CJoinMatching.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CJoinMatching) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CJoinMatching.Merge(m, src)
}
func (m *S2CJoinMatching) XXX_Size() int {
	return m.Size()
}
func (m *S2CJoinMatching) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CJoinMatching.DiscardUnknown(m)
}

var xxx_messageInfo_S2CJoinMatching proto.InternalMessageInfo

func (m *S2CJoinMatching) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 退出匹配
type L2MExitMatching struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *L2MExitMatching) Reset()         { *m = L2MExitMatching{} }
func (m *L2MExitMatching) String() string { return proto.CompactTextString(m) }
func (*L2MExitMatching) ProtoMessage()    {}
func (*L2MExitMatching) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{3}
}
func (m *L2MExitMatching) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L2MExitMatching) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L2MExitMatching.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L2MExitMatching) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2MExitMatching.Merge(m, src)
}
func (m *L2MExitMatching) XXX_Size() int {
	return m.Size()
}
func (m *L2MExitMatching) XXX_DiscardUnknown() {
	xxx_messageInfo_L2MExitMatching.DiscardUnknown(m)
}

var xxx_messageInfo_L2MExitMatching proto.InternalMessageInfo

func (m *L2MExitMatching) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type M2LExitMatching struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *M2LExitMatching) Reset()         { *m = M2LExitMatching{} }
func (m *M2LExitMatching) String() string { return proto.CompactTextString(m) }
func (*M2LExitMatching) ProtoMessage()    {}
func (*M2LExitMatching) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{4}
}
func (m *M2LExitMatching) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *M2LExitMatching) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_M2LExitMatching.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *M2LExitMatching) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M2LExitMatching.Merge(m, src)
}
func (m *M2LExitMatching) XXX_Size() int {
	return m.Size()
}
func (m *M2LExitMatching) XXX_DiscardUnknown() {
	xxx_messageInfo_M2LExitMatching.DiscardUnknown(m)
}

var xxx_messageInfo_M2LExitMatching proto.InternalMessageInfo

func (m *M2LExitMatching) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

type MatchPlayerSummary struct {
	Uid          string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head         int32       `protobuf:"varint,3,opt,name=head,proto3" json:"head,omitempty"`
	CardBackSkin int32       `protobuf:"varint,4,opt,name=cardBackSkin,proto3" json:"cardBackSkin,omitempty"`
	DeckInfo     *Deck       `protobuf:"bytes,5,opt,name=deckInfo,proto3" json:"deckInfo,omitempty"`
	SeasonInfo   *SeasonInfo `protobuf:"bytes,6,opt,name=seasonInfo,proto3" json:"seasonInfo,omitempty"`
}

func (m *MatchPlayerSummary) Reset()         { *m = MatchPlayerSummary{} }
func (m *MatchPlayerSummary) String() string { return proto.CompactTextString(m) }
func (*MatchPlayerSummary) ProtoMessage()    {}
func (*MatchPlayerSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{5}
}
func (m *MatchPlayerSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchPlayerSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchPlayerSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchPlayerSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchPlayerSummary.Merge(m, src)
}
func (m *MatchPlayerSummary) XXX_Size() int {
	return m.Size()
}
func (m *MatchPlayerSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchPlayerSummary.DiscardUnknown(m)
}

var xxx_messageInfo_MatchPlayerSummary proto.InternalMessageInfo

func (m *MatchPlayerSummary) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *MatchPlayerSummary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MatchPlayerSummary) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *MatchPlayerSummary) GetCardBackSkin() int32 {
	if m != nil {
		return m.CardBackSkin
	}
	return 0
}

func (m *MatchPlayerSummary) GetDeckInfo() *Deck {
	if m != nil {
		return m.DeckInfo
	}
	return nil
}

func (m *MatchPlayerSummary) GetSeasonInfo() *SeasonInfo {
	if m != nil {
		return m.SeasonInfo
	}
	return nil
}

// 匹配成功通知
type S2CMatchSuccessSync struct {
	Ip      string                `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port    int32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	GameId  string                `protobuf:"bytes,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	Players []*MatchPlayerSummary `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
}

func (m *S2CMatchSuccessSync) Reset()         { *m = S2CMatchSuccessSync{} }
func (m *S2CMatchSuccessSync) String() string { return proto.CompactTextString(m) }
func (*S2CMatchSuccessSync) ProtoMessage()    {}
func (*S2CMatchSuccessSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{6}
}
func (m *S2CMatchSuccessSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CMatchSuccessSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CMatchSuccessSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CMatchSuccessSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CMatchSuccessSync.Merge(m, src)
}
func (m *S2CMatchSuccessSync) XXX_Size() int {
	return m.Size()
}
func (m *S2CMatchSuccessSync) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CMatchSuccessSync.DiscardUnknown(m)
}

var xxx_messageInfo_S2CMatchSuccessSync proto.InternalMessageInfo

func (m *S2CMatchSuccessSync) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *S2CMatchSuccessSync) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *S2CMatchSuccessSync) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *S2CMatchSuccessSync) GetPlayers() []*MatchPlayerSummary {
	if m != nil {
		return m.Players
	}
	return nil
}

type BattleUser struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *BattleUser) Reset()         { *m = BattleUser{} }
func (m *BattleUser) String() string { return proto.CompactTextString(m) }
func (*BattleUser) ProtoMessage()    {}
func (*BattleUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{7}
}
func (m *BattleUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleUser.Merge(m, src)
}
func (m *BattleUser) XXX_Size() int {
	return m.Size()
}
func (m *BattleUser) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleUser.DiscardUnknown(m)
}

var xxx_messageInfo_BattleUser proto.InternalMessageInfo

func (m *BattleUser) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// 对局准备完成
type R2MGameReady struct {
	EntryMsg *S2CMatchSuccessSync `protobuf:"bytes,1,opt,name=entryMsg,proto3" json:"entryMsg,omitempty"`
}

func (m *R2MGameReady) Reset()         { *m = R2MGameReady{} }
func (m *R2MGameReady) String() string { return proto.CompactTextString(m) }
func (*R2MGameReady) ProtoMessage()    {}
func (*R2MGameReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{8}
}
func (m *R2MGameReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *R2MGameReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_R2MGameReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *R2MGameReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_R2MGameReady.Merge(m, src)
}
func (m *R2MGameReady) XXX_Size() int {
	return m.Size()
}
func (m *R2MGameReady) XXX_DiscardUnknown() {
	xxx_messageInfo_R2MGameReady.DiscardUnknown(m)
}

var xxx_messageInfo_R2MGameReady proto.InternalMessageInfo

func (m *R2MGameReady) GetEntryMsg() *S2CMatchSuccessSync {
	if m != nil {
		return m.EntryMsg
	}
	return nil
}

// 通知客户端有未完成对局
type S2CMatchStateNotify struct {
	EntryMsg *S2CMatchSuccessSync `protobuf:"bytes,1,opt,name=entryMsg,proto3" json:"entryMsg,omitempty"`
}

func (m *S2CMatchStateNotify) Reset()         { *m = S2CMatchStateNotify{} }
func (m *S2CMatchStateNotify) String() string { return proto.CompactTextString(m) }
func (*S2CMatchStateNotify) ProtoMessage()    {}
func (*S2CMatchStateNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{9}
}
func (m *S2CMatchStateNotify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CMatchStateNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CMatchStateNotify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CMatchStateNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CMatchStateNotify.Merge(m, src)
}
func (m *S2CMatchStateNotify) XXX_Size() int {
	return m.Size()
}
func (m *S2CMatchStateNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CMatchStateNotify.DiscardUnknown(m)
}

var xxx_messageInfo_S2CMatchStateNotify proto.InternalMessageInfo

func (m *S2CMatchStateNotify) GetEntryMsg() *S2CMatchSuccessSync {
	if m != nil {
		return m.EntryMsg
	}
	return nil
}

// 战斗结束
type R2MEndBattle struct {
	GameId    string        `protobuf:"bytes,1,opt,name=gameId,proto3" json:"gameId,omitempty"`
	WinnerUid string        `protobuf:"bytes,2,opt,name=winnerUid,proto3" json:"winnerUid,omitempty"`
	Users     []*BattleUser `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *R2MEndBattle) Reset()         { *m = R2MEndBattle{} }
func (m *R2MEndBattle) String() string { return proto.CompactTextString(m) }
func (*R2MEndBattle) ProtoMessage()    {}
func (*R2MEndBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{10}
}
func (m *R2MEndBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *R2MEndBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_R2MEndBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *R2MEndBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_R2MEndBattle.Merge(m, src)
}
func (m *R2MEndBattle) XXX_Size() int {
	return m.Size()
}
func (m *R2MEndBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_R2MEndBattle.DiscardUnknown(m)
}

var xxx_messageInfo_R2MEndBattle proto.InternalMessageInfo

func (m *R2MEndBattle) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *R2MEndBattle) GetWinnerUid() string {
	if m != nil {
		return m.WinnerUid
	}
	return ""
}

func (m *R2MEndBattle) GetUsers() []*BattleUser {
	if m != nil {
		return m.Users
	}
	return nil
}

// 战斗结束返回
type M2REndBattle struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *M2REndBattle) Reset()         { *m = M2REndBattle{} }
func (m *M2REndBattle) String() string { return proto.CompactTextString(m) }
func (*M2REndBattle) ProtoMessage()    {}
func (*M2REndBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{11}
}
func (m *M2REndBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *M2REndBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_M2REndBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *M2REndBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M2REndBattle.Merge(m, src)
}
func (m *M2REndBattle) XXX_Size() int {
	return m.Size()
}
func (m *M2REndBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_M2REndBattle.DiscardUnknown(m)
}

var xxx_messageInfo_M2REndBattle proto.InternalMessageInfo

func (m *M2REndBattle) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 战斗结束
type S2CEndBattle struct {
	Code   ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Result int32     `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *S2CEndBattle) Reset()         { *m = S2CEndBattle{} }
func (m *S2CEndBattle) String() string { return proto.CompactTextString(m) }
func (*S2CEndBattle) ProtoMessage()    {}
func (*S2CEndBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89f1b1cf6fd356a, []int{12}
}
func (m *S2CEndBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CEndBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CEndBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CEndBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CEndBattle.Merge(m, src)
}
func (m *S2CEndBattle) XXX_Size() int {
	return m.Size()
}
func (m *S2CEndBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CEndBattle.DiscardUnknown(m)
}

var xxx_messageInfo_S2CEndBattle proto.InternalMessageInfo

func (m *S2CEndBattle) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CEndBattle) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*L2MJoinMatching)(nil), "L2MJoinMatching")
	proto.RegisterType((*M2LJoinMatching)(nil), "M2LJoinMatching")
	proto.RegisterType((*S2CJoinMatching)(nil), "S2CJoinMatching")
	proto.RegisterType((*L2MExitMatching)(nil), "L2MExitMatching")
	proto.RegisterType((*M2LExitMatching)(nil), "M2LExitMatching")
	proto.RegisterType((*MatchPlayerSummary)(nil), "MatchPlayerSummary")
	proto.RegisterType((*S2CMatchSuccessSync)(nil), "S2CMatchSuccessSync")
	proto.RegisterType((*BattleUser)(nil), "BattleUser")
	proto.RegisterType((*R2MGameReady)(nil), "R2MGameReady")
	proto.RegisterType((*S2CMatchStateNotify)(nil), "S2CMatchStateNotify")
	proto.RegisterType((*R2MEndBattle)(nil), "R2MEndBattle")
	proto.RegisterType((*M2REndBattle)(nil), "M2REndBattle")
	proto.RegisterType((*S2CEndBattle)(nil), "S2CEndBattle")
}

func init() { proto.RegisterFile("proto/base/match.proto", fileDescriptor_a89f1b1cf6fd356a) }

var fileDescriptor_a89f1b1cf6fd356a = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x4e, 0x1b, 0x3d,
	0x14, 0xc5, 0xe4, 0x07, 0xb8, 0x89, 0xe0, 0x93, 0xf9, 0x44, 0x47, 0x55, 0x35, 0x0d, 0x61, 0x13,
	0xa9, 0xea, 0xd0, 0x4e, 0x5f, 0xa0, 0x62, 0xa0, 0x28, 0x15, 0x53, 0x21, 0x8f, 0xd8, 0x74, 0x67,
	0x3c, 0x26, 0x58, 0xc9, 0xd8, 0x91, 0xed, 0x69, 0x9b, 0x5d, 0x1f, 0xa1, 0xcf, 0xd4, 0x55, 0x97,
	0x2c, 0xbb, 0x44, 0xf0, 0x22, 0x95, 0x9d, 0x01, 0x92, 0x36, 0x2d, 0xfd, 0xd9, 0x5d, 0x9f, 0x7b,
	0x7d, 0xe6, 0x9e, 0x73, 0xac, 0x81, 0xad, 0xb1, 0x56, 0x56, 0xed, 0x9e, 0x52, 0xc3, 0x77, 0x0b,
	0x6a, 0xd9, 0x79, 0xe4, 0x81, 0x87, 0xb3, 0x38, 0xd7, 0x5a, 0xe9, 0x0a, 0x7f, 0x30, 0x83, 0x33,
	0x55, 0x14, 0x4a, 0x4e, 0x1b, 0xdd, 0x4b, 0x04, 0x1b, 0x47, 0x71, 0xfa, 0x5a, 0x09, 0x99, 0x3a,
	0x1e, 0x21, 0x07, 0xf8, 0x3f, 0xa8, 0x95, 0x22, 0x0f, 0x50, 0x07, 0xf5, 0xd6, 0x88, 0x2b, 0x31,
	0x86, 0xba, 0xa4, 0x05, 0x0f, 0x96, 0x3d, 0xe4, 0x6b, 0x87, 0x9d, 0x73, 0x9a, 0x07, 0xb5, 0x0e,
	0xea, 0x35, 0x88, 0xaf, 0xf1, 0x0e, 0xd4, 0x19, 0xd5, 0x79, 0x50, 0xef, 0xd4, 0x7a, 0xad, 0x78,
	0x23, 0x4a, 0xa8, 0xce, 0xf7, 0xb9, 0xa5, 0x62, 0xd4, 0x97, 0x67, 0x8a, 0xf8, 0x26, 0xde, 0x86,
	0xd5, 0x9c, 0xb3, 0xa1, 0x90, 0x67, 0x2a, 0x68, 0x74, 0x50, 0xaf, 0x15, 0x37, 0xa2, 0x7d, 0xce,
	0x86, 0xe4, 0x16, 0xc6, 0x21, 0xd4, 0x0b, 0x95, 0xf3, 0xa0, 0xd9, 0x41, 0xbd, 0xf5, 0x18, 0x22,
	0xbf, 0x5a, 0xaa, 0x72, 0x4e, 0x3c, 0x8e, 0x9f, 0x00, 0x18, 0x4e, 0x8d, 0x92, 0x8e, 0x36, 0x58,
	0xf1, 0x24, 0xad, 0x28, 0xbb, 0x85, 0xc8, 0x4c, 0xbb, 0xfb, 0x1c, 0x36, 0xd2, 0xf8, 0x68, 0x4e,
	0x61, 0x08, 0x75, 0xe6, 0xf8, 0x51, 0xc5, 0x7f, 0xe0, 0xac, 0x4a, 0x3c, 0xbf, 0xc3, 0xdd, 0x95,
	0x2c, 0x4e, 0xfe, 0xe8, 0xca, 0x8e, 0xf7, 0xf1, 0xe0, 0x83, 0xb0, 0x3f, 0xf7, 0xb1, 0x5a, 0x65,
	0x6e, 0xe8, 0x3e, 0xde, 0xcf, 0x08, 0xb0, 0x1f, 0x3e, 0x1e, 0xd1, 0x09, 0xd7, 0x59, 0x59, 0x14,
	0x54, 0x4f, 0xfe, 0x21, 0xa3, 0x2e, 0xb4, 0x5d, 0x0c, 0x7b, 0x94, 0x0d, 0xb3, 0xa1, 0x90, 0x41,
	0xdd, 0xf7, 0xe6, 0xb0, 0x9b, 0x88, 0xfa, 0x8b, 0x23, 0x72, 0xf0, 0x77, 0x11, 0x34, 0x7f, 0x1d,
	0xc1, 0x47, 0x04, 0x9b, 0x59, 0x9c, 0x78, 0x1d, 0x59, 0xc9, 0x18, 0x37, 0x26, 0x9b, 0x48, 0x86,
	0xd7, 0x61, 0x59, 0x8c, 0x2b, 0x11, 0xcb, 0x62, 0xec, 0xf6, 0x1d, 0x2b, 0x6d, 0xbd, 0x86, 0x06,
	0xf1, 0x35, 0xde, 0x82, 0xe6, 0x80, 0x16, 0xbc, 0x3f, 0x55, 0xb1, 0x46, 0xaa, 0x13, 0x7e, 0x0a,
	0x2b, 0x63, 0x6f, 0x89, 0xa9, 0x9e, 0xdb, 0x66, 0xf4, 0xa3, 0x4f, 0xe4, 0x66, 0xa6, 0x1b, 0x02,
	0xec, 0x51, 0x6b, 0x47, 0xfc, 0xc4, 0x70, 0xbd, 0x20, 0x9a, 0x97, 0xd0, 0x26, 0x71, 0x7a, 0x48,
	0x0b, 0x4e, 0x38, 0xcd, 0x27, 0xf8, 0x19, 0xac, 0x72, 0x69, 0xf5, 0x24, 0x35, 0x03, 0x3f, 0xd6,
	0x8a, 0xff, 0x8f, 0x16, 0x48, 0x20, 0xb7, 0x53, 0xdd, 0xc3, 0x19, 0x8d, 0x96, 0x5a, 0xfe, 0x46,
	0x59, 0x71, 0xf6, 0x37, 0x44, 0x03, 0xbf, 0xca, 0x81, 0xcc, 0xa7, 0x0b, 0xcf, 0x38, 0x80, 0xe6,
	0x1c, 0x78, 0x04, 0x6b, 0xef, 0x85, 0x94, 0x5c, 0x9f, 0x88, 0xbc, 0x8a, 0xfd, 0x0e, 0xc0, 0xdb,
	0xd0, 0x28, 0x8d, 0x73, 0xa7, 0xe6, 0xdd, 0x69, 0x45, 0x77, 0xf2, 0xc9, 0xb4, 0xd3, 0x8d, 0xa0,
	0x9d, 0xc6, 0xe4, 0xee, 0x43, 0xf7, 0xbd, 0xc5, 0x57, 0xd0, 0xce, 0xe2, 0xe4, 0xb7, 0xe7, 0xdd,
	0xe2, 0x9a, 0x9b, 0x72, 0x74, 0x13, 0x68, 0x75, 0xda, 0xeb, 0x7f, 0xb9, 0x0a, 0xd1, 0xc5, 0x55,
	0x88, 0x2e, 0xaf, 0x42, 0xf4, 0xe9, 0x3a, 0x5c, 0xba, 0xb8, 0x0e, 0x97, 0xbe, 0x5e, 0x87, 0x4b,
	0xf0, 0x98, 0xa9, 0x22, 0x32, 0xe7, 0xa5, 0xa1, 0x72, 0x10, 0x59, 0x36, 0x98, 0xfe, 0xa5, 0x98,
	0x1a, 0x45, 0x6c, 0x24, 0xb8, 0xb4, 0xc7, 0xe8, 0x6d, 0x3b, 0x49, 0x0e, 0x33, 0xae, 0xdf, 0x71,
	0xbd, 0x3b, 0x3e, 0x3d, 0x6d, 0xfa, 0x81, 0x17, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x0e,
	0xad, 0x32, 0x11, 0x05, 0x00, 0x00,
}

func (m *L2MJoinMatching) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L2MJoinMatching) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L2MJoinMatching) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonInfo != nil {
		{
			size, err := m.SeasonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Mode != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x30
	}
	if m.Deckinfo != nil {
		{
			size, err := m.Deckinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Card) > 0 {
		for iNdEx := len(m.Card) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Card[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Head != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Head))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *M2LJoinMatching) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M2LJoinMatching) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *M2LJoinMatching) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CJoinMatching) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJoinMatching) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CJoinMatching) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *L2MExitMatching) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L2MExitMatching) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L2MExitMatching) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *M2LExitMatching) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M2LExitMatching) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *M2LExitMatching) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MatchPlayerSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchPlayerSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchPlayerSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonInfo != nil {
		{
			size, err := m.SeasonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DeckInfo != nil {
		{
			size, err := m.DeckInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CardBackSkin != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.CardBackSkin))
		i--
		dAtA[i] = 0x20
	}
	if m.Head != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Head))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CMatchSuccessSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMatchSuccessSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CMatchSuccessSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GameId) > 0 {
		i -= len(m.GameId)
		copy(dAtA[i:], m.GameId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.GameId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BattleUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *R2MGameReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *R2MGameReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *R2MGameReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EntryMsg != nil {
		{
			size, err := m.EntryMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CMatchStateNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMatchStateNotify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CMatchStateNotify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EntryMsg != nil {
		{
			size, err := m.EntryMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *R2MEndBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *R2MEndBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *R2MEndBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WinnerUid) > 0 {
		i -= len(m.WinnerUid)
		copy(dAtA[i:], m.WinnerUid)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.WinnerUid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GameId) > 0 {
		i -= len(m.GameId)
		copy(dAtA[i:], m.GameId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.GameId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *M2REndBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M2REndBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *M2REndBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CEndBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CEndBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CEndBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *L2MJoinMatching) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.Head != 0 {
		n += 1 + sovMatch(uint64(m.Head))
	}
	if len(m.Card) > 0 {
		for _, e := range m.Card {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	if m.Deckinfo != nil {
		l = m.Deckinfo.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovMatch(uint64(m.Mode))
	}
	if m.SeasonInfo != nil {
		l = m.SeasonInfo.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *M2LJoinMatching) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMatch(uint64(m.Code))
	}
	return n
}

func (m *S2CJoinMatching) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMatch(uint64(m.Code))
	}
	return n
}

func (m *L2MExitMatching) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *M2LExitMatching) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMatch(uint64(m.Code))
	}
	return n
}

func (m *MatchPlayerSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.Head != 0 {
		n += 1 + sovMatch(uint64(m.Head))
	}
	if m.CardBackSkin != 0 {
		n += 1 + sovMatch(uint64(m.CardBackSkin))
	}
	if m.DeckInfo != nil {
		l = m.DeckInfo.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.SeasonInfo != nil {
		l = m.SeasonInfo.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *S2CMatchSuccessSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovMatch(uint64(m.Port))
	}
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	return n
}

func (m *BattleUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *R2MGameReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntryMsg != nil {
		l = m.EntryMsg.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *S2CMatchStateNotify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntryMsg != nil {
		l = m.EntryMsg.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *R2MEndBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.WinnerUid)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	return n
}

func (m *M2REndBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMatch(uint64(m.Code))
	}
	return n
}

func (m *S2CEndBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMatch(uint64(m.Code))
	}
	if m.Result != 0 {
		n += 1 + sovMatch(uint64(m.Result))
	}
	return n
}

func sovMatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatch(x uint64) (n int) {
	return sovMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *L2MJoinMatching) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L2MJoinMatching: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L2MJoinMatching: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			m.Head = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Head |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = append(m.Card, &CardDetailInfo{})
			if err := m.Card[len(m.Card)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deckinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deckinfo == nil {
				m.Deckinfo = &Deck{}
			}
			if err := m.Deckinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= MatchMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonInfo == nil {
				m.SeasonInfo = &SeasonInfo{}
			}
			if err := m.SeasonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M2LJoinMatching) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M2LJoinMatching: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M2LJoinMatching: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJoinMatching) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJoinMatching: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJoinMatching: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L2MExitMatching) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L2MExitMatching: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L2MExitMatching: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M2LExitMatching) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M2LExitMatching: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M2LExitMatching: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchPlayerSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchPlayerSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchPlayerSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			m.Head = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Head |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardBackSkin", wireType)
			}
			m.CardBackSkin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardBackSkin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeckInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeckInfo == nil {
				m.DeckInfo = &Deck{}
			}
			if err := m.DeckInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonInfo == nil {
				m.SeasonInfo = &SeasonInfo{}
			}
			if err := m.SeasonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMatchSuccessSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMatchSuccessSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMatchSuccessSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &MatchPlayerSummary{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *R2MGameReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: R2MGameReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: R2MGameReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryMsg == nil {
				m.EntryMsg = &S2CMatchSuccessSync{}
			}
			if err := m.EntryMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMatchStateNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMatchStateNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMatchStateNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryMsg == nil {
				m.EntryMsg = &S2CMatchSuccessSync{}
			}
			if err := m.EntryMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *R2MEndBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: R2MEndBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: R2MEndBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinnerUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &BattleUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M2REndBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M2REndBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M2REndBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CEndBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CEndBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CEndBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatch = fmt.Errorf("proto: unexpected end of group")
)
