// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/base/base.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 字节数组封装
type ByteArrayWrap struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ByteArrayWrap) Reset()         { *m = ByteArrayWrap{} }
func (m *ByteArrayWrap) String() string { return proto.CompactTextString(m) }
func (*ByteArrayWrap) ProtoMessage()    {}
func (*ByteArrayWrap) Descriptor() ([]byte, []int) {
	return fileDescriptor_e56de8d0620b9cff, []int{0}
}
func (m *ByteArrayWrap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByteArrayWrap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByteArrayWrap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByteArrayWrap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByteArrayWrap.Merge(m, src)
}
func (m *ByteArrayWrap) XXX_Size() int {
	return m.Size()
}
func (m *ByteArrayWrap) XXX_DiscardUnknown() {
	xxx_messageInfo_ByteArrayWrap.DiscardUnknown(m)
}

var xxx_messageInfo_ByteArrayWrap proto.InternalMessageInfo

func (m *ByteArrayWrap) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 客户端PB协议的基础封装
type TcgMsg struct {
	LogicType string            `protobuf:"bytes,1,opt,name=logicType,proto3" json:"logicType,omitempty"`
	ConnInfo  map[string]string `protobuf:"bytes,2,rep,name=connInfo,proto3" json:"connInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LogicData []byte            `protobuf:"bytes,3,opt,name=logicData,proto3" json:"logicData,omitempty"`
}

func (m *TcgMsg) Reset()         { *m = TcgMsg{} }
func (m *TcgMsg) String() string { return proto.CompactTextString(m) }
func (*TcgMsg) ProtoMessage()    {}
func (*TcgMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e56de8d0620b9cff, []int{1}
}
func (m *TcgMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TcgMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TcgMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TcgMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcgMsg.Merge(m, src)
}
func (m *TcgMsg) XXX_Size() int {
	return m.Size()
}
func (m *TcgMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TcgMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TcgMsg proto.InternalMessageInfo

func (m *TcgMsg) GetLogicType() string {
	if m != nil {
		return m.LogicType
	}
	return ""
}

func (m *TcgMsg) GetConnInfo() map[string]string {
	if m != nil {
		return m.ConnInfo
	}
	return nil
}

func (m *TcgMsg) GetLogicData() []byte {
	if m != nil {
		return m.LogicData
	}
	return nil
}

// 空包体，占坑用
type Dummy struct {
}

func (m *Dummy) Reset()         { *m = Dummy{} }
func (m *Dummy) String() string { return proto.CompactTextString(m) }
func (*Dummy) ProtoMessage()    {}
func (*Dummy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e56de8d0620b9cff, []int{2}
}
func (m *Dummy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dummy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dummy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dummy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dummy.Merge(m, src)
}
func (m *Dummy) XXX_Size() int {
	return m.Size()
}
func (m *Dummy) XXX_DiscardUnknown() {
	xxx_messageInfo_Dummy.DiscardUnknown(m)
}

var xxx_messageInfo_Dummy proto.InternalMessageInfo

// 后台日志有报错
type S2CSysError struct {
}

func (m *S2CSysError) Reset()         { *m = S2CSysError{} }
func (m *S2CSysError) String() string { return proto.CompactTextString(m) }
func (*S2CSysError) ProtoMessage()    {}
func (*S2CSysError) Descriptor() ([]byte, []int) {
	return fileDescriptor_e56de8d0620b9cff, []int{3}
}
func (m *S2CSysError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSysError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSysError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSysError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSysError.Merge(m, src)
}
func (m *S2CSysError) XXX_Size() int {
	return m.Size()
}
func (m *S2CSysError) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSysError.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSysError proto.InternalMessageInfo

// 被顶掉或者被踢发送的协议
type S2CClose struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CClose) Reset()         { *m = S2CClose{} }
func (m *S2CClose) String() string { return proto.CompactTextString(m) }
func (*S2CClose) ProtoMessage()    {}
func (*S2CClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_e56de8d0620b9cff, []int{4}
}
func (m *S2CClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CClose.Merge(m, src)
}
func (m *S2CClose) XXX_Size() int {
	return m.Size()
}
func (m *S2CClose) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CClose.DiscardUnknown(m)
}

var xxx_messageInfo_S2CClose proto.InternalMessageInfo

func (m *S2CClose) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 心跳协议
type C2SPing struct {
}

func (m *C2SPing) Reset()         { *m = C2SPing{} }
func (m *C2SPing) String() string { return proto.CompactTextString(m) }
func (*C2SPing) ProtoMessage()    {}
func (*C2SPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_e56de8d0620b9cff, []int{5}
}
func (m *C2SPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SPing.Merge(m, src)
}
func (m *C2SPing) XXX_Size() int {
	return m.Size()
}
func (m *C2SPing) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SPing.DiscardUnknown(m)
}

var xxx_messageInfo_C2SPing proto.InternalMessageInfo

type S2CPong struct {
}

func (m *S2CPong) Reset()         { *m = S2CPong{} }
func (m *S2CPong) String() string { return proto.CompactTextString(m) }
func (*S2CPong) ProtoMessage()    {}
func (*S2CPong) Descriptor() ([]byte, []int) {
	return fileDescriptor_e56de8d0620b9cff, []int{6}
}
func (m *S2CPong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CPong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CPong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CPong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CPong.Merge(m, src)
}
func (m *S2CPong) XXX_Size() int {
	return m.Size()
}
func (m *S2CPong) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CPong.DiscardUnknown(m)
}

var xxx_messageInfo_S2CPong proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ByteArrayWrap)(nil), "ByteArrayWrap")
	proto.RegisterType((*TcgMsg)(nil), "TcgMsg")
	proto.RegisterMapType((map[string]string)(nil), "TcgMsg.ConnInfoEntry")
	proto.RegisterType((*Dummy)(nil), "Dummy")
	proto.RegisterType((*S2CSysError)(nil), "S2CSysError")
	proto.RegisterType((*S2CClose)(nil), "S2CClose")
	proto.RegisterType((*C2SPing)(nil), "C2SPing")
	proto.RegisterType((*S2CPong)(nil), "S2CPong")
}

func init() { proto.RegisterFile("proto/base/base.proto", fileDescriptor_e56de8d0620b9cff) }

var fileDescriptor_e56de8d0620b9cff = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x6a, 0xf2, 0x40,
	0x14, 0xc5, 0x1d, 0xff, 0x7b, 0xd5, 0x8f, 0x8f, 0x50, 0x8b, 0x48, 0x49, 0x25, 0xdd, 0x48, 0x17,
	0x91, 0xa6, 0x9b, 0xd2, 0xae, 0xea, 0x28, 0xc5, 0x45, 0x41, 0x12, 0xa1, 0xd0, 0xdd, 0x38, 0x4e,
	0xa7, 0xd2, 0x38, 0x13, 0x26, 0x51, 0x98, 0xb7, 0xe8, 0xc3, 0xf4, 0x21, 0xba, 0x74, 0xd9, 0x65,
	0xd1, 0x17, 0x29, 0x99, 0x88, 0xb6, 0x9b, 0xe1, 0xdc, 0x1f, 0xe7, 0xce, 0xe1, 0x5c, 0x68, 0x45,
	0x4a, 0x26, 0xb2, 0x3f, 0x23, 0x31, 0x33, 0x8f, 0x6b, 0xe6, 0xce, 0xe9, 0x2f, 0xcc, 0x94, 0x92,
	0x2a, 0xe3, 0xce, 0x05, 0x34, 0x07, 0x3a, 0x61, 0xf7, 0x4a, 0x11, 0xfd, 0xa4, 0x48, 0x64, 0x59,
	0x50, 0x9c, 0x93, 0x84, 0xb4, 0x51, 0x17, 0xf5, 0x1a, 0xbe, 0xd1, 0xce, 0x07, 0x82, 0xf2, 0x94,
	0xf2, 0xc7, 0x98, 0x5b, 0x67, 0x50, 0x0b, 0x25, 0x5f, 0xd0, 0xa9, 0x8e, 0x98, 0xf1, 0xd4, 0xfc,
	0x23, 0xb0, 0xae, 0xa0, 0x4a, 0xa5, 0x10, 0x63, 0xf1, 0x22, 0xdb, 0xf9, 0x6e, 0xa1, 0x57, 0xf7,
	0x5a, 0x6e, 0xb6, 0xe8, 0xe2, 0x3d, 0x1f, 0x89, 0x44, 0x69, 0xff, 0x60, 0x3b, 0x7c, 0x38, 0x4c,
	0x43, 0x0b, 0x26, 0xf4, 0x08, 0x3a, 0x77, 0xd0, 0xfc, 0xb3, 0x68, 0xfd, 0x87, 0xc2, 0x1b, 0xd3,
	0xfb, 0xe4, 0x54, 0x5a, 0x27, 0x50, 0x5a, 0x93, 0x70, 0xc5, 0xda, 0x79, 0xc3, 0xb2, 0xe1, 0x36,
	0x7f, 0x83, 0x9c, 0x0a, 0x94, 0x86, 0xab, 0xe5, 0x52, 0x3b, 0x4d, 0xa8, 0x07, 0x1e, 0x0e, 0x74,
	0x3c, 0x4a, 0x9b, 0x3b, 0x97, 0x50, 0x0d, 0x3c, 0x8c, 0x43, 0x19, 0x33, 0xcb, 0x86, 0x22, 0x95,
	0xf3, 0xac, 0xca, 0x3f, 0x0f, 0x5c, 0xe3, 0xc0, 0x72, 0xce, 0x7c, 0xc3, 0x9d, 0x1a, 0x54, 0xb0,
	0x17, 0x4c, 0x16, 0x82, 0xa7, 0x32, 0xf0, 0xf0, 0x44, 0x0a, 0x3e, 0x18, 0x7f, 0x6e, 0x6d, 0xb4,
	0xd9, 0xda, 0xe8, 0x7b, 0x6b, 0xa3, 0xf7, 0x9d, 0x9d, 0xdb, 0xec, 0xec, 0xdc, 0xd7, 0xce, 0xce,
	0xc1, 0x39, 0x95, 0x4b, 0x37, 0x7e, 0x5d, 0xc5, 0x44, 0x70, 0x37, 0xa1, 0x3c, 0x3b, 0x33, 0x95,
	0xa1, 0x4b, 0xc3, 0x05, 0x13, 0xc9, 0x04, 0x3d, 0x37, 0x30, 0x7e, 0x08, 0x98, 0x5a, 0x33, 0xd5,
	0x8f, 0x66, 0xb3, 0xb2, 0x31, 0x5c, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x83, 0x3e, 0xcd, 0xd6,
	0xb8, 0x01, 0x00, 0x00,
}

func (m *ByteArrayWrap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByteArrayWrap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByteArrayWrap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBase(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TcgMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcgMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TcgMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogicData) > 0 {
		i -= len(m.LogicData)
		copy(dAtA[i:], m.LogicData)
		i = encodeVarintBase(dAtA, i, uint64(len(m.LogicData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnInfo) > 0 {
		for k := range m.ConnInfo {
			v := m.ConnInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBase(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBase(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBase(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LogicType) > 0 {
		i -= len(m.LogicType)
		copy(dAtA[i:], m.LogicType)
		i = encodeVarintBase(dAtA, i, uint64(len(m.LogicType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dummy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dummy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dummy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CSysError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSysError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSysError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintBase(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CPong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CPong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ByteArrayWrap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *TcgMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LogicType)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.ConnInfo) > 0 {
		for k, v := range m.ConnInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBase(uint64(len(k))) + 1 + len(v) + sovBase(uint64(len(v)))
			n += mapEntrySize + 1 + sovBase(uint64(mapEntrySize))
		}
	}
	l = len(m.LogicData)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *Dummy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CSysError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBase(uint64(m.Code))
	}
	return n
}

func (m *C2SPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CPong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ByteArrayWrap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByteArrayWrap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByteArrayWrap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcgMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcgMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcgMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnInfo == nil {
				m.ConnInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBase
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBase
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBase
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBase
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBase(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBase
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ConnInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicData = append(m.LogicData[:0], dAtA[iNdEx:postIndex]...)
			if m.LogicData == nil {
				m.LogicData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dummy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dummy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dummy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSysError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSysError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSysError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBase = fmt.Errorf("proto: unexpected end of group")
)
