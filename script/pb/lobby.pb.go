// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/base/lobby.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 获取任务信息
type TaskType int32

const (
	TaskType_TaskType_None   TaskType = 0
	TaskType_TaskType_Daily  TaskType = 1
	TaskType_TaskType_Season TaskType = 3
)

var TaskType_name = map[int32]string{
	0: "TaskType_None",
	1: "TaskType_Daily",
	3: "TaskType_Season",
}

var TaskType_value = map[string]int32{
	"TaskType_None":   0,
	"TaskType_Daily":  1,
	"TaskType_Season": 3,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}

func (TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{0}
}

type UserDetailEvent int32

const (
	UserDetailEvent_UserDetail_None           UserDetailEvent = 0
	UserDetailEvent_UserDetail_RedPoint       UserDetailEvent = 1
	UserDetailEvent_UserDetail_CardPreference UserDetailEvent = 2
)

var UserDetailEvent_name = map[int32]string{
	0: "UserDetail_None",
	1: "UserDetail_RedPoint",
	2: "UserDetail_CardPreference",
}

var UserDetailEvent_value = map[string]int32{
	"UserDetail_None":           0,
	"UserDetail_RedPoint":       1,
	"UserDetail_CardPreference": 2,
}

func (x UserDetailEvent) String() string {
	return proto.EnumName(UserDetailEvent_name, int32(x))
}

func (UserDetailEvent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{1}
}

// 账号验证结果
type AccountVerifyResult struct {
	Code     ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Uid      string    `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Verify   int32     `protobuf:"varint,3,opt,name=verify,proto3" json:"verify,omitempty"`
	GToken   string    `protobuf:"bytes,4,opt,name=g_token,json=gToken,proto3" json:"g_token,omitempty"`
	IdNumber string    `protobuf:"bytes,5,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
}

func (m *AccountVerifyResult) Reset()         { *m = AccountVerifyResult{} }
func (m *AccountVerifyResult) String() string { return proto.CompactTextString(m) }
func (*AccountVerifyResult) ProtoMessage()    {}
func (*AccountVerifyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{0}
}
func (m *AccountVerifyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountVerifyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountVerifyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountVerifyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountVerifyResult.Merge(m, src)
}
func (m *AccountVerifyResult) XXX_Size() int {
	return m.Size()
}
func (m *AccountVerifyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountVerifyResult.DiscardUnknown(m)
}

var xxx_messageInfo_AccountVerifyResult proto.InternalMessageInfo

func (m *AccountVerifyResult) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *AccountVerifyResult) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *AccountVerifyResult) GetVerify() int32 {
	if m != nil {
		return m.Verify
	}
	return 0
}

func (m *AccountVerifyResult) GetGToken() string {
	if m != nil {
		return m.GToken
	}
	return ""
}

func (m *AccountVerifyResult) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

// 注册
type C2SRegister struct {
	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *C2SRegister) Reset()         { *m = C2SRegister{} }
func (m *C2SRegister) String() string { return proto.CompactTextString(m) }
func (*C2SRegister) ProtoMessage()    {}
func (*C2SRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{1}
}
func (m *C2SRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SRegister.Merge(m, src)
}
func (m *C2SRegister) XXX_Size() int {
	return m.Size()
}
func (m *C2SRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SRegister.DiscardUnknown(m)
}

var xxx_messageInfo_C2SRegister proto.InternalMessageInfo

func (m *C2SRegister) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *C2SRegister) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type S2CRegister struct {
	Res *AccountVerifyResult `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *S2CRegister) Reset()         { *m = S2CRegister{} }
func (m *S2CRegister) String() string { return proto.CompactTextString(m) }
func (*S2CRegister) ProtoMessage()    {}
func (*S2CRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{2}
}
func (m *S2CRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CRegister.Merge(m, src)
}
func (m *S2CRegister) XXX_Size() int {
	return m.Size()
}
func (m *S2CRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CRegister.DiscardUnknown(m)
}

var xxx_messageInfo_S2CRegister proto.InternalMessageInfo

func (m *S2CRegister) GetRes() *AccountVerifyResult {
	if m != nil {
		return m.Res
	}
	return nil
}

// 登录
type C2SLogin struct {
	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *C2SLogin) Reset()         { *m = C2SLogin{} }
func (m *C2SLogin) String() string { return proto.CompactTextString(m) }
func (*C2SLogin) ProtoMessage()    {}
func (*C2SLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{3}
}
func (m *C2SLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SLogin.Merge(m, src)
}
func (m *C2SLogin) XXX_Size() int {
	return m.Size()
}
func (m *C2SLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SLogin.DiscardUnknown(m)
}

var xxx_messageInfo_C2SLogin proto.InternalMessageInfo

func (m *C2SLogin) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *C2SLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type S2CLogin struct {
	Res *AccountVerifyResult `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *S2CLogin) Reset()         { *m = S2CLogin{} }
func (m *S2CLogin) String() string { return proto.CompactTextString(m) }
func (*S2CLogin) ProtoMessage()    {}
func (*S2CLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{4}
}
func (m *S2CLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CLogin.Merge(m, src)
}
func (m *S2CLogin) XXX_Size() int {
	return m.Size()
}
func (m *S2CLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CLogin.DiscardUnknown(m)
}

var xxx_messageInfo_S2CLogin proto.InternalMessageInfo

func (m *S2CLogin) GetRes() *AccountVerifyResult {
	if m != nil {
		return m.Res
	}
	return nil
}

// 实名制验证  返回 S2CRegister
type C2SUserVerify struct {
	Uid      string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IdNumber string `protobuf:"bytes,3,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
}

func (m *C2SUserVerify) Reset()         { *m = C2SUserVerify{} }
func (m *C2SUserVerify) String() string { return proto.CompactTextString(m) }
func (*C2SUserVerify) ProtoMessage()    {}
func (*C2SUserVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{5}
}
func (m *C2SUserVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SUserVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SUserVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SUserVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SUserVerify.Merge(m, src)
}
func (m *C2SUserVerify) XXX_Size() int {
	return m.Size()
}
func (m *C2SUserVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SUserVerify.DiscardUnknown(m)
}

var xxx_messageInfo_C2SUserVerify proto.InternalMessageInfo

func (m *C2SUserVerify) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *C2SUserVerify) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *C2SUserVerify) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

type S2CUserVerify struct {
	Res *AccountVerifyResult `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *S2CUserVerify) Reset()         { *m = S2CUserVerify{} }
func (m *S2CUserVerify) String() string { return proto.CompactTextString(m) }
func (*S2CUserVerify) ProtoMessage()    {}
func (*S2CUserVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{6}
}
func (m *S2CUserVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CUserVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CUserVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CUserVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CUserVerify.Merge(m, src)
}
func (m *S2CUserVerify) XXX_Size() int {
	return m.Size()
}
func (m *S2CUserVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CUserVerify.DiscardUnknown(m)
}

var xxx_messageInfo_S2CUserVerify proto.InternalMessageInfo

func (m *S2CUserVerify) GetRes() *AccountVerifyResult {
	if m != nil {
		return m.Res
	}
	return nil
}

// 自动注册
type C2SAutoRegister struct {
}

func (m *C2SAutoRegister) Reset()         { *m = C2SAutoRegister{} }
func (m *C2SAutoRegister) String() string { return proto.CompactTextString(m) }
func (*C2SAutoRegister) ProtoMessage()    {}
func (*C2SAutoRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{7}
}
func (m *C2SAutoRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SAutoRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SAutoRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SAutoRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SAutoRegister.Merge(m, src)
}
func (m *C2SAutoRegister) XXX_Size() int {
	return m.Size()
}
func (m *C2SAutoRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SAutoRegister.DiscardUnknown(m)
}

var xxx_messageInfo_C2SAutoRegister proto.InternalMessageInfo

type S2CAutoRegister struct {
	Account  string               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password string               `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Res      *AccountVerifyResult `protobuf:"bytes,3,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *S2CAutoRegister) Reset()         { *m = S2CAutoRegister{} }
func (m *S2CAutoRegister) String() string { return proto.CompactTextString(m) }
func (*S2CAutoRegister) ProtoMessage()    {}
func (*S2CAutoRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{8}
}
func (m *S2CAutoRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CAutoRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CAutoRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CAutoRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CAutoRegister.Merge(m, src)
}
func (m *S2CAutoRegister) XXX_Size() int {
	return m.Size()
}
func (m *S2CAutoRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CAutoRegister.DiscardUnknown(m)
}

var xxx_messageInfo_S2CAutoRegister proto.InternalMessageInfo

func (m *S2CAutoRegister) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *S2CAutoRegister) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *S2CAutoRegister) GetRes() *AccountVerifyResult {
	if m != nil {
		return m.Res
	}
	return nil
}

// 渠道账号登录
type C2SLoginByChannel struct {
	Channel LoginChannel      `protobuf:"varint,1,opt,name=channel,proto3,enum=LoginChannel" json:"channel,omitempty"`
	Args    map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *C2SLoginByChannel) Reset()         { *m = C2SLoginByChannel{} }
func (m *C2SLoginByChannel) String() string { return proto.CompactTextString(m) }
func (*C2SLoginByChannel) ProtoMessage()    {}
func (*C2SLoginByChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{9}
}
func (m *C2SLoginByChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SLoginByChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SLoginByChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SLoginByChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SLoginByChannel.Merge(m, src)
}
func (m *C2SLoginByChannel) XXX_Size() int {
	return m.Size()
}
func (m *C2SLoginByChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SLoginByChannel.DiscardUnknown(m)
}

var xxx_messageInfo_C2SLoginByChannel proto.InternalMessageInfo

func (m *C2SLoginByChannel) GetChannel() LoginChannel {
	if m != nil {
		return m.Channel
	}
	return LoginChannel_LoginChannel_None
}

func (m *C2SLoginByChannel) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type S2CLoginByChannel struct {
	Res *AccountVerifyResult `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *S2CLoginByChannel) Reset()         { *m = S2CLoginByChannel{} }
func (m *S2CLoginByChannel) String() string { return proto.CompactTextString(m) }
func (*S2CLoginByChannel) ProtoMessage()    {}
func (*S2CLoginByChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{10}
}
func (m *S2CLoginByChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CLoginByChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CLoginByChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CLoginByChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CLoginByChannel.Merge(m, src)
}
func (m *S2CLoginByChannel) XXX_Size() int {
	return m.Size()
}
func (m *S2CLoginByChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CLoginByChannel.DiscardUnknown(m)
}

var xxx_messageInfo_S2CLoginByChannel proto.InternalMessageInfo

func (m *S2CLoginByChannel) GetRes() *AccountVerifyResult {
	if m != nil {
		return m.Res
	}
	return nil
}

// 绑定渠道账号
type C2SBindChannelAccount struct {
	Channel LoginChannel      `protobuf:"varint,1,opt,name=channel,proto3,enum=LoginChannel" json:"channel,omitempty"`
	Args    map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *C2SBindChannelAccount) Reset()         { *m = C2SBindChannelAccount{} }
func (m *C2SBindChannelAccount) String() string { return proto.CompactTextString(m) }
func (*C2SBindChannelAccount) ProtoMessage()    {}
func (*C2SBindChannelAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{11}
}
func (m *C2SBindChannelAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SBindChannelAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SBindChannelAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SBindChannelAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SBindChannelAccount.Merge(m, src)
}
func (m *C2SBindChannelAccount) XXX_Size() int {
	return m.Size()
}
func (m *C2SBindChannelAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SBindChannelAccount.DiscardUnknown(m)
}

var xxx_messageInfo_C2SBindChannelAccount proto.InternalMessageInfo

func (m *C2SBindChannelAccount) GetChannel() LoginChannel {
	if m != nil {
		return m.Channel
	}
	return LoginChannel_LoginChannel_None
}

func (m *C2SBindChannelAccount) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type S2CBindChannelAccount struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CBindChannelAccount) Reset()         { *m = S2CBindChannelAccount{} }
func (m *S2CBindChannelAccount) String() string { return proto.CompactTextString(m) }
func (*S2CBindChannelAccount) ProtoMessage()    {}
func (*S2CBindChannelAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{12}
}
func (m *S2CBindChannelAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CBindChannelAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CBindChannelAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CBindChannelAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CBindChannelAccount.Merge(m, src)
}
func (m *S2CBindChannelAccount) XXX_Size() int {
	return m.Size()
}
func (m *S2CBindChannelAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CBindChannelAccount.DiscardUnknown(m)
}

var xxx_messageInfo_S2CBindChannelAccount proto.InternalMessageInfo

func (m *S2CBindChannelAccount) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

type UserDatail struct {
	RedPoints       []int32         `protobuf:"varint,1,rep,packed,name=red_points,json=redPoints,proto3" json:"red_points,omitempty"`
	CardPreferences map[int32]int32 `protobuf:"bytes,2,rep,name=card_preferences,json=cardPreferences,proto3" json:"card_preferences,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *UserDatail) Reset()         { *m = UserDatail{} }
func (m *UserDatail) String() string { return proto.CompactTextString(m) }
func (*UserDatail) ProtoMessage()    {}
func (*UserDatail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{13}
}
func (m *UserDatail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDatail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDatail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDatail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDatail.Merge(m, src)
}
func (m *UserDatail) XXX_Size() int {
	return m.Size()
}
func (m *UserDatail) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDatail.DiscardUnknown(m)
}

var xxx_messageInfo_UserDatail proto.InternalMessageInfo

func (m *UserDatail) GetRedPoints() []int32 {
	if m != nil {
		return m.RedPoints
	}
	return nil
}

func (m *UserDatail) GetCardPreferences() map[int32]int32 {
	if m != nil {
		return m.CardPreferences
	}
	return nil
}

type UserDatailNtf struct {
	UserDetail *UserDatail `protobuf:"bytes,1,opt,name=userDetail,proto3" json:"userDetail,omitempty"`
}

func (m *UserDatailNtf) Reset()         { *m = UserDatailNtf{} }
func (m *UserDatailNtf) String() string { return proto.CompactTextString(m) }
func (*UserDatailNtf) ProtoMessage()    {}
func (*UserDatailNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{14}
}
func (m *UserDatailNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDatailNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDatailNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDatailNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDatailNtf.Merge(m, src)
}
func (m *UserDatailNtf) XXX_Size() int {
	return m.Size()
}
func (m *UserDatailNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDatailNtf.DiscardUnknown(m)
}

var xxx_messageInfo_UserDatailNtf proto.InternalMessageInfo

func (m *UserDatailNtf) GetUserDetail() *UserDatail {
	if m != nil {
		return m.UserDetail
	}
	return nil
}

type User struct {
	Uid                 string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name                string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age                 int32       `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	RechargeAmount      int32       `protobuf:"varint,4,opt,name=recharge_amount,json=rechargeAmount,proto3" json:"recharge_amount,omitempty"`
	RechargeRefreshTime int64       `protobuf:"varint,5,opt,name=recharge_refresh_time,json=rechargeRefreshTime,proto3" json:"recharge_refresh_time,omitempty"`
	Head                int32       `protobuf:"varint,6,opt,name=head,proto3" json:"head,omitempty"`
	Expression          []int32     `protobuf:"varint,7,rep,packed,name=expression,proto3" json:"expression,omitempty"`
	Greetings           []int32     `protobuf:"varint,8,rep,packed,name=greetings,proto3" json:"greetings,omitempty"`
	Preferences         []int32     `protobuf:"varint,9,rep,packed,name=preferences,proto3" json:"preferences,omitempty"`
	OpenFunctions       []int32     `protobuf:"varint,10,rep,packed,name=open_functions,json=openFunctions,proto3" json:"open_functions,omitempty"`
	UserDetail          *UserDatail `protobuf:"bytes,11,opt,name=userDetail,proto3" json:"userDetail,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{15}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *User) GetRechargeAmount() int32 {
	if m != nil {
		return m.RechargeAmount
	}
	return 0
}

func (m *User) GetRechargeRefreshTime() int64 {
	if m != nil {
		return m.RechargeRefreshTime
	}
	return 0
}

func (m *User) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *User) GetExpression() []int32 {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *User) GetGreetings() []int32 {
	if m != nil {
		return m.Greetings
	}
	return nil
}

func (m *User) GetPreferences() []int32 {
	if m != nil {
		return m.Preferences
	}
	return nil
}

func (m *User) GetOpenFunctions() []int32 {
	if m != nil {
		return m.OpenFunctions
	}
	return nil
}

func (m *User) GetUserDetail() *UserDatail {
	if m != nil {
		return m.UserDetail
	}
	return nil
}

// 初始协议，验证token
type C2SVerifyToken struct {
	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *C2SVerifyToken) Reset()         { *m = C2SVerifyToken{} }
func (m *C2SVerifyToken) String() string { return proto.CompactTextString(m) }
func (*C2SVerifyToken) ProtoMessage()    {}
func (*C2SVerifyToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{16}
}
func (m *C2SVerifyToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SVerifyToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SVerifyToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SVerifyToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SVerifyToken.Merge(m, src)
}
func (m *C2SVerifyToken) XXX_Size() int {
	return m.Size()
}
func (m *C2SVerifyToken) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SVerifyToken.DiscardUnknown(m)
}

var xxx_messageInfo_C2SVerifyToken proto.InternalMessageInfo

func (m *C2SVerifyToken) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *C2SVerifyToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type S2CVerifyToken struct {
	Code       ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	User       *User     `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Guide_List []*Guide  `protobuf:"bytes,3,rep,name=guide_List,json=guideList,proto3" json:"guide_List,omitempty"`
	Token      string    `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *S2CVerifyToken) Reset()         { *m = S2CVerifyToken{} }
func (m *S2CVerifyToken) String() string { return proto.CompactTextString(m) }
func (*S2CVerifyToken) ProtoMessage()    {}
func (*S2CVerifyToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{17}
}
func (m *S2CVerifyToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CVerifyToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CVerifyToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CVerifyToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CVerifyToken.Merge(m, src)
}
func (m *S2CVerifyToken) XXX_Size() int {
	return m.Size()
}
func (m *S2CVerifyToken) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CVerifyToken.DiscardUnknown(m)
}

var xxx_messageInfo_S2CVerifyToken proto.InternalMessageInfo

func (m *S2CVerifyToken) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CVerifyToken) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *S2CVerifyToken) GetGuide_List() []*Guide {
	if m != nil {
		return m.Guide_List
	}
	return nil
}

func (m *S2CVerifyToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 重连大厅服
type C2SReconnection struct {
	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *C2SReconnection) Reset()         { *m = C2SReconnection{} }
func (m *C2SReconnection) String() string { return proto.CompactTextString(m) }
func (*C2SReconnection) ProtoMessage()    {}
func (*C2SReconnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{18}
}
func (m *C2SReconnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SReconnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SReconnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SReconnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SReconnection.Merge(m, src)
}
func (m *C2SReconnection) XXX_Size() int {
	return m.Size()
}
func (m *C2SReconnection) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SReconnection.DiscardUnknown(m)
}

var xxx_messageInfo_C2SReconnection proto.InternalMessageInfo

func (m *C2SReconnection) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *C2SReconnection) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type S2CReconnection struct {
	Code  ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Token string    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *S2CReconnection) Reset()         { *m = S2CReconnection{} }
func (m *S2CReconnection) String() string { return proto.CompactTextString(m) }
func (*S2CReconnection) ProtoMessage()    {}
func (*S2CReconnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{19}
}
func (m *S2CReconnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CReconnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CReconnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CReconnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CReconnection.Merge(m, src)
}
func (m *S2CReconnection) XXX_Size() int {
	return m.Size()
}
func (m *S2CReconnection) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CReconnection.DiscardUnknown(m)
}

var xxx_messageInfo_S2CReconnection proto.InternalMessageInfo

func (m *S2CReconnection) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CReconnection) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 设置头像
type C2SSetHead struct {
	Head int32 `protobuf:"varint,1,opt,name=head,proto3" json:"head,omitempty"`
}

func (m *C2SSetHead) Reset()         { *m = C2SSetHead{} }
func (m *C2SSetHead) String() string { return proto.CompactTextString(m) }
func (*C2SSetHead) ProtoMessage()    {}
func (*C2SSetHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{20}
}
func (m *C2SSetHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSetHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSetHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSetHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSetHead.Merge(m, src)
}
func (m *C2SSetHead) XXX_Size() int {
	return m.Size()
}
func (m *C2SSetHead) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSetHead.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSetHead proto.InternalMessageInfo

func (m *C2SSetHead) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

type S2CSetHead struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CSetHead) Reset()         { *m = S2CSetHead{} }
func (m *S2CSetHead) String() string { return proto.CompactTextString(m) }
func (*S2CSetHead) ProtoMessage()    {}
func (*S2CSetHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{21}
}
func (m *S2CSetHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSetHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSetHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSetHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSetHead.Merge(m, src)
}
func (m *S2CSetHead) XXX_Size() int {
	return m.Size()
}
func (m *S2CSetHead) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSetHead.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSetHead proto.InternalMessageInfo

func (m *S2CSetHead) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 设置角色名
type C2SSetName struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *C2SSetName) Reset()         { *m = C2SSetName{} }
func (m *C2SSetName) String() string { return proto.CompactTextString(m) }
func (*C2SSetName) ProtoMessage()    {}
func (*C2SSetName) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{22}
}
func (m *C2SSetName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSetName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSetName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSetName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSetName.Merge(m, src)
}
func (m *C2SSetName) XXX_Size() int {
	return m.Size()
}
func (m *C2SSetName) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSetName.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSetName proto.InternalMessageInfo

func (m *C2SSetName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type S2CSetName struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CSetName) Reset()         { *m = S2CSetName{} }
func (m *S2CSetName) String() string { return proto.CompactTextString(m) }
func (*S2CSetName) ProtoMessage()    {}
func (*S2CSetName) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{23}
}
func (m *S2CSetName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSetName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSetName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSetName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSetName.Merge(m, src)
}
func (m *S2CSetName) XXX_Size() int {
	return m.Size()
}
func (m *S2CSetName) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSetName.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSetName proto.InternalMessageInfo

func (m *S2CSetName) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 创建卡组信息
type C2SCreateDeck struct {
	CardList []int32 `protobuf:"varint,1,rep,packed,name=cardList,proto3" json:"cardList,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *C2SCreateDeck) Reset()         { *m = C2SCreateDeck{} }
func (m *C2SCreateDeck) String() string { return proto.CompactTextString(m) }
func (*C2SCreateDeck) ProtoMessage()    {}
func (*C2SCreateDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{24}
}
func (m *C2SCreateDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SCreateDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SCreateDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SCreateDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SCreateDeck.Merge(m, src)
}
func (m *C2SCreateDeck) XXX_Size() int {
	return m.Size()
}
func (m *C2SCreateDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SCreateDeck.DiscardUnknown(m)
}

var xxx_messageInfo_C2SCreateDeck proto.InternalMessageInfo

func (m *C2SCreateDeck) GetCardList() []int32 {
	if m != nil {
		return m.CardList
	}
	return nil
}

func (m *C2SCreateDeck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type S2CCreateDeck struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Deck *Deck     `protobuf:"bytes,2,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (m *S2CCreateDeck) Reset()         { *m = S2CCreateDeck{} }
func (m *S2CCreateDeck) String() string { return proto.CompactTextString(m) }
func (*S2CCreateDeck) ProtoMessage()    {}
func (*S2CCreateDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{25}
}
func (m *S2CCreateDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CCreateDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CCreateDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CCreateDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CCreateDeck.Merge(m, src)
}
func (m *S2CCreateDeck) XXX_Size() int {
	return m.Size()
}
func (m *S2CCreateDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CCreateDeck.DiscardUnknown(m)
}

var xxx_messageInfo_S2CCreateDeck proto.InternalMessageInfo

func (m *S2CCreateDeck) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CCreateDeck) GetDeck() *Deck {
	if m != nil {
		return m.Deck
	}
	return nil
}

// 更新卡组信息
type C2SUpdateDeck struct {
	Id       int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CardList []int32 `protobuf:"varint,2,rep,packed,name=cardList,proto3" json:"cardList,omitempty"`
	Name     string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	BackSkin int32   `protobuf:"varint,4,opt,name=backSkin,proto3" json:"backSkin,omitempty"`
	Titles   int32   `protobuf:"varint,5,opt,name=titles,proto3" json:"titles,omitempty"`
	Avatar   int32   `protobuf:"varint,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *C2SUpdateDeck) Reset()         { *m = C2SUpdateDeck{} }
func (m *C2SUpdateDeck) String() string { return proto.CompactTextString(m) }
func (*C2SUpdateDeck) ProtoMessage()    {}
func (*C2SUpdateDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{26}
}
func (m *C2SUpdateDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SUpdateDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SUpdateDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SUpdateDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SUpdateDeck.Merge(m, src)
}
func (m *C2SUpdateDeck) XXX_Size() int {
	return m.Size()
}
func (m *C2SUpdateDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SUpdateDeck.DiscardUnknown(m)
}

var xxx_messageInfo_C2SUpdateDeck proto.InternalMessageInfo

func (m *C2SUpdateDeck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUpdateDeck) GetCardList() []int32 {
	if m != nil {
		return m.CardList
	}
	return nil
}

func (m *C2SUpdateDeck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *C2SUpdateDeck) GetBackSkin() int32 {
	if m != nil {
		return m.BackSkin
	}
	return 0
}

func (m *C2SUpdateDeck) GetTitles() int32 {
	if m != nil {
		return m.Titles
	}
	return 0
}

func (m *C2SUpdateDeck) GetAvatar() int32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

type S2CUpdateDeck struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Deck *Deck     `protobuf:"bytes,2,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (m *S2CUpdateDeck) Reset()         { *m = S2CUpdateDeck{} }
func (m *S2CUpdateDeck) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateDeck) ProtoMessage()    {}
func (*S2CUpdateDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{27}
}
func (m *S2CUpdateDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CUpdateDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CUpdateDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CUpdateDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CUpdateDeck.Merge(m, src)
}
func (m *S2CUpdateDeck) XXX_Size() int {
	return m.Size()
}
func (m *S2CUpdateDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CUpdateDeck.DiscardUnknown(m)
}

var xxx_messageInfo_S2CUpdateDeck proto.InternalMessageInfo

func (m *S2CUpdateDeck) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CUpdateDeck) GetDeck() *Deck {
	if m != nil {
		return m.Deck
	}
	return nil
}

// 应用到所有卡组
type C2SApplyAllDeck struct {
	BackSkin int32 `protobuf:"varint,4,opt,name=backSkin,proto3" json:"backSkin,omitempty"`
	Titles   int32 `protobuf:"varint,5,opt,name=titles,proto3" json:"titles,omitempty"`
	Avatar   int32 `protobuf:"varint,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *C2SApplyAllDeck) Reset()         { *m = C2SApplyAllDeck{} }
func (m *C2SApplyAllDeck) String() string { return proto.CompactTextString(m) }
func (*C2SApplyAllDeck) ProtoMessage()    {}
func (*C2SApplyAllDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{28}
}
func (m *C2SApplyAllDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SApplyAllDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SApplyAllDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SApplyAllDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SApplyAllDeck.Merge(m, src)
}
func (m *C2SApplyAllDeck) XXX_Size() int {
	return m.Size()
}
func (m *C2SApplyAllDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SApplyAllDeck.DiscardUnknown(m)
}

var xxx_messageInfo_C2SApplyAllDeck proto.InternalMessageInfo

func (m *C2SApplyAllDeck) GetBackSkin() int32 {
	if m != nil {
		return m.BackSkin
	}
	return 0
}

func (m *C2SApplyAllDeck) GetTitles() int32 {
	if m != nil {
		return m.Titles
	}
	return 0
}

func (m *C2SApplyAllDeck) GetAvatar() int32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

type S2CApplyAllDeck struct {
	Code     ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	DeckList []*Deck   `protobuf:"bytes,2,rep,name=deckList,proto3" json:"deckList,omitempty"`
}

func (m *S2CApplyAllDeck) Reset()         { *m = S2CApplyAllDeck{} }
func (m *S2CApplyAllDeck) String() string { return proto.CompactTextString(m) }
func (*S2CApplyAllDeck) ProtoMessage()    {}
func (*S2CApplyAllDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{29}
}
func (m *S2CApplyAllDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CApplyAllDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CApplyAllDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CApplyAllDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CApplyAllDeck.Merge(m, src)
}
func (m *S2CApplyAllDeck) XXX_Size() int {
	return m.Size()
}
func (m *S2CApplyAllDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CApplyAllDeck.DiscardUnknown(m)
}

var xxx_messageInfo_S2CApplyAllDeck proto.InternalMessageInfo

func (m *S2CApplyAllDeck) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CApplyAllDeck) GetDeckList() []*Deck {
	if m != nil {
		return m.DeckList
	}
	return nil
}

// 删除卡组信息
type C2SDeleteDeck struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SDeleteDeck) Reset()         { *m = C2SDeleteDeck{} }
func (m *C2SDeleteDeck) String() string { return proto.CompactTextString(m) }
func (*C2SDeleteDeck) ProtoMessage()    {}
func (*C2SDeleteDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{30}
}
func (m *C2SDeleteDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SDeleteDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SDeleteDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SDeleteDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SDeleteDeck.Merge(m, src)
}
func (m *C2SDeleteDeck) XXX_Size() int {
	return m.Size()
}
func (m *C2SDeleteDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SDeleteDeck.DiscardUnknown(m)
}

var xxx_messageInfo_C2SDeleteDeck proto.InternalMessageInfo

func (m *C2SDeleteDeck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CDeleteDeck struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Id   int32     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CDeleteDeck) Reset()         { *m = S2CDeleteDeck{} }
func (m *S2CDeleteDeck) String() string { return proto.CompactTextString(m) }
func (*S2CDeleteDeck) ProtoMessage()    {}
func (*S2CDeleteDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{31}
}
func (m *S2CDeleteDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CDeleteDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CDeleteDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CDeleteDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CDeleteDeck.Merge(m, src)
}
func (m *S2CDeleteDeck) XXX_Size() int {
	return m.Size()
}
func (m *S2CDeleteDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CDeleteDeck.DiscardUnknown(m)
}

var xxx_messageInfo_S2CDeleteDeck proto.InternalMessageInfo

func (m *S2CDeleteDeck) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CDeleteDeck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 查询卡组信息
type C2SQueryDecks struct {
}

func (m *C2SQueryDecks) Reset()         { *m = C2SQueryDecks{} }
func (m *C2SQueryDecks) String() string { return proto.CompactTextString(m) }
func (*C2SQueryDecks) ProtoMessage()    {}
func (*C2SQueryDecks) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{32}
}
func (m *C2SQueryDecks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SQueryDecks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SQueryDecks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SQueryDecks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SQueryDecks.Merge(m, src)
}
func (m *C2SQueryDecks) XXX_Size() int {
	return m.Size()
}
func (m *C2SQueryDecks) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SQueryDecks.DiscardUnknown(m)
}

var xxx_messageInfo_C2SQueryDecks proto.InternalMessageInfo

type S2CQueryDecks struct {
	Code     ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	DeckList []*Deck   `protobuf:"bytes,2,rep,name=deckList,proto3" json:"deckList,omitempty"`
}

func (m *S2CQueryDecks) Reset()         { *m = S2CQueryDecks{} }
func (m *S2CQueryDecks) String() string { return proto.CompactTextString(m) }
func (*S2CQueryDecks) ProtoMessage()    {}
func (*S2CQueryDecks) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{33}
}
func (m *S2CQueryDecks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CQueryDecks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CQueryDecks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CQueryDecks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CQueryDecks.Merge(m, src)
}
func (m *S2CQueryDecks) XXX_Size() int {
	return m.Size()
}
func (m *S2CQueryDecks) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CQueryDecks.DiscardUnknown(m)
}

var xxx_messageInfo_S2CQueryDecks proto.InternalMessageInfo

func (m *S2CQueryDecks) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CQueryDecks) GetDeckList() []*Deck {
	if m != nil {
		return m.DeckList
	}
	return nil
}

// 卡牌信息更新
type CardDetailInfoNtf struct {
	UpdateCard *CardDetailInfo `protobuf:"bytes,1,opt,name=updateCard,proto3" json:"updateCard,omitempty"`
}

func (m *CardDetailInfoNtf) Reset()         { *m = CardDetailInfoNtf{} }
func (m *CardDetailInfoNtf) String() string { return proto.CompactTextString(m) }
func (*CardDetailInfoNtf) ProtoMessage()    {}
func (*CardDetailInfoNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{34}
}
func (m *CardDetailInfoNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardDetailInfoNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardDetailInfoNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardDetailInfoNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardDetailInfoNtf.Merge(m, src)
}
func (m *CardDetailInfoNtf) XXX_Size() int {
	return m.Size()
}
func (m *CardDetailInfoNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_CardDetailInfoNtf.DiscardUnknown(m)
}

var xxx_messageInfo_CardDetailInfoNtf proto.InternalMessageInfo

func (m *CardDetailInfoNtf) GetUpdateCard() *CardDetailInfo {
	if m != nil {
		return m.UpdateCard
	}
	return nil
}

// 查询卡牌信息
type C2SCardList struct {
}

func (m *C2SCardList) Reset()         { *m = C2SCardList{} }
func (m *C2SCardList) String() string { return proto.CompactTextString(m) }
func (*C2SCardList) ProtoMessage()    {}
func (*C2SCardList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{35}
}
func (m *C2SCardList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SCardList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SCardList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SCardList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SCardList.Merge(m, src)
}
func (m *C2SCardList) XXX_Size() int {
	return m.Size()
}
func (m *C2SCardList) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SCardList.DiscardUnknown(m)
}

var xxx_messageInfo_C2SCardList proto.InternalMessageInfo

type S2CCardList struct {
	Code  ErrorCode         `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Cards []*CardDetailInfo `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (m *S2CCardList) Reset()         { *m = S2CCardList{} }
func (m *S2CCardList) String() string { return proto.CompactTextString(m) }
func (*S2CCardList) ProtoMessage()    {}
func (*S2CCardList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{36}
}
func (m *S2CCardList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CCardList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CCardList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CCardList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CCardList.Merge(m, src)
}
func (m *S2CCardList) XXX_Size() int {
	return m.Size()
}
func (m *S2CCardList) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CCardList.DiscardUnknown(m)
}

var xxx_messageInfo_S2CCardList proto.InternalMessageInfo

func (m *S2CCardList) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CCardList) GetCards() []*CardDetailInfo {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 升级卡牌
type C2SUpgradeCard struct {
	CardId   int32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	TargetLv int32 `protobuf:"varint,2,opt,name=target_lv,json=targetLv,proto3" json:"target_lv,omitempty"`
}

func (m *C2SUpgradeCard) Reset()         { *m = C2SUpgradeCard{} }
func (m *C2SUpgradeCard) String() string { return proto.CompactTextString(m) }
func (*C2SUpgradeCard) ProtoMessage()    {}
func (*C2SUpgradeCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{37}
}
func (m *C2SUpgradeCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SUpgradeCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SUpgradeCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SUpgradeCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SUpgradeCard.Merge(m, src)
}
func (m *C2SUpgradeCard) XXX_Size() int {
	return m.Size()
}
func (m *C2SUpgradeCard) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SUpgradeCard.DiscardUnknown(m)
}

var xxx_messageInfo_C2SUpgradeCard proto.InternalMessageInfo

func (m *C2SUpgradeCard) GetCardId() int32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *C2SUpgradeCard) GetTargetLv() int32 {
	if m != nil {
		return m.TargetLv
	}
	return 0
}

type S2CUpgradeCard struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CUpgradeCard) Reset()         { *m = S2CUpgradeCard{} }
func (m *S2CUpgradeCard) String() string { return proto.CompactTextString(m) }
func (*S2CUpgradeCard) ProtoMessage()    {}
func (*S2CUpgradeCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{38}
}
func (m *S2CUpgradeCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CUpgradeCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CUpgradeCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CUpgradeCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CUpgradeCard.Merge(m, src)
}
func (m *S2CUpgradeCard) XXX_Size() int {
	return m.Size()
}
func (m *S2CUpgradeCard) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CUpgradeCard.DiscardUnknown(m)
}

var xxx_messageInfo_S2CUpgradeCard proto.InternalMessageInfo

func (m *S2CUpgradeCard) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 进化
type C2SEvolveCard struct {
	CardId int32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (m *C2SEvolveCard) Reset()         { *m = C2SEvolveCard{} }
func (m *C2SEvolveCard) String() string { return proto.CompactTextString(m) }
func (*C2SEvolveCard) ProtoMessage()    {}
func (*C2SEvolveCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{39}
}
func (m *C2SEvolveCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SEvolveCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SEvolveCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SEvolveCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SEvolveCard.Merge(m, src)
}
func (m *C2SEvolveCard) XXX_Size() int {
	return m.Size()
}
func (m *C2SEvolveCard) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SEvolveCard.DiscardUnknown(m)
}

var xxx_messageInfo_C2SEvolveCard proto.InternalMessageInfo

func (m *C2SEvolveCard) GetCardId() int32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

type S2CEvolveCard struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Icon int32     `protobuf:"varint,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (m *S2CEvolveCard) Reset()         { *m = S2CEvolveCard{} }
func (m *S2CEvolveCard) String() string { return proto.CompactTextString(m) }
func (*S2CEvolveCard) ProtoMessage()    {}
func (*S2CEvolveCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{40}
}
func (m *S2CEvolveCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CEvolveCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CEvolveCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CEvolveCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CEvolveCard.Merge(m, src)
}
func (m *S2CEvolveCard) XXX_Size() int {
	return m.Size()
}
func (m *S2CEvolveCard) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CEvolveCard.DiscardUnknown(m)
}

var xxx_messageInfo_S2CEvolveCard proto.InternalMessageInfo

func (m *S2CEvolveCard) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CEvolveCard) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

// 设置卡牌
type C2SSetCard struct {
	CardId  int32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CurIcon int32 `protobuf:"varint,4,opt,name=curIcon,proto3" json:"curIcon,omitempty"`
}

func (m *C2SSetCard) Reset()         { *m = C2SSetCard{} }
func (m *C2SSetCard) String() string { return proto.CompactTextString(m) }
func (*C2SSetCard) ProtoMessage()    {}
func (*C2SSetCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{41}
}
func (m *C2SSetCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSetCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSetCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSetCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSetCard.Merge(m, src)
}
func (m *C2SSetCard) XXX_Size() int {
	return m.Size()
}
func (m *C2SSetCard) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSetCard.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSetCard proto.InternalMessageInfo

func (m *C2SSetCard) GetCardId() int32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *C2SSetCard) GetCurIcon() int32 {
	if m != nil {
		return m.CurIcon
	}
	return 0
}

type S2CSetCard struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CSetCard) Reset()         { *m = S2CSetCard{} }
func (m *S2CSetCard) String() string { return proto.CompactTextString(m) }
func (*S2CSetCard) ProtoMessage()    {}
func (*S2CSetCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{42}
}
func (m *S2CSetCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSetCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSetCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSetCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSetCard.Merge(m, src)
}
func (m *S2CSetCard) XXX_Size() int {
	return m.Size()
}
func (m *S2CSetCard) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSetCard.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSetCard proto.InternalMessageInfo

func (m *S2CSetCard) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 推荐卡组
type C2SRecommendCard struct {
	CardList []int32 `protobuf:"varint,1,rep,packed,name=cardList,proto3" json:"cardList,omitempty"`
}

func (m *C2SRecommendCard) Reset()         { *m = C2SRecommendCard{} }
func (m *C2SRecommendCard) String() string { return proto.CompactTextString(m) }
func (*C2SRecommendCard) ProtoMessage()    {}
func (*C2SRecommendCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{43}
}
func (m *C2SRecommendCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SRecommendCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SRecommendCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SRecommendCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SRecommendCard.Merge(m, src)
}
func (m *C2SRecommendCard) XXX_Size() int {
	return m.Size()
}
func (m *C2SRecommendCard) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SRecommendCard.DiscardUnknown(m)
}

var xxx_messageInfo_C2SRecommendCard proto.InternalMessageInfo

func (m *C2SRecommendCard) GetCardList() []int32 {
	if m != nil {
		return m.CardList
	}
	return nil
}

type S2CRecommendCard struct {
	RecommendCards []int32 `protobuf:"varint,1,rep,packed,name=recommend_cards,json=recommendCards,proto3" json:"recommend_cards,omitempty"`
}

func (m *S2CRecommendCard) Reset()         { *m = S2CRecommendCard{} }
func (m *S2CRecommendCard) String() string { return proto.CompactTextString(m) }
func (*S2CRecommendCard) ProtoMessage()    {}
func (*S2CRecommendCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{44}
}
func (m *S2CRecommendCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CRecommendCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CRecommendCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CRecommendCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CRecommendCard.Merge(m, src)
}
func (m *S2CRecommendCard) XXX_Size() int {
	return m.Size()
}
func (m *S2CRecommendCard) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CRecommendCard.DiscardUnknown(m)
}

var xxx_messageInfo_S2CRecommendCard proto.InternalMessageInfo

func (m *S2CRecommendCard) GetRecommendCards() []int32 {
	if m != nil {
		return m.RecommendCards
	}
	return nil
}

// 开始匹配
type C2SApplyMatch struct {
	Mode MatchMode `protobuf:"varint,1,opt,name=mode,proto3,enum=MatchMode" json:"mode,omitempty"`
}

func (m *C2SApplyMatch) Reset()         { *m = C2SApplyMatch{} }
func (m *C2SApplyMatch) String() string { return proto.CompactTextString(m) }
func (*C2SApplyMatch) ProtoMessage()    {}
func (*C2SApplyMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{45}
}
func (m *C2SApplyMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SApplyMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SApplyMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SApplyMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SApplyMatch.Merge(m, src)
}
func (m *C2SApplyMatch) XXX_Size() int {
	return m.Size()
}
func (m *C2SApplyMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SApplyMatch.DiscardUnknown(m)
}

var xxx_messageInfo_C2SApplyMatch proto.InternalMessageInfo

func (m *C2SApplyMatch) GetMode() MatchMode {
	if m != nil {
		return m.Mode
	}
	return MatchMode_MatchMode_None
}

type S2CApplyMatch struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CApplyMatch) Reset()         { *m = S2CApplyMatch{} }
func (m *S2CApplyMatch) String() string { return proto.CompactTextString(m) }
func (*S2CApplyMatch) ProtoMessage()    {}
func (*S2CApplyMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{46}
}
func (m *S2CApplyMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CApplyMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CApplyMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CApplyMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CApplyMatch.Merge(m, src)
}
func (m *S2CApplyMatch) XXX_Size() int {
	return m.Size()
}
func (m *S2CApplyMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CApplyMatch.DiscardUnknown(m)
}

var xxx_messageInfo_S2CApplyMatch proto.InternalMessageInfo

func (m *S2CApplyMatch) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 退出匹配
type C2SExitMatch struct {
}

func (m *C2SExitMatch) Reset()         { *m = C2SExitMatch{} }
func (m *C2SExitMatch) String() string { return proto.CompactTextString(m) }
func (*C2SExitMatch) ProtoMessage()    {}
func (*C2SExitMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{47}
}
func (m *C2SExitMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SExitMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SExitMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SExitMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SExitMatch.Merge(m, src)
}
func (m *C2SExitMatch) XXX_Size() int {
	return m.Size()
}
func (m *C2SExitMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SExitMatch.DiscardUnknown(m)
}

var xxx_messageInfo_C2SExitMatch proto.InternalMessageInfo

type S2CExitMatch struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CExitMatch) Reset()         { *m = S2CExitMatch{} }
func (m *S2CExitMatch) String() string { return proto.CompactTextString(m) }
func (*S2CExitMatch) ProtoMessage()    {}
func (*S2CExitMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{48}
}
func (m *S2CExitMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CExitMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CExitMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CExitMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CExitMatch.Merge(m, src)
}
func (m *S2CExitMatch) XXX_Size() int {
	return m.Size()
}
func (m *S2CExitMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CExitMatch.DiscardUnknown(m)
}

var xxx_messageInfo_S2CExitMatch proto.InternalMessageInfo

func (m *S2CExitMatch) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 修改战斗卡组信息
type C2SUpBattleDeck struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUpBattleDeck) Reset()         { *m = C2SUpBattleDeck{} }
func (m *C2SUpBattleDeck) String() string { return proto.CompactTextString(m) }
func (*C2SUpBattleDeck) ProtoMessage()    {}
func (*C2SUpBattleDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{49}
}
func (m *C2SUpBattleDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SUpBattleDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SUpBattleDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SUpBattleDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SUpBattleDeck.Merge(m, src)
}
func (m *C2SUpBattleDeck) XXX_Size() int {
	return m.Size()
}
func (m *C2SUpBattleDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SUpBattleDeck.DiscardUnknown(m)
}

var xxx_messageInfo_C2SUpBattleDeck proto.InternalMessageInfo

func (m *C2SUpBattleDeck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUpBattleDeck struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CUpBattleDeck) Reset()         { *m = S2CUpBattleDeck{} }
func (m *S2CUpBattleDeck) String() string { return proto.CompactTextString(m) }
func (*S2CUpBattleDeck) ProtoMessage()    {}
func (*S2CUpBattleDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{50}
}
func (m *S2CUpBattleDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CUpBattleDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CUpBattleDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CUpBattleDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CUpBattleDeck.Merge(m, src)
}
func (m *S2CUpBattleDeck) XXX_Size() int {
	return m.Size()
}
func (m *S2CUpBattleDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CUpBattleDeck.DiscardUnknown(m)
}

var xxx_messageInfo_S2CUpBattleDeck proto.InternalMessageInfo

func (m *S2CUpBattleDeck) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 查询战斗卡组信息
type C2SQueryBattleDeck struct {
}

func (m *C2SQueryBattleDeck) Reset()         { *m = C2SQueryBattleDeck{} }
func (m *C2SQueryBattleDeck) String() string { return proto.CompactTextString(m) }
func (*C2SQueryBattleDeck) ProtoMessage()    {}
func (*C2SQueryBattleDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{51}
}
func (m *C2SQueryBattleDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SQueryBattleDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SQueryBattleDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SQueryBattleDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SQueryBattleDeck.Merge(m, src)
}
func (m *C2SQueryBattleDeck) XXX_Size() int {
	return m.Size()
}
func (m *C2SQueryBattleDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SQueryBattleDeck.DiscardUnknown(m)
}

var xxx_messageInfo_C2SQueryBattleDeck proto.InternalMessageInfo

type S2CQueryBattleDeck struct {
	Id int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CQueryBattleDeck) Reset()         { *m = S2CQueryBattleDeck{} }
func (m *S2CQueryBattleDeck) String() string { return proto.CompactTextString(m) }
func (*S2CQueryBattleDeck) ProtoMessage()    {}
func (*S2CQueryBattleDeck) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{52}
}
func (m *S2CQueryBattleDeck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CQueryBattleDeck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CQueryBattleDeck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CQueryBattleDeck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CQueryBattleDeck.Merge(m, src)
}
func (m *S2CQueryBattleDeck) XXX_Size() int {
	return m.Size()
}
func (m *S2CQueryBattleDeck) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CQueryBattleDeck.DiscardUnknown(m)
}

var xxx_messageInfo_S2CQueryBattleDeck proto.InternalMessageInfo

func (m *S2CQueryBattleDeck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LotteryInfo struct {
	LotteryId        int32 `protobuf:"varint,1,opt,name=lottery_id,json=lotteryId,proto3" json:"lottery_id,omitempty"`
	GoldenDrawTimes  int32 `protobuf:"varint,2,opt,name=golden_draw_times,json=goldenDrawTimes,proto3" json:"golden_draw_times,omitempty"`
	MagicalDrawTimes int32 `protobuf:"varint,3,opt,name=magical_draw_times,json=magicalDrawTimes,proto3" json:"magical_draw_times,omitempty"`
	TotalDrawTimes   int32 `protobuf:"varint,4,opt,name=total_draw_times,json=totalDrawTimes,proto3" json:"total_draw_times,omitempty"`
}

func (m *LotteryInfo) Reset()         { *m = LotteryInfo{} }
func (m *LotteryInfo) String() string { return proto.CompactTextString(m) }
func (*LotteryInfo) ProtoMessage()    {}
func (*LotteryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{53}
}
func (m *LotteryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryInfo.Merge(m, src)
}
func (m *LotteryInfo) XXX_Size() int {
	return m.Size()
}
func (m *LotteryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryInfo proto.InternalMessageInfo

func (m *LotteryInfo) GetLotteryId() int32 {
	if m != nil {
		return m.LotteryId
	}
	return 0
}

func (m *LotteryInfo) GetGoldenDrawTimes() int32 {
	if m != nil {
		return m.GoldenDrawTimes
	}
	return 0
}

func (m *LotteryInfo) GetMagicalDrawTimes() int32 {
	if m != nil {
		return m.MagicalDrawTimes
	}
	return 0
}

func (m *LotteryInfo) GetTotalDrawTimes() int32 {
	if m != nil {
		return m.TotalDrawTimes
	}
	return 0
}

// 查询所有奖池信息
type C2SLotteryList struct {
}

func (m *C2SLotteryList) Reset()         { *m = C2SLotteryList{} }
func (m *C2SLotteryList) String() string { return proto.CompactTextString(m) }
func (*C2SLotteryList) ProtoMessage()    {}
func (*C2SLotteryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{54}
}
func (m *C2SLotteryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SLotteryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SLotteryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SLotteryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SLotteryList.Merge(m, src)
}
func (m *C2SLotteryList) XXX_Size() int {
	return m.Size()
}
func (m *C2SLotteryList) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SLotteryList.DiscardUnknown(m)
}

var xxx_messageInfo_C2SLotteryList proto.InternalMessageInfo

type S2CLotteryList struct {
	Code        ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	LotteryList map[int32]*LotteryInfo `protobuf:"bytes,2,rep,name=lottery_list,json=lotteryList,proto3" json:"lottery_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *S2CLotteryList) Reset()         { *m = S2CLotteryList{} }
func (m *S2CLotteryList) String() string { return proto.CompactTextString(m) }
func (*S2CLotteryList) ProtoMessage()    {}
func (*S2CLotteryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{55}
}
func (m *S2CLotteryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CLotteryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CLotteryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CLotteryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CLotteryList.Merge(m, src)
}
func (m *S2CLotteryList) XXX_Size() int {
	return m.Size()
}
func (m *S2CLotteryList) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CLotteryList.DiscardUnknown(m)
}

var xxx_messageInfo_S2CLotteryList proto.InternalMessageInfo

func (m *S2CLotteryList) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CLotteryList) GetLotteryList() map[int32]*LotteryInfo {
	if m != nil {
		return m.LotteryList
	}
	return nil
}

// 奖池奖励历史信息
type LotteryHistoryData struct {
	Items     []int32 `protobuf:"varint,1,rep,packed,name=items,proto3" json:"items,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *LotteryHistoryData) Reset()         { *m = LotteryHistoryData{} }
func (m *LotteryHistoryData) String() string { return proto.CompactTextString(m) }
func (*LotteryHistoryData) ProtoMessage()    {}
func (*LotteryHistoryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{56}
}
func (m *LotteryHistoryData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryHistoryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryHistoryData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryHistoryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryHistoryData.Merge(m, src)
}
func (m *LotteryHistoryData) XXX_Size() int {
	return m.Size()
}
func (m *LotteryHistoryData) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryHistoryData.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryHistoryData proto.InternalMessageInfo

func (m *LotteryHistoryData) GetItems() []int32 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *LotteryHistoryData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type C2SLotteryHistoryList struct {
	LotteryId int32 `protobuf:"varint,1,opt,name=lottery_id,json=lotteryId,proto3" json:"lottery_id,omitempty"`
}

func (m *C2SLotteryHistoryList) Reset()         { *m = C2SLotteryHistoryList{} }
func (m *C2SLotteryHistoryList) String() string { return proto.CompactTextString(m) }
func (*C2SLotteryHistoryList) ProtoMessage()    {}
func (*C2SLotteryHistoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{57}
}
func (m *C2SLotteryHistoryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SLotteryHistoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SLotteryHistoryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SLotteryHistoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SLotteryHistoryList.Merge(m, src)
}
func (m *C2SLotteryHistoryList) XXX_Size() int {
	return m.Size()
}
func (m *C2SLotteryHistoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SLotteryHistoryList.DiscardUnknown(m)
}

var xxx_messageInfo_C2SLotteryHistoryList proto.InternalMessageInfo

func (m *C2SLotteryHistoryList) GetLotteryId() int32 {
	if m != nil {
		return m.LotteryId
	}
	return 0
}

type S2CLotteryHistoryList struct {
	Datas []*LotteryHistoryData `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *S2CLotteryHistoryList) Reset()         { *m = S2CLotteryHistoryList{} }
func (m *S2CLotteryHistoryList) String() string { return proto.CompactTextString(m) }
func (*S2CLotteryHistoryList) ProtoMessage()    {}
func (*S2CLotteryHistoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{58}
}
func (m *S2CLotteryHistoryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CLotteryHistoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CLotteryHistoryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CLotteryHistoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CLotteryHistoryList.Merge(m, src)
}
func (m *S2CLotteryHistoryList) XXX_Size() int {
	return m.Size()
}
func (m *S2CLotteryHistoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CLotteryHistoryList.DiscardUnknown(m)
}

var xxx_messageInfo_S2CLotteryHistoryList proto.InternalMessageInfo

func (m *S2CLotteryHistoryList) GetDatas() []*LotteryHistoryData {
	if m != nil {
		return m.Datas
	}
	return nil
}

// 兑换抽奖
type C2SLotteryRedemption struct {
	ItemId  int64 `protobuf:"varint,1,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	Num     int32 `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
	UseItem int64 `protobuf:"varint,3,opt,name=UseItem,proto3" json:"UseItem,omitempty"`
}

func (m *C2SLotteryRedemption) Reset()         { *m = C2SLotteryRedemption{} }
func (m *C2SLotteryRedemption) String() string { return proto.CompactTextString(m) }
func (*C2SLotteryRedemption) ProtoMessage()    {}
func (*C2SLotteryRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{59}
}
func (m *C2SLotteryRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SLotteryRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SLotteryRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SLotteryRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SLotteryRedemption.Merge(m, src)
}
func (m *C2SLotteryRedemption) XXX_Size() int {
	return m.Size()
}
func (m *C2SLotteryRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SLotteryRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_C2SLotteryRedemption proto.InternalMessageInfo

func (m *C2SLotteryRedemption) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *C2SLotteryRedemption) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *C2SLotteryRedemption) GetUseItem() int64 {
	if m != nil {
		return m.UseItem
	}
	return 0
}

type S2CLotteryRedemption struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CLotteryRedemption) Reset()         { *m = S2CLotteryRedemption{} }
func (m *S2CLotteryRedemption) String() string { return proto.CompactTextString(m) }
func (*S2CLotteryRedemption) ProtoMessage()    {}
func (*S2CLotteryRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{60}
}
func (m *S2CLotteryRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CLotteryRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CLotteryRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CLotteryRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CLotteryRedemption.Merge(m, src)
}
func (m *S2CLotteryRedemption) XXX_Size() int {
	return m.Size()
}
func (m *S2CLotteryRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CLotteryRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_S2CLotteryRedemption proto.InternalMessageInfo

func (m *S2CLotteryRedemption) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 抽奖操作
type C2SLottery struct {
	LotteryId int32 `protobuf:"varint,1,opt,name=lottery_id,json=lotteryId,proto3" json:"lottery_id,omitempty"`
	Num       int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *C2SLottery) Reset()         { *m = C2SLottery{} }
func (m *C2SLottery) String() string { return proto.CompactTextString(m) }
func (*C2SLottery) ProtoMessage()    {}
func (*C2SLottery) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{61}
}
func (m *C2SLottery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SLottery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SLottery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SLottery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SLottery.Merge(m, src)
}
func (m *C2SLottery) XXX_Size() int {
	return m.Size()
}
func (m *C2SLottery) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SLottery.DiscardUnknown(m)
}

var xxx_messageInfo_C2SLottery proto.InternalMessageInfo

func (m *C2SLottery) GetLotteryId() int32 {
	if m != nil {
		return m.LotteryId
	}
	return 0
}

func (m *C2SLottery) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type S2CLottery struct {
	Code             ErrorCode    `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	LotteryInfo      *LotteryInfo `protobuf:"bytes,2,opt,name=lottery_info,json=lotteryInfo,proto3" json:"lottery_info,omitempty"`
	Item             []*ItemInfo  `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`
	MagicalGuarantee bool         `protobuf:"varint,4,opt,name=magicalGuarantee,proto3" json:"magicalGuarantee,omitempty"`
}

func (m *S2CLottery) Reset()         { *m = S2CLottery{} }
func (m *S2CLottery) String() string { return proto.CompactTextString(m) }
func (*S2CLottery) ProtoMessage()    {}
func (*S2CLottery) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{62}
}
func (m *S2CLottery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CLottery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CLottery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CLottery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CLottery.Merge(m, src)
}
func (m *S2CLottery) XXX_Size() int {
	return m.Size()
}
func (m *S2CLottery) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CLottery.DiscardUnknown(m)
}

var xxx_messageInfo_S2CLottery proto.InternalMessageInfo

func (m *S2CLottery) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CLottery) GetLotteryInfo() *LotteryInfo {
	if m != nil {
		return m.LotteryInfo
	}
	return nil
}

func (m *S2CLottery) GetItem() []*ItemInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *S2CLottery) GetMagicalGuarantee() bool {
	if m != nil {
		return m.MagicalGuarantee
	}
	return false
}

// 推送物品数据
type S2CItem struct {
	Item []*ItemInfo `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
}

func (m *S2CItem) Reset()         { *m = S2CItem{} }
func (m *S2CItem) String() string { return proto.CompactTextString(m) }
func (*S2CItem) ProtoMessage()    {}
func (*S2CItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{63}
}
func (m *S2CItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CItem.Merge(m, src)
}
func (m *S2CItem) XXX_Size() int {
	return m.Size()
}
func (m *S2CItem) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CItem.DiscardUnknown(m)
}

var xxx_messageInfo_S2CItem proto.InternalMessageInfo

func (m *S2CItem) GetItem() []*ItemInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

// 查询所有物品信息
type C2SItemList struct {
}

func (m *C2SItemList) Reset()         { *m = C2SItemList{} }
func (m *C2SItemList) String() string { return proto.CompactTextString(m) }
func (*C2SItemList) ProtoMessage()    {}
func (*C2SItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{64}
}
func (m *C2SItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SItemList.Merge(m, src)
}
func (m *C2SItemList) XXX_Size() int {
	return m.Size()
}
func (m *C2SItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SItemList.DiscardUnknown(m)
}

var xxx_messageInfo_C2SItemList proto.InternalMessageInfo

type S2CItemList struct {
	Code     ErrorCode   `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	ItemList []*ItemInfo `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (m *S2CItemList) Reset()         { *m = S2CItemList{} }
func (m *S2CItemList) String() string { return proto.CompactTextString(m) }
func (*S2CItemList) ProtoMessage()    {}
func (*S2CItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{65}
}
func (m *S2CItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CItemList.Merge(m, src)
}
func (m *S2CItemList) XXX_Size() int {
	return m.Size()
}
func (m *S2CItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CItemList.DiscardUnknown(m)
}

var xxx_messageInfo_S2CItemList proto.InternalMessageInfo

func (m *S2CItemList) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CItemList) GetItemList() []*ItemInfo {
	if m != nil {
		return m.ItemList
	}
	return nil
}

type Spaceship struct {
	ShipId   int32   `protobuf:"varint,1,opt,name=ship_id,json=shipId,proto3" json:"ship_id,omitempty"`
	CardList []int32 `protobuf:"varint,2,rep,packed,name=cardList,proto3" json:"cardList,omitempty"`
}

func (m *Spaceship) Reset()         { *m = Spaceship{} }
func (m *Spaceship) String() string { return proto.CompactTextString(m) }
func (*Spaceship) ProtoMessage()    {}
func (*Spaceship) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{66}
}
func (m *Spaceship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Spaceship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Spaceship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Spaceship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spaceship.Merge(m, src)
}
func (m *Spaceship) XXX_Size() int {
	return m.Size()
}
func (m *Spaceship) XXX_DiscardUnknown() {
	xxx_messageInfo_Spaceship.DiscardUnknown(m)
}

var xxx_messageInfo_Spaceship proto.InternalMessageInfo

func (m *Spaceship) GetShipId() int32 {
	if m != nil {
		return m.ShipId
	}
	return 0
}

func (m *Spaceship) GetCardList() []int32 {
	if m != nil {
		return m.CardList
	}
	return nil
}

// 查询所有的飞船信息
type C2SSpaceshipList struct {
}

func (m *C2SSpaceshipList) Reset()         { *m = C2SSpaceshipList{} }
func (m *C2SSpaceshipList) String() string { return proto.CompactTextString(m) }
func (*C2SSpaceshipList) ProtoMessage()    {}
func (*C2SSpaceshipList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{67}
}
func (m *C2SSpaceshipList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSpaceshipList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSpaceshipList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSpaceshipList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSpaceshipList.Merge(m, src)
}
func (m *C2SSpaceshipList) XXX_Size() int {
	return m.Size()
}
func (m *C2SSpaceshipList) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSpaceshipList.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSpaceshipList proto.InternalMessageInfo

type S2CSpaceshipList struct {
	Code          ErrorCode    `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	SpaceshipList []*Spaceship `protobuf:"bytes,2,rep,name=spaceship_list,json=spaceshipList,proto3" json:"spaceship_list,omitempty"`
}

func (m *S2CSpaceshipList) Reset()         { *m = S2CSpaceshipList{} }
func (m *S2CSpaceshipList) String() string { return proto.CompactTextString(m) }
func (*S2CSpaceshipList) ProtoMessage()    {}
func (*S2CSpaceshipList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{68}
}
func (m *S2CSpaceshipList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSpaceshipList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSpaceshipList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSpaceshipList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSpaceshipList.Merge(m, src)
}
func (m *S2CSpaceshipList) XXX_Size() int {
	return m.Size()
}
func (m *S2CSpaceshipList) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSpaceshipList.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSpaceshipList proto.InternalMessageInfo

func (m *S2CSpaceshipList) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CSpaceshipList) GetSpaceshipList() []*Spaceship {
	if m != nil {
		return m.SpaceshipList
	}
	return nil
}

// 更新飞船信息
type C2SUpSpaceship struct {
	SpaceshipInfo *Spaceship `protobuf:"bytes,1,opt,name=spaceshipInfo,proto3" json:"spaceshipInfo,omitempty"`
}

func (m *C2SUpSpaceship) Reset()         { *m = C2SUpSpaceship{} }
func (m *C2SUpSpaceship) String() string { return proto.CompactTextString(m) }
func (*C2SUpSpaceship) ProtoMessage()    {}
func (*C2SUpSpaceship) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{69}
}
func (m *C2SUpSpaceship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SUpSpaceship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SUpSpaceship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SUpSpaceship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SUpSpaceship.Merge(m, src)
}
func (m *C2SUpSpaceship) XXX_Size() int {
	return m.Size()
}
func (m *C2SUpSpaceship) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SUpSpaceship.DiscardUnknown(m)
}

var xxx_messageInfo_C2SUpSpaceship proto.InternalMessageInfo

func (m *C2SUpSpaceship) GetSpaceshipInfo() *Spaceship {
	if m != nil {
		return m.SpaceshipInfo
	}
	return nil
}

type S2CUpSpaceship struct {
	Code          ErrorCode  `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	SpaceshipInfo *Spaceship `protobuf:"bytes,2,opt,name=spaceshipInfo,proto3" json:"spaceshipInfo,omitempty"`
}

func (m *S2CUpSpaceship) Reset()         { *m = S2CUpSpaceship{} }
func (m *S2CUpSpaceship) String() string { return proto.CompactTextString(m) }
func (*S2CUpSpaceship) ProtoMessage()    {}
func (*S2CUpSpaceship) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{70}
}
func (m *S2CUpSpaceship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CUpSpaceship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CUpSpaceship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CUpSpaceship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CUpSpaceship.Merge(m, src)
}
func (m *S2CUpSpaceship) XXX_Size() int {
	return m.Size()
}
func (m *S2CUpSpaceship) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CUpSpaceship.DiscardUnknown(m)
}

var xxx_messageInfo_S2CUpSpaceship proto.InternalMessageInfo

func (m *S2CUpSpaceship) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CUpSpaceship) GetSpaceshipInfo() *Spaceship {
	if m != nil {
		return m.SpaceshipInfo
	}
	return nil
}

type ExploreItem struct {
	Num      int32       `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ItemList []*ItemInfo `protobuf:"bytes,2,rep,name=itemList,proto3" json:"itemList,omitempty"`
}

func (m *ExploreItem) Reset()         { *m = ExploreItem{} }
func (m *ExploreItem) String() string { return proto.CompactTextString(m) }
func (*ExploreItem) ProtoMessage()    {}
func (*ExploreItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{71}
}
func (m *ExploreItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExploreItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExploreItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExploreItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExploreItem.Merge(m, src)
}
func (m *ExploreItem) XXX_Size() int {
	return m.Size()
}
func (m *ExploreItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ExploreItem.DiscardUnknown(m)
}

var xxx_messageInfo_ExploreItem proto.InternalMessageInfo

func (m *ExploreItem) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ExploreItem) GetItemList() []*ItemInfo {
	if m != nil {
		return m.ItemList
	}
	return nil
}

type Explore struct {
	ShipId          int32          `protobuf:"varint,1,opt,name=ship_id,json=shipId,proto3" json:"ship_id,omitempty"`
	GalaxyId        int32          `protobuf:"varint,2,opt,name=galaxy_id,json=galaxyId,proto3" json:"galaxy_id,omitempty"`
	StartTime       int64          `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int64          `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Fuel            int32          `protobuf:"varint,5,opt,name=fuel,proto3" json:"fuel,omitempty"`
	FuelTime        int64          `protobuf:"varint,6,opt,name=fuel_time,json=fuelTime,proto3" json:"fuel_time,omitempty"`
	ExploreItemList []*ExploreItem `protobuf:"bytes,7,rep,name=exploreItemList,proto3" json:"exploreItemList,omitempty"`
}

func (m *Explore) Reset()         { *m = Explore{} }
func (m *Explore) String() string { return proto.CompactTextString(m) }
func (*Explore) ProtoMessage()    {}
func (*Explore) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{72}
}
func (m *Explore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Explore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Explore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Explore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Explore.Merge(m, src)
}
func (m *Explore) XXX_Size() int {
	return m.Size()
}
func (m *Explore) XXX_DiscardUnknown() {
	xxx_messageInfo_Explore.DiscardUnknown(m)
}

var xxx_messageInfo_Explore proto.InternalMessageInfo

func (m *Explore) GetShipId() int32 {
	if m != nil {
		return m.ShipId
	}
	return 0
}

func (m *Explore) GetGalaxyId() int32 {
	if m != nil {
		return m.GalaxyId
	}
	return 0
}

func (m *Explore) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Explore) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Explore) GetFuel() int32 {
	if m != nil {
		return m.Fuel
	}
	return 0
}

func (m *Explore) GetFuelTime() int64 {
	if m != nil {
		return m.FuelTime
	}
	return 0
}

func (m *Explore) GetExploreItemList() []*ExploreItem {
	if m != nil {
		return m.ExploreItemList
	}
	return nil
}

// 查询探索数据
type C2SQueryExplore struct {
}

func (m *C2SQueryExplore) Reset()         { *m = C2SQueryExplore{} }
func (m *C2SQueryExplore) String() string { return proto.CompactTextString(m) }
func (*C2SQueryExplore) ProtoMessage()    {}
func (*C2SQueryExplore) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{73}
}
func (m *C2SQueryExplore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SQueryExplore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SQueryExplore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SQueryExplore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SQueryExplore.Merge(m, src)
}
func (m *C2SQueryExplore) XXX_Size() int {
	return m.Size()
}
func (m *C2SQueryExplore) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SQueryExplore.DiscardUnknown(m)
}

var xxx_messageInfo_C2SQueryExplore proto.InternalMessageInfo

type S2CQueryExplore struct {
	Explore *Explore `protobuf:"bytes,1,opt,name=explore,proto3" json:"explore,omitempty"`
}

func (m *S2CQueryExplore) Reset()         { *m = S2CQueryExplore{} }
func (m *S2CQueryExplore) String() string { return proto.CompactTextString(m) }
func (*S2CQueryExplore) ProtoMessage()    {}
func (*S2CQueryExplore) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{74}
}
func (m *S2CQueryExplore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CQueryExplore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CQueryExplore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CQueryExplore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CQueryExplore.Merge(m, src)
}
func (m *S2CQueryExplore) XXX_Size() int {
	return m.Size()
}
func (m *S2CQueryExplore) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CQueryExplore.DiscardUnknown(m)
}

var xxx_messageInfo_S2CQueryExplore proto.InternalMessageInfo

func (m *S2CQueryExplore) GetExplore() *Explore {
	if m != nil {
		return m.Explore
	}
	return nil
}

// 开始探索
type C2SStartExplore struct {
	ShipId   int32 `protobuf:"varint,1,opt,name=ship_id,json=shipId,proto3" json:"ship_id,omitempty"`
	GalaxyId int32 `protobuf:"varint,2,opt,name=galaxy_id,json=galaxyId,proto3" json:"galaxy_id,omitempty"`
	Time     int32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *C2SStartExplore) Reset()         { *m = C2SStartExplore{} }
func (m *C2SStartExplore) String() string { return proto.CompactTextString(m) }
func (*C2SStartExplore) ProtoMessage()    {}
func (*C2SStartExplore) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{75}
}
func (m *C2SStartExplore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SStartExplore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SStartExplore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SStartExplore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SStartExplore.Merge(m, src)
}
func (m *C2SStartExplore) XXX_Size() int {
	return m.Size()
}
func (m *C2SStartExplore) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SStartExplore.DiscardUnknown(m)
}

var xxx_messageInfo_C2SStartExplore proto.InternalMessageInfo

func (m *C2SStartExplore) GetShipId() int32 {
	if m != nil {
		return m.ShipId
	}
	return 0
}

func (m *C2SStartExplore) GetGalaxyId() int32 {
	if m != nil {
		return m.GalaxyId
	}
	return 0
}

func (m *C2SStartExplore) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type S2CStartExplore struct {
	Code    ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Explore *Explore  `protobuf:"bytes,2,opt,name=explore,proto3" json:"explore,omitempty"`
}

func (m *S2CStartExplore) Reset()         { *m = S2CStartExplore{} }
func (m *S2CStartExplore) String() string { return proto.CompactTextString(m) }
func (*S2CStartExplore) ProtoMessage()    {}
func (*S2CStartExplore) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{76}
}
func (m *S2CStartExplore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CStartExplore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CStartExplore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CStartExplore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CStartExplore.Merge(m, src)
}
func (m *S2CStartExplore) XXX_Size() int {
	return m.Size()
}
func (m *S2CStartExplore) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CStartExplore.DiscardUnknown(m)
}

var xxx_messageInfo_S2CStartExplore proto.InternalMessageInfo

func (m *S2CStartExplore) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CStartExplore) GetExplore() *Explore {
	if m != nil {
		return m.Explore
	}
	return nil
}

// 结束探索  领取奖励
type C2SEndExplore struct {
}

func (m *C2SEndExplore) Reset()         { *m = C2SEndExplore{} }
func (m *C2SEndExplore) String() string { return proto.CompactTextString(m) }
func (*C2SEndExplore) ProtoMessage()    {}
func (*C2SEndExplore) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{77}
}
func (m *C2SEndExplore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SEndExplore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SEndExplore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SEndExplore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SEndExplore.Merge(m, src)
}
func (m *C2SEndExplore) XXX_Size() int {
	return m.Size()
}
func (m *C2SEndExplore) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SEndExplore.DiscardUnknown(m)
}

var xxx_messageInfo_C2SEndExplore proto.InternalMessageInfo

type S2CEndExplore struct {
	Code    ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Explore *Explore  `protobuf:"bytes,2,opt,name=explore,proto3" json:"explore,omitempty"`
}

func (m *S2CEndExplore) Reset()         { *m = S2CEndExplore{} }
func (m *S2CEndExplore) String() string { return proto.CompactTextString(m) }
func (*S2CEndExplore) ProtoMessage()    {}
func (*S2CEndExplore) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{78}
}
func (m *S2CEndExplore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CEndExplore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CEndExplore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CEndExplore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CEndExplore.Merge(m, src)
}
func (m *S2CEndExplore) XXX_Size() int {
	return m.Size()
}
func (m *S2CEndExplore) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CEndExplore.DiscardUnknown(m)
}

var xxx_messageInfo_S2CEndExplore proto.InternalMessageInfo

func (m *S2CEndExplore) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CEndExplore) GetExplore() *Explore {
	if m != nil {
		return m.Explore
	}
	return nil
}

// 请求服务器当前时间的操作
type C2SGetTime struct {
}

func (m *C2SGetTime) Reset()         { *m = C2SGetTime{} }
func (m *C2SGetTime) String() string { return proto.CompactTextString(m) }
func (*C2SGetTime) ProtoMessage()    {}
func (*C2SGetTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{79}
}
func (m *C2SGetTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SGetTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SGetTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SGetTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SGetTime.Merge(m, src)
}
func (m *C2SGetTime) XXX_Size() int {
	return m.Size()
}
func (m *C2SGetTime) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SGetTime.DiscardUnknown(m)
}

var xxx_messageInfo_C2SGetTime proto.InternalMessageInfo

type S2CGetTime struct {
	Now int64 `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`
}

func (m *S2CGetTime) Reset()         { *m = S2CGetTime{} }
func (m *S2CGetTime) String() string { return proto.CompactTextString(m) }
func (*S2CGetTime) ProtoMessage()    {}
func (*S2CGetTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{80}
}
func (m *S2CGetTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGetTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGetTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGetTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGetTime.Merge(m, src)
}
func (m *S2CGetTime) XXX_Size() int {
	return m.Size()
}
func (m *S2CGetTime) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGetTime.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGetTime proto.InternalMessageInfo

func (m *S2CGetTime) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

type Guide struct {
	GuideId int32 `protobuf:"varint,1,opt,name=guide_id,json=guideId,proto3" json:"guide_id,omitempty"`
	SubId   int32 `protobuf:"varint,2,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
}

func (m *Guide) Reset()         { *m = Guide{} }
func (m *Guide) String() string { return proto.CompactTextString(m) }
func (*Guide) ProtoMessage()    {}
func (*Guide) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{81}
}
func (m *Guide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Guide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Guide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guide.Merge(m, src)
}
func (m *Guide) XXX_Size() int {
	return m.Size()
}
func (m *Guide) XXX_DiscardUnknown() {
	xxx_messageInfo_Guide.DiscardUnknown(m)
}

var xxx_messageInfo_Guide proto.InternalMessageInfo

func (m *Guide) GetGuideId() int32 {
	if m != nil {
		return m.GuideId
	}
	return 0
}

func (m *Guide) GetSubId() int32 {
	if m != nil {
		return m.SubId
	}
	return 0
}

// 新手引导数据修改
type C2SUpdateGuide struct {
	Guide *Guide `protobuf:"bytes,1,opt,name=guide,proto3" json:"guide,omitempty"`
}

func (m *C2SUpdateGuide) Reset()         { *m = C2SUpdateGuide{} }
func (m *C2SUpdateGuide) String() string { return proto.CompactTextString(m) }
func (*C2SUpdateGuide) ProtoMessage()    {}
func (*C2SUpdateGuide) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{82}
}
func (m *C2SUpdateGuide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SUpdateGuide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SUpdateGuide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SUpdateGuide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SUpdateGuide.Merge(m, src)
}
func (m *C2SUpdateGuide) XXX_Size() int {
	return m.Size()
}
func (m *C2SUpdateGuide) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SUpdateGuide.DiscardUnknown(m)
}

var xxx_messageInfo_C2SUpdateGuide proto.InternalMessageInfo

func (m *C2SUpdateGuide) GetGuide() *Guide {
	if m != nil {
		return m.Guide
	}
	return nil
}

type S2CUpdateGuide struct {
	Code  ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Guide *Guide    `protobuf:"bytes,2,opt,name=guide,proto3" json:"guide,omitempty"`
}

func (m *S2CUpdateGuide) Reset()         { *m = S2CUpdateGuide{} }
func (m *S2CUpdateGuide) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateGuide) ProtoMessage()    {}
func (*S2CUpdateGuide) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{83}
}
func (m *S2CUpdateGuide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CUpdateGuide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CUpdateGuide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CUpdateGuide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CUpdateGuide.Merge(m, src)
}
func (m *S2CUpdateGuide) XXX_Size() int {
	return m.Size()
}
func (m *S2CUpdateGuide) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CUpdateGuide.DiscardUnknown(m)
}

var xxx_messageInfo_S2CUpdateGuide proto.InternalMessageInfo

func (m *S2CUpdateGuide) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CUpdateGuide) GetGuide() *Guide {
	if m != nil {
		return m.Guide
	}
	return nil
}

type TaskInfo struct {
	TaskId   int32  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Val      int32  `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
	UniqueId uint64 `protobuf:"varint,3,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *TaskInfo) Reset()         { *m = TaskInfo{} }
func (m *TaskInfo) String() string { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()    {}
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{84}
}
func (m *TaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInfo.Merge(m, src)
}
func (m *TaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInfo proto.InternalMessageInfo

func (m *TaskInfo) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskInfo) GetVal() int32 {
	if m != nil {
		return m.Val
	}
	return 0
}

func (m *TaskInfo) GetUniqueId() uint64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

type C2STaskList struct {
}

func (m *C2STaskList) Reset()         { *m = C2STaskList{} }
func (m *C2STaskList) String() string { return proto.CompactTextString(m) }
func (*C2STaskList) ProtoMessage()    {}
func (*C2STaskList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{85}
}
func (m *C2STaskList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2STaskList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2STaskList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2STaskList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2STaskList.Merge(m, src)
}
func (m *C2STaskList) XXX_Size() int {
	return m.Size()
}
func (m *C2STaskList) XXX_DiscardUnknown() {
	xxx_messageInfo_C2STaskList.DiscardUnknown(m)
}

var xxx_messageInfo_C2STaskList proto.InternalMessageInfo

type S2CTaskList struct {
	Code          ErrorCode   `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	TaskInfoLists []*TaskInfo `protobuf:"bytes,2,rep,name=task_info_lists,json=taskInfoLists,proto3" json:"task_info_lists,omitempty"`
	RefreshTime   int64       `protobuf:"varint,3,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	RefreshCounts int64       `protobuf:"varint,4,opt,name=refresh_counts,json=refreshCounts,proto3" json:"refresh_counts,omitempty"`
}

func (m *S2CTaskList) Reset()         { *m = S2CTaskList{} }
func (m *S2CTaskList) String() string { return proto.CompactTextString(m) }
func (*S2CTaskList) ProtoMessage()    {}
func (*S2CTaskList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{86}
}
func (m *S2CTaskList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CTaskList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CTaskList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CTaskList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CTaskList.Merge(m, src)
}
func (m *S2CTaskList) XXX_Size() int {
	return m.Size()
}
func (m *S2CTaskList) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CTaskList.DiscardUnknown(m)
}

var xxx_messageInfo_S2CTaskList proto.InternalMessageInfo

func (m *S2CTaskList) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CTaskList) GetTaskInfoLists() []*TaskInfo {
	if m != nil {
		return m.TaskInfoLists
	}
	return nil
}

func (m *S2CTaskList) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *S2CTaskList) GetRefreshCounts() int64 {
	if m != nil {
		return m.RefreshCounts
	}
	return 0
}

type TaskInfoNtf struct {
	UpdateTaskInfoLists []*TaskInfo `protobuf:"bytes,1,rep,name=update_task_info_lists,json=updateTaskInfoLists,proto3" json:"update_task_info_lists,omitempty"`
	DelTaskInfoLists    []*TaskInfo `protobuf:"bytes,2,rep,name=del_task_info_lists,json=delTaskInfoLists,proto3" json:"del_task_info_lists,omitempty"`
	RefreshTime         int64       `protobuf:"varint,3,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
}

func (m *TaskInfoNtf) Reset()         { *m = TaskInfoNtf{} }
func (m *TaskInfoNtf) String() string { return proto.CompactTextString(m) }
func (*TaskInfoNtf) ProtoMessage()    {}
func (*TaskInfoNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{87}
}
func (m *TaskInfoNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInfoNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInfoNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskInfoNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInfoNtf.Merge(m, src)
}
func (m *TaskInfoNtf) XXX_Size() int {
	return m.Size()
}
func (m *TaskInfoNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInfoNtf.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInfoNtf proto.InternalMessageInfo

func (m *TaskInfoNtf) GetUpdateTaskInfoLists() []*TaskInfo {
	if m != nil {
		return m.UpdateTaskInfoLists
	}
	return nil
}

func (m *TaskInfoNtf) GetDelTaskInfoLists() []*TaskInfo {
	if m != nil {
		return m.DelTaskInfoLists
	}
	return nil
}

func (m *TaskInfoNtf) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

// 领取任务奖励
type C2SGetTaskReward struct {
	UniqueId uint64 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *C2SGetTaskReward) Reset()         { *m = C2SGetTaskReward{} }
func (m *C2SGetTaskReward) String() string { return proto.CompactTextString(m) }
func (*C2SGetTaskReward) ProtoMessage()    {}
func (*C2SGetTaskReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{88}
}
func (m *C2SGetTaskReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SGetTaskReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SGetTaskReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SGetTaskReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SGetTaskReward.Merge(m, src)
}
func (m *C2SGetTaskReward) XXX_Size() int {
	return m.Size()
}
func (m *C2SGetTaskReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SGetTaskReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2SGetTaskReward proto.InternalMessageInfo

func (m *C2SGetTaskReward) GetUniqueId() uint64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

type S2CGetTaskReward struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CGetTaskReward) Reset()         { *m = S2CGetTaskReward{} }
func (m *S2CGetTaskReward) String() string { return proto.CompactTextString(m) }
func (*S2CGetTaskReward) ProtoMessage()    {}
func (*S2CGetTaskReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{89}
}
func (m *S2CGetTaskReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGetTaskReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGetTaskReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGetTaskReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGetTaskReward.Merge(m, src)
}
func (m *S2CGetTaskReward) XXX_Size() int {
	return m.Size()
}
func (m *S2CGetTaskReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGetTaskReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGetTaskReward proto.InternalMessageInfo

func (m *S2CGetTaskReward) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 购买每日任务
type C2SBuyTask struct {
}

func (m *C2SBuyTask) Reset()         { *m = C2SBuyTask{} }
func (m *C2SBuyTask) String() string { return proto.CompactTextString(m) }
func (*C2SBuyTask) ProtoMessage()    {}
func (*C2SBuyTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{90}
}
func (m *C2SBuyTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SBuyTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SBuyTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SBuyTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SBuyTask.Merge(m, src)
}
func (m *C2SBuyTask) XXX_Size() int {
	return m.Size()
}
func (m *C2SBuyTask) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SBuyTask.DiscardUnknown(m)
}

var xxx_messageInfo_C2SBuyTask proto.InternalMessageInfo

type S2CBuyTask struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CBuyTask) Reset()         { *m = S2CBuyTask{} }
func (m *S2CBuyTask) String() string { return proto.CompactTextString(m) }
func (*S2CBuyTask) ProtoMessage()    {}
func (*S2CBuyTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{91}
}
func (m *S2CBuyTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CBuyTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CBuyTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CBuyTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CBuyTask.Merge(m, src)
}
func (m *S2CBuyTask) XXX_Size() int {
	return m.Size()
}
func (m *S2CBuyTask) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CBuyTask.DiscardUnknown(m)
}

var xxx_messageInfo_S2CBuyTask proto.InternalMessageInfo

func (m *S2CBuyTask) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 获取每周宝箱信息
type WeekTaskInfo struct {
	TaskId      int32   `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Stage       []int32 `protobuf:"varint,2,rep,packed,name=stage,proto3" json:"stage,omitempty"`
	Val         int32   `protobuf:"varint,3,opt,name=val,proto3" json:"val,omitempty"`
	RefreshTime int64   `protobuf:"varint,4,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
}

func (m *WeekTaskInfo) Reset()         { *m = WeekTaskInfo{} }
func (m *WeekTaskInfo) String() string { return proto.CompactTextString(m) }
func (*WeekTaskInfo) ProtoMessage()    {}
func (*WeekTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{92}
}
func (m *WeekTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeekTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeekTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeekTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeekTaskInfo.Merge(m, src)
}
func (m *WeekTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *WeekTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WeekTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WeekTaskInfo proto.InternalMessageInfo

func (m *WeekTaskInfo) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *WeekTaskInfo) GetStage() []int32 {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (m *WeekTaskInfo) GetVal() int32 {
	if m != nil {
		return m.Val
	}
	return 0
}

func (m *WeekTaskInfo) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

type C2SWeekTaskInfo struct {
}

func (m *C2SWeekTaskInfo) Reset()         { *m = C2SWeekTaskInfo{} }
func (m *C2SWeekTaskInfo) String() string { return proto.CompactTextString(m) }
func (*C2SWeekTaskInfo) ProtoMessage()    {}
func (*C2SWeekTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{93}
}
func (m *C2SWeekTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SWeekTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SWeekTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SWeekTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SWeekTaskInfo.Merge(m, src)
}
func (m *C2SWeekTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2SWeekTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SWeekTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2SWeekTaskInfo proto.InternalMessageInfo

type S2CWeekTaskInfo struct {
	Code     ErrorCode     `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	TaskInfo *WeekTaskInfo `protobuf:"bytes,2,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (m *S2CWeekTaskInfo) Reset()         { *m = S2CWeekTaskInfo{} }
func (m *S2CWeekTaskInfo) String() string { return proto.CompactTextString(m) }
func (*S2CWeekTaskInfo) ProtoMessage()    {}
func (*S2CWeekTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{94}
}
func (m *S2CWeekTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CWeekTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CWeekTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CWeekTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CWeekTaskInfo.Merge(m, src)
}
func (m *S2CWeekTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2CWeekTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CWeekTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2CWeekTaskInfo proto.InternalMessageInfo

func (m *S2CWeekTaskInfo) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CWeekTaskInfo) GetTaskInfo() *WeekTaskInfo {
	if m != nil {
		return m.TaskInfo
	}
	return nil
}

type WeekTaskInfoNtf struct {
	TaskInfo *WeekTaskInfo `protobuf:"bytes,2,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (m *WeekTaskInfoNtf) Reset()         { *m = WeekTaskInfoNtf{} }
func (m *WeekTaskInfoNtf) String() string { return proto.CompactTextString(m) }
func (*WeekTaskInfoNtf) ProtoMessage()    {}
func (*WeekTaskInfoNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{95}
}
func (m *WeekTaskInfoNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeekTaskInfoNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeekTaskInfoNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeekTaskInfoNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeekTaskInfoNtf.Merge(m, src)
}
func (m *WeekTaskInfoNtf) XXX_Size() int {
	return m.Size()
}
func (m *WeekTaskInfoNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_WeekTaskInfoNtf.DiscardUnknown(m)
}

var xxx_messageInfo_WeekTaskInfoNtf proto.InternalMessageInfo

func (m *WeekTaskInfoNtf) GetTaskInfo() *WeekTaskInfo {
	if m != nil {
		return m.TaskInfo
	}
	return nil
}

type C2SGetWeekTaskReward struct {
	StageId int32 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (m *C2SGetWeekTaskReward) Reset()         { *m = C2SGetWeekTaskReward{} }
func (m *C2SGetWeekTaskReward) String() string { return proto.CompactTextString(m) }
func (*C2SGetWeekTaskReward) ProtoMessage()    {}
func (*C2SGetWeekTaskReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{96}
}
func (m *C2SGetWeekTaskReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SGetWeekTaskReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SGetWeekTaskReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SGetWeekTaskReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SGetWeekTaskReward.Merge(m, src)
}
func (m *C2SGetWeekTaskReward) XXX_Size() int {
	return m.Size()
}
func (m *C2SGetWeekTaskReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SGetWeekTaskReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2SGetWeekTaskReward proto.InternalMessageInfo

func (m *C2SGetWeekTaskReward) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type S2CGetWeekTaskReward struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CGetWeekTaskReward) Reset()         { *m = S2CGetWeekTaskReward{} }
func (m *S2CGetWeekTaskReward) String() string { return proto.CompactTextString(m) }
func (*S2CGetWeekTaskReward) ProtoMessage()    {}
func (*S2CGetWeekTaskReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{97}
}
func (m *S2CGetWeekTaskReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGetWeekTaskReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGetWeekTaskReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGetWeekTaskReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGetWeekTaskReward.Merge(m, src)
}
func (m *S2CGetWeekTaskReward) XXX_Size() int {
	return m.Size()
}
func (m *S2CGetWeekTaskReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGetWeekTaskReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGetWeekTaskReward proto.InternalMessageInfo

func (m *S2CGetWeekTaskReward) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 对局结束
type R2LMatchGameOver struct {
	MatchId   string                     `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	WinnerUid string                     `protobuf:"bytes,2,opt,name=winnerUid,proto3" json:"winnerUid,omitempty"`
	Uid       string                     `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Players   map[string]*RoomPlayerInfo `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *R2LMatchGameOver) Reset()         { *m = R2LMatchGameOver{} }
func (m *R2LMatchGameOver) String() string { return proto.CompactTextString(m) }
func (*R2LMatchGameOver) ProtoMessage()    {}
func (*R2LMatchGameOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{98}
}
func (m *R2LMatchGameOver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *R2LMatchGameOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_R2LMatchGameOver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *R2LMatchGameOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_R2LMatchGameOver.Merge(m, src)
}
func (m *R2LMatchGameOver) XXX_Size() int {
	return m.Size()
}
func (m *R2LMatchGameOver) XXX_DiscardUnknown() {
	xxx_messageInfo_R2LMatchGameOver.DiscardUnknown(m)
}

var xxx_messageInfo_R2LMatchGameOver proto.InternalMessageInfo

func (m *R2LMatchGameOver) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *R2LMatchGameOver) GetWinnerUid() string {
	if m != nil {
		return m.WinnerUid
	}
	return ""
}

func (m *R2LMatchGameOver) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *R2LMatchGameOver) GetPlayers() map[string]*RoomPlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

type L2RMatchGameOver struct {
	Reports []*BattlePlayerReport `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (m *L2RMatchGameOver) Reset()         { *m = L2RMatchGameOver{} }
func (m *L2RMatchGameOver) String() string { return proto.CompactTextString(m) }
func (*L2RMatchGameOver) ProtoMessage()    {}
func (*L2RMatchGameOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{99}
}
func (m *L2RMatchGameOver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L2RMatchGameOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L2RMatchGameOver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L2RMatchGameOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RMatchGameOver.Merge(m, src)
}
func (m *L2RMatchGameOver) XXX_Size() int {
	return m.Size()
}
func (m *L2RMatchGameOver) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RMatchGameOver.DiscardUnknown(m)
}

var xxx_messageInfo_L2RMatchGameOver proto.InternalMessageInfo

func (m *L2RMatchGameOver) GetReports() []*BattlePlayerReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

type R2LBattlePlayerReport struct {
	Uid     string                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Reports []*BattlePlayerReport `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (m *R2LBattlePlayerReport) Reset()         { *m = R2LBattlePlayerReport{} }
func (m *R2LBattlePlayerReport) String() string { return proto.CompactTextString(m) }
func (*R2LBattlePlayerReport) ProtoMessage()    {}
func (*R2LBattlePlayerReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{100}
}
func (m *R2LBattlePlayerReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *R2LBattlePlayerReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_R2LBattlePlayerReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *R2LBattlePlayerReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_R2LBattlePlayerReport.Merge(m, src)
}
func (m *R2LBattlePlayerReport) XXX_Size() int {
	return m.Size()
}
func (m *R2LBattlePlayerReport) XXX_DiscardUnknown() {
	xxx_messageInfo_R2LBattlePlayerReport.DiscardUnknown(m)
}

var xxx_messageInfo_R2LBattlePlayerReport proto.InternalMessageInfo

func (m *R2LBattlePlayerReport) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *R2LBattlePlayerReport) GetReports() []*BattlePlayerReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

type L2RBattlePlayerReport struct {
}

func (m *L2RBattlePlayerReport) Reset()         { *m = L2RBattlePlayerReport{} }
func (m *L2RBattlePlayerReport) String() string { return proto.CompactTextString(m) }
func (*L2RBattlePlayerReport) ProtoMessage()    {}
func (*L2RBattlePlayerReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{101}
}
func (m *L2RBattlePlayerReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L2RBattlePlayerReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L2RBattlePlayerReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L2RBattlePlayerReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RBattlePlayerReport.Merge(m, src)
}
func (m *L2RBattlePlayerReport) XXX_Size() int {
	return m.Size()
}
func (m *L2RBattlePlayerReport) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RBattlePlayerReport.DiscardUnknown(m)
}

var xxx_messageInfo_L2RBattlePlayerReport proto.InternalMessageInfo

type S2CMatchGameOver struct {
	ScoreInfo *ScoreInfo  `protobuf:"bytes,1,opt,name=scoreInfo,proto3" json:"scoreInfo,omitempty"`
	Win       int32       `protobuf:"varint,2,opt,name=win,proto3" json:"win,omitempty"`
	Rewards   []*ItemInfo `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *S2CMatchGameOver) Reset()         { *m = S2CMatchGameOver{} }
func (m *S2CMatchGameOver) String() string { return proto.CompactTextString(m) }
func (*S2CMatchGameOver) ProtoMessage()    {}
func (*S2CMatchGameOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{102}
}
func (m *S2CMatchGameOver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CMatchGameOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CMatchGameOver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CMatchGameOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CMatchGameOver.Merge(m, src)
}
func (m *S2CMatchGameOver) XXX_Size() int {
	return m.Size()
}
func (m *S2CMatchGameOver) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CMatchGameOver.DiscardUnknown(m)
}

var xxx_messageInfo_S2CMatchGameOver proto.InternalMessageInfo

func (m *S2CMatchGameOver) GetScoreInfo() *ScoreInfo {
	if m != nil {
		return m.ScoreInfo
	}
	return nil
}

func (m *S2CMatchGameOver) GetWin() int32 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *S2CMatchGameOver) GetRewards() []*ItemInfo {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 回合结束
type R2LGameRoundOver struct {
	MatchId string                      `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	RoundId int32                       `protobuf:"varint,2,opt,name=roundId,proto3" json:"roundId,omitempty"`
	Uid     string                      `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Players map[string]*RoundPlayerInfo `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *R2LGameRoundOver) Reset()         { *m = R2LGameRoundOver{} }
func (m *R2LGameRoundOver) String() string { return proto.CompactTextString(m) }
func (*R2LGameRoundOver) ProtoMessage()    {}
func (*R2LGameRoundOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{103}
}
func (m *R2LGameRoundOver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *R2LGameRoundOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_R2LGameRoundOver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *R2LGameRoundOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_R2LGameRoundOver.Merge(m, src)
}
func (m *R2LGameRoundOver) XXX_Size() int {
	return m.Size()
}
func (m *R2LGameRoundOver) XXX_DiscardUnknown() {
	xxx_messageInfo_R2LGameRoundOver.DiscardUnknown(m)
}

var xxx_messageInfo_R2LGameRoundOver proto.InternalMessageInfo

func (m *R2LGameRoundOver) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *R2LGameRoundOver) GetRoundId() int32 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *R2LGameRoundOver) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *R2LGameRoundOver) GetPlayers() map[string]*RoundPlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

type L2RGameRoundOver struct {
}

func (m *L2RGameRoundOver) Reset()         { *m = L2RGameRoundOver{} }
func (m *L2RGameRoundOver) String() string { return proto.CompactTextString(m) }
func (*L2RGameRoundOver) ProtoMessage()    {}
func (*L2RGameRoundOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{104}
}
func (m *L2RGameRoundOver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L2RGameRoundOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L2RGameRoundOver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L2RGameRoundOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2RGameRoundOver.Merge(m, src)
}
func (m *L2RGameRoundOver) XXX_Size() int {
	return m.Size()
}
func (m *L2RGameRoundOver) XXX_DiscardUnknown() {
	xxx_messageInfo_L2RGameRoundOver.DiscardUnknown(m)
}

var xxx_messageInfo_L2RGameRoundOver proto.InternalMessageInfo

// 在线状态同步
type Conn2LOnline struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *Conn2LOnline) Reset()         { *m = Conn2LOnline{} }
func (m *Conn2LOnline) String() string { return proto.CompactTextString(m) }
func (*Conn2LOnline) ProtoMessage()    {}
func (*Conn2LOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{105}
}
func (m *Conn2LOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Conn2LOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Conn2LOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Conn2LOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conn2LOnline.Merge(m, src)
}
func (m *Conn2LOnline) XXX_Size() int {
	return m.Size()
}
func (m *Conn2LOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_Conn2LOnline.DiscardUnknown(m)
}

var xxx_messageInfo_Conn2LOnline proto.InternalMessageInfo

func (m *Conn2LOnline) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// 赛季章节
type SeasonChapter struct {
	ChapterId          int32       `protobuf:"varint,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	TaskInfoLists      []*TaskInfo `protobuf:"bytes,2,rep,name=task_info_lists,json=taskInfoLists,proto3" json:"task_info_lists,omitempty"`
	FinishTaskCounts   int32       `protobuf:"varint,3,opt,name=finishTaskCounts,proto3" json:"finishTaskCounts,omitempty"`
	IfGetChapterReward bool        `protobuf:"varint,4,opt,name=ifGetChapterReward,proto3" json:"ifGetChapterReward,omitempty"`
}

func (m *SeasonChapter) Reset()         { *m = SeasonChapter{} }
func (m *SeasonChapter) String() string { return proto.CompactTextString(m) }
func (*SeasonChapter) ProtoMessage()    {}
func (*SeasonChapter) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{106}
}
func (m *SeasonChapter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChapter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChapter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChapter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChapter.Merge(m, src)
}
func (m *SeasonChapter) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChapter) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChapter.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChapter proto.InternalMessageInfo

func (m *SeasonChapter) GetChapterId() int32 {
	if m != nil {
		return m.ChapterId
	}
	return 0
}

func (m *SeasonChapter) GetTaskInfoLists() []*TaskInfo {
	if m != nil {
		return m.TaskInfoLists
	}
	return nil
}

func (m *SeasonChapter) GetFinishTaskCounts() int32 {
	if m != nil {
		return m.FinishTaskCounts
	}
	return 0
}

func (m *SeasonChapter) GetIfGetChapterReward() bool {
	if m != nil {
		return m.IfGetChapterReward
	}
	return false
}

type C2SSeasonInfo struct {
}

func (m *C2SSeasonInfo) Reset()         { *m = C2SSeasonInfo{} }
func (m *C2SSeasonInfo) String() string { return proto.CompactTextString(m) }
func (*C2SSeasonInfo) ProtoMessage()    {}
func (*C2SSeasonInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{107}
}
func (m *C2SSeasonInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSeasonInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSeasonInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSeasonInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSeasonInfo.Merge(m, src)
}
func (m *C2SSeasonInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2SSeasonInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSeasonInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSeasonInfo proto.InternalMessageInfo

type S2CSeasonInfo struct {
	Code         ErrorCode        `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	SeasonId     int32            `protobuf:"varint,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	ChapterLists []*SeasonChapter `protobuf:"bytes,3,rep,name=chapter_lists,json=chapterLists,proto3" json:"chapter_lists,omitempty"`
}

func (m *S2CSeasonInfo) Reset()         { *m = S2CSeasonInfo{} }
func (m *S2CSeasonInfo) String() string { return proto.CompactTextString(m) }
func (*S2CSeasonInfo) ProtoMessage()    {}
func (*S2CSeasonInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{108}
}
func (m *S2CSeasonInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSeasonInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSeasonInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSeasonInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSeasonInfo.Merge(m, src)
}
func (m *S2CSeasonInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2CSeasonInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSeasonInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSeasonInfo proto.InternalMessageInfo

func (m *S2CSeasonInfo) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CSeasonInfo) GetSeasonId() int32 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *S2CSeasonInfo) GetChapterLists() []*SeasonChapter {
	if m != nil {
		return m.ChapterLists
	}
	return nil
}

type SeasonInfoUpdateNtf struct {
	SeasonId     int32            `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	ChapterLists []*SeasonChapter `protobuf:"bytes,3,rep,name=chapter_lists,json=chapterLists,proto3" json:"chapter_lists,omitempty"`
}

func (m *SeasonInfoUpdateNtf) Reset()         { *m = SeasonInfoUpdateNtf{} }
func (m *SeasonInfoUpdateNtf) String() string { return proto.CompactTextString(m) }
func (*SeasonInfoUpdateNtf) ProtoMessage()    {}
func (*SeasonInfoUpdateNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{109}
}
func (m *SeasonInfoUpdateNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonInfoUpdateNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonInfoUpdateNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonInfoUpdateNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonInfoUpdateNtf.Merge(m, src)
}
func (m *SeasonInfoUpdateNtf) XXX_Size() int {
	return m.Size()
}
func (m *SeasonInfoUpdateNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonInfoUpdateNtf.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonInfoUpdateNtf proto.InternalMessageInfo

func (m *SeasonInfoUpdateNtf) GetSeasonId() int32 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeasonInfoUpdateNtf) GetChapterLists() []*SeasonChapter {
	if m != nil {
		return m.ChapterLists
	}
	return nil
}

// 赛季奖励
type C2SGetChapterReward struct {
	ChapterId int32 `protobuf:"varint,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	TaskId    int32 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *C2SGetChapterReward) Reset()         { *m = C2SGetChapterReward{} }
func (m *C2SGetChapterReward) String() string { return proto.CompactTextString(m) }
func (*C2SGetChapterReward) ProtoMessage()    {}
func (*C2SGetChapterReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{110}
}
func (m *C2SGetChapterReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SGetChapterReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SGetChapterReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SGetChapterReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SGetChapterReward.Merge(m, src)
}
func (m *C2SGetChapterReward) XXX_Size() int {
	return m.Size()
}
func (m *C2SGetChapterReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SGetChapterReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2SGetChapterReward proto.InternalMessageInfo

func (m *C2SGetChapterReward) GetChapterId() int32 {
	if m != nil {
		return m.ChapterId
	}
	return 0
}

func (m *C2SGetChapterReward) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type S2CGetChapterReward struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CGetChapterReward) Reset()         { *m = S2CGetChapterReward{} }
func (m *S2CGetChapterReward) String() string { return proto.CompactTextString(m) }
func (*S2CGetChapterReward) ProtoMessage()    {}
func (*S2CGetChapterReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{111}
}
func (m *S2CGetChapterReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGetChapterReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGetChapterReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGetChapterReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGetChapterReward.Merge(m, src)
}
func (m *S2CGetChapterReward) XXX_Size() int {
	return m.Size()
}
func (m *S2CGetChapterReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGetChapterReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGetChapterReward proto.InternalMessageInfo

func (m *S2CGetChapterReward) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 赛季通行证信息
type C2SSeasonPassCard struct {
}

func (m *C2SSeasonPassCard) Reset()         { *m = C2SSeasonPassCard{} }
func (m *C2SSeasonPassCard) String() string { return proto.CompactTextString(m) }
func (*C2SSeasonPassCard) ProtoMessage()    {}
func (*C2SSeasonPassCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{112}
}
func (m *C2SSeasonPassCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSeasonPassCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSeasonPassCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSeasonPassCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSeasonPassCard.Merge(m, src)
}
func (m *C2SSeasonPassCard) XXX_Size() int {
	return m.Size()
}
func (m *C2SSeasonPassCard) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSeasonPassCard.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSeasonPassCard proto.InternalMessageInfo

type S2CSeasonPassCard struct {
	Exp              int32     `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	Lv               int32     `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
	UnlockSenior     bool      `protobuf:"varint,3,opt,name=unlockSenior,proto3" json:"unlockSenior,omitempty"`
	RewardedLv       int32     `protobuf:"varint,4,opt,name=rewardedLv,proto3" json:"rewardedLv,omitempty"`
	SeniorRewardedLv int32     `protobuf:"varint,5,opt,name=seniorRewardedLv,proto3" json:"seniorRewardedLv,omitempty"`
	Code             ErrorCode `protobuf:"varint,6,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CSeasonPassCard) Reset()         { *m = S2CSeasonPassCard{} }
func (m *S2CSeasonPassCard) String() string { return proto.CompactTextString(m) }
func (*S2CSeasonPassCard) ProtoMessage()    {}
func (*S2CSeasonPassCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{113}
}
func (m *S2CSeasonPassCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSeasonPassCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSeasonPassCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSeasonPassCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSeasonPassCard.Merge(m, src)
}
func (m *S2CSeasonPassCard) XXX_Size() int {
	return m.Size()
}
func (m *S2CSeasonPassCard) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSeasonPassCard.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSeasonPassCard proto.InternalMessageInfo

func (m *S2CSeasonPassCard) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *S2CSeasonPassCard) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *S2CSeasonPassCard) GetUnlockSenior() bool {
	if m != nil {
		return m.UnlockSenior
	}
	return false
}

func (m *S2CSeasonPassCard) GetRewardedLv() int32 {
	if m != nil {
		return m.RewardedLv
	}
	return 0
}

func (m *S2CSeasonPassCard) GetSeniorRewardedLv() int32 {
	if m != nil {
		return m.SeniorRewardedLv
	}
	return 0
}

func (m *S2CSeasonPassCard) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

type SeasonPassCardNtf struct {
	Exp              int32 `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	Lv               int32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
	UnlockSenior     bool  `protobuf:"varint,3,opt,name=unlockSenior,proto3" json:"unlockSenior,omitempty"`
	RewardedLv       int32 `protobuf:"varint,4,opt,name=rewardedLv,proto3" json:"rewardedLv,omitempty"`
	SeniorRewardedLv int32 `protobuf:"varint,5,opt,name=seniorRewardedLv,proto3" json:"seniorRewardedLv,omitempty"`
}

func (m *SeasonPassCardNtf) Reset()         { *m = SeasonPassCardNtf{} }
func (m *SeasonPassCardNtf) String() string { return proto.CompactTextString(m) }
func (*SeasonPassCardNtf) ProtoMessage()    {}
func (*SeasonPassCardNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{114}
}
func (m *SeasonPassCardNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonPassCardNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonPassCardNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonPassCardNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonPassCardNtf.Merge(m, src)
}
func (m *SeasonPassCardNtf) XXX_Size() int {
	return m.Size()
}
func (m *SeasonPassCardNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonPassCardNtf.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonPassCardNtf proto.InternalMessageInfo

func (m *SeasonPassCardNtf) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *SeasonPassCardNtf) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *SeasonPassCardNtf) GetUnlockSenior() bool {
	if m != nil {
		return m.UnlockSenior
	}
	return false
}

func (m *SeasonPassCardNtf) GetRewardedLv() int32 {
	if m != nil {
		return m.RewardedLv
	}
	return 0
}

func (m *SeasonPassCardNtf) GetSeniorRewardedLv() int32 {
	if m != nil {
		return m.SeniorRewardedLv
	}
	return 0
}

// 赛季通行证领奖
type C2SSeasonPassCardReward struct {
	IfSenior bool `protobuf:"varint,1,opt,name=ifSenior,proto3" json:"ifSenior,omitempty"`
}

func (m *C2SSeasonPassCardReward) Reset()         { *m = C2SSeasonPassCardReward{} }
func (m *C2SSeasonPassCardReward) String() string { return proto.CompactTextString(m) }
func (*C2SSeasonPassCardReward) ProtoMessage()    {}
func (*C2SSeasonPassCardReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{115}
}
func (m *C2SSeasonPassCardReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSeasonPassCardReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSeasonPassCardReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSeasonPassCardReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSeasonPassCardReward.Merge(m, src)
}
func (m *C2SSeasonPassCardReward) XXX_Size() int {
	return m.Size()
}
func (m *C2SSeasonPassCardReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSeasonPassCardReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSeasonPassCardReward proto.InternalMessageInfo

func (m *C2SSeasonPassCardReward) GetIfSenior() bool {
	if m != nil {
		return m.IfSenior
	}
	return false
}

type S2CSeasonPassCardReward struct {
	RewardedLv       int32       `protobuf:"varint,1,opt,name=rewardedLv,proto3" json:"rewardedLv,omitempty"`
	SeniorRewardedLv int32       `protobuf:"varint,2,opt,name=seniorRewardedLv,proto3" json:"seniorRewardedLv,omitempty"`
	Item             []*ItemInfo `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`
	Code             ErrorCode   `protobuf:"varint,4,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CSeasonPassCardReward) Reset()         { *m = S2CSeasonPassCardReward{} }
func (m *S2CSeasonPassCardReward) String() string { return proto.CompactTextString(m) }
func (*S2CSeasonPassCardReward) ProtoMessage()    {}
func (*S2CSeasonPassCardReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{116}
}
func (m *S2CSeasonPassCardReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSeasonPassCardReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSeasonPassCardReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSeasonPassCardReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSeasonPassCardReward.Merge(m, src)
}
func (m *S2CSeasonPassCardReward) XXX_Size() int {
	return m.Size()
}
func (m *S2CSeasonPassCardReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSeasonPassCardReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSeasonPassCardReward proto.InternalMessageInfo

func (m *S2CSeasonPassCardReward) GetRewardedLv() int32 {
	if m != nil {
		return m.RewardedLv
	}
	return 0
}

func (m *S2CSeasonPassCardReward) GetSeniorRewardedLv() int32 {
	if m != nil {
		return m.SeniorRewardedLv
	}
	return 0
}

func (m *S2CSeasonPassCardReward) GetItem() []*ItemInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *S2CSeasonPassCardReward) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

type C2SSeasonPassCardBuyLv struct {
	Lv int32 `protobuf:"varint,1,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (m *C2SSeasonPassCardBuyLv) Reset()         { *m = C2SSeasonPassCardBuyLv{} }
func (m *C2SSeasonPassCardBuyLv) String() string { return proto.CompactTextString(m) }
func (*C2SSeasonPassCardBuyLv) ProtoMessage()    {}
func (*C2SSeasonPassCardBuyLv) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{117}
}
func (m *C2SSeasonPassCardBuyLv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSeasonPassCardBuyLv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSeasonPassCardBuyLv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSeasonPassCardBuyLv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSeasonPassCardBuyLv.Merge(m, src)
}
func (m *C2SSeasonPassCardBuyLv) XXX_Size() int {
	return m.Size()
}
func (m *C2SSeasonPassCardBuyLv) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSeasonPassCardBuyLv.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSeasonPassCardBuyLv proto.InternalMessageInfo

func (m *C2SSeasonPassCardBuyLv) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

type S2CSeasonPassCardBuyLv struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CSeasonPassCardBuyLv) Reset()         { *m = S2CSeasonPassCardBuyLv{} }
func (m *S2CSeasonPassCardBuyLv) String() string { return proto.CompactTextString(m) }
func (*S2CSeasonPassCardBuyLv) ProtoMessage()    {}
func (*S2CSeasonPassCardBuyLv) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{118}
}
func (m *S2CSeasonPassCardBuyLv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSeasonPassCardBuyLv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSeasonPassCardBuyLv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSeasonPassCardBuyLv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSeasonPassCardBuyLv.Merge(m, src)
}
func (m *S2CSeasonPassCardBuyLv) XXX_Size() int {
	return m.Size()
}
func (m *S2CSeasonPassCardBuyLv) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSeasonPassCardBuyLv.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSeasonPassCardBuyLv proto.InternalMessageInfo

func (m *S2CSeasonPassCardBuyLv) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

type C2SSetUserInfo struct {
	Expression  []int32 `protobuf:"varint,1,rep,packed,name=expression,proto3" json:"expression,omitempty"`
	Greetings   []int32 `protobuf:"varint,2,rep,packed,name=greetings,proto3" json:"greetings,omitempty"`
	Preferences []int32 `protobuf:"varint,3,rep,packed,name=preferences,proto3" json:"preferences,omitempty"`
}

func (m *C2SSetUserInfo) Reset()         { *m = C2SSetUserInfo{} }
func (m *C2SSetUserInfo) String() string { return proto.CompactTextString(m) }
func (*C2SSetUserInfo) ProtoMessage()    {}
func (*C2SSetUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{119}
}
func (m *C2SSetUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSetUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSetUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSetUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSetUserInfo.Merge(m, src)
}
func (m *C2SSetUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2SSetUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSetUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSetUserInfo proto.InternalMessageInfo

func (m *C2SSetUserInfo) GetExpression() []int32 {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *C2SSetUserInfo) GetGreetings() []int32 {
	if m != nil {
		return m.Greetings
	}
	return nil
}

func (m *C2SSetUserInfo) GetPreferences() []int32 {
	if m != nil {
		return m.Preferences
	}
	return nil
}

type S2CSetUserInfo struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CSetUserInfo) Reset()         { *m = S2CSetUserInfo{} }
func (m *S2CSetUserInfo) String() string { return proto.CompactTextString(m) }
func (*S2CSetUserInfo) ProtoMessage()    {}
func (*S2CSetUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{120}
}
func (m *S2CSetUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSetUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSetUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSetUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSetUserInfo.Merge(m, src)
}
func (m *S2CSetUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2CSetUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSetUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSetUserInfo proto.InternalMessageInfo

func (m *S2CSetUserInfo) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 排名信息
type C2SRankInfo struct {
}

func (m *C2SRankInfo) Reset()         { *m = C2SRankInfo{} }
func (m *C2SRankInfo) String() string { return proto.CompactTextString(m) }
func (*C2SRankInfo) ProtoMessage()    {}
func (*C2SRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{121}
}
func (m *C2SRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SRankInfo.Merge(m, src)
}
func (m *C2SRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2SRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2SRankInfo proto.InternalMessageInfo

type RankInfo struct {
	Grade         int32 `protobuf:"varint,1,opt,name=grade,proto3" json:"grade,omitempty"`
	Ranking       int32 `protobuf:"varint,2,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Score         int32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	RewardedGrade int32 `protobuf:"varint,4,opt,name=rewarded_grade,json=rewardedGrade,proto3" json:"rewarded_grade,omitempty"`
	MaxGrade      int32 `protobuf:"varint,5,opt,name=max_grade,json=maxGrade,proto3" json:"max_grade,omitempty"`
}

func (m *RankInfo) Reset()         { *m = RankInfo{} }
func (m *RankInfo) String() string { return proto.CompactTextString(m) }
func (*RankInfo) ProtoMessage()    {}
func (*RankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{122}
}
func (m *RankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankInfo.Merge(m, src)
}
func (m *RankInfo) XXX_Size() int {
	return m.Size()
}
func (m *RankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RankInfo proto.InternalMessageInfo

func (m *RankInfo) GetGrade() int32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *RankInfo) GetRanking() int32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func (m *RankInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RankInfo) GetRewardedGrade() int32 {
	if m != nil {
		return m.RewardedGrade
	}
	return 0
}

func (m *RankInfo) GetMaxGrade() int32 {
	if m != nil {
		return m.MaxGrade
	}
	return 0
}

type S2CRankInfo struct {
	RankInfo *RankInfo `protobuf:"bytes,1,opt,name=rankInfo,proto3" json:"rankInfo,omitempty"`
}

func (m *S2CRankInfo) Reset()         { *m = S2CRankInfo{} }
func (m *S2CRankInfo) String() string { return proto.CompactTextString(m) }
func (*S2CRankInfo) ProtoMessage()    {}
func (*S2CRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{123}
}
func (m *S2CRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CRankInfo.Merge(m, src)
}
func (m *S2CRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2CRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2CRankInfo proto.InternalMessageInfo

func (m *S2CRankInfo) GetRankInfo() *RankInfo {
	if m != nil {
		return m.RankInfo
	}
	return nil
}

type RankInfoUpdateNtf struct {
	RankInfo *RankInfo `protobuf:"bytes,1,opt,name=rankInfo,proto3" json:"rankInfo,omitempty"`
}

func (m *RankInfoUpdateNtf) Reset()         { *m = RankInfoUpdateNtf{} }
func (m *RankInfoUpdateNtf) String() string { return proto.CompactTextString(m) }
func (*RankInfoUpdateNtf) ProtoMessage()    {}
func (*RankInfoUpdateNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{124}
}
func (m *RankInfoUpdateNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankInfoUpdateNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankInfoUpdateNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankInfoUpdateNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankInfoUpdateNtf.Merge(m, src)
}
func (m *RankInfoUpdateNtf) XXX_Size() int {
	return m.Size()
}
func (m *RankInfoUpdateNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_RankInfoUpdateNtf.DiscardUnknown(m)
}

var xxx_messageInfo_RankInfoUpdateNtf proto.InternalMessageInfo

func (m *RankInfoUpdateNtf) GetRankInfo() *RankInfo {
	if m != nil {
		return m.RankInfo
	}
	return nil
}

// 段位领奖
type C2SRankReward struct {
}

func (m *C2SRankReward) Reset()         { *m = C2SRankReward{} }
func (m *C2SRankReward) String() string { return proto.CompactTextString(m) }
func (*C2SRankReward) ProtoMessage()    {}
func (*C2SRankReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{125}
}
func (m *C2SRankReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SRankReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SRankReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SRankReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SRankReward.Merge(m, src)
}
func (m *C2SRankReward) XXX_Size() int {
	return m.Size()
}
func (m *C2SRankReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SRankReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2SRankReward proto.InternalMessageInfo

type S2CRankReward struct {
	Code ErrorCode   `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Item []*ItemInfo `protobuf:"bytes,2,rep,name=item,proto3" json:"item,omitempty"`
}

func (m *S2CRankReward) Reset()         { *m = S2CRankReward{} }
func (m *S2CRankReward) String() string { return proto.CompactTextString(m) }
func (*S2CRankReward) ProtoMessage()    {}
func (*S2CRankReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{126}
}
func (m *S2CRankReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CRankReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CRankReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CRankReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CRankReward.Merge(m, src)
}
func (m *S2CRankReward) XXX_Size() int {
	return m.Size()
}
func (m *S2CRankReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CRankReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2CRankReward proto.InternalMessageInfo

func (m *S2CRankReward) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CRankReward) GetItem() []*ItemInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

// 功能开启
type FunctionOpenNtf struct {
	FunctionId []int32 `protobuf:"varint,1,rep,packed,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
}

func (m *FunctionOpenNtf) Reset()         { *m = FunctionOpenNtf{} }
func (m *FunctionOpenNtf) String() string { return proto.CompactTextString(m) }
func (*FunctionOpenNtf) ProtoMessage()    {}
func (*FunctionOpenNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{127}
}
func (m *FunctionOpenNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionOpenNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionOpenNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionOpenNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionOpenNtf.Merge(m, src)
}
func (m *FunctionOpenNtf) XXX_Size() int {
	return m.Size()
}
func (m *FunctionOpenNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionOpenNtf.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionOpenNtf proto.InternalMessageInfo

func (m *FunctionOpenNtf) GetFunctionId() []int32 {
	if m != nil {
		return m.FunctionId
	}
	return nil
}

// 商城礼包
type MallPack struct {
	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Countdown int32 `protobuf:"varint,2,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (m *MallPack) Reset()         { *m = MallPack{} }
func (m *MallPack) String() string { return proto.CompactTextString(m) }
func (*MallPack) ProtoMessage()    {}
func (*MallPack) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{128}
}
func (m *MallPack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MallPack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MallPack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MallPack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MallPack.Merge(m, src)
}
func (m *MallPack) XXX_Size() int {
	return m.Size()
}
func (m *MallPack) XXX_DiscardUnknown() {
	xxx_messageInfo_MallPack.DiscardUnknown(m)
}

var xxx_messageInfo_MallPack proto.InternalMessageInfo

func (m *MallPack) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MallPack) GetCountdown() int32 {
	if m != nil {
		return m.Countdown
	}
	return 0
}

// 商店商品
type ShopItem struct {
	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyCount     int32 `protobuf:"varint,2,opt,name=buyCount,proto3" json:"buyCount,omitempty"`
	FirstBonus   bool  `protobuf:"varint,3,opt,name=firstBonus,proto3" json:"firstBonus,omitempty"`
	ActualItemId int32 `protobuf:"varint,4,opt,name=actualItemId,proto3" json:"actualItemId,omitempty"`
	Countdown    int32 `protobuf:"varint,5,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (m *ShopItem) Reset()         { *m = ShopItem{} }
func (m *ShopItem) String() string { return proto.CompactTextString(m) }
func (*ShopItem) ProtoMessage()    {}
func (*ShopItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{129}
}
func (m *ShopItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopItem.Merge(m, src)
}
func (m *ShopItem) XXX_Size() int {
	return m.Size()
}
func (m *ShopItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopItem.DiscardUnknown(m)
}

var xxx_messageInfo_ShopItem proto.InternalMessageInfo

func (m *ShopItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShopItem) GetBuyCount() int32 {
	if m != nil {
		return m.BuyCount
	}
	return 0
}

func (m *ShopItem) GetFirstBonus() bool {
	if m != nil {
		return m.FirstBonus
	}
	return false
}

func (m *ShopItem) GetActualItemId() int32 {
	if m != nil {
		return m.ActualItemId
	}
	return 0
}

func (m *ShopItem) GetCountdown() int32 {
	if m != nil {
		return m.Countdown
	}
	return 0
}

// 商城商店
type MallShop struct {
	Id         int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GrandTotal int32       `protobuf:"varint,2,opt,name=grandTotal,proto3" json:"grandTotal,omitempty"`
	Items      []*ShopItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *MallShop) Reset()         { *m = MallShop{} }
func (m *MallShop) String() string { return proto.CompactTextString(m) }
func (*MallShop) ProtoMessage()    {}
func (*MallShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{130}
}
func (m *MallShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MallShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MallShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MallShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MallShop.Merge(m, src)
}
func (m *MallShop) XXX_Size() int {
	return m.Size()
}
func (m *MallShop) XXX_DiscardUnknown() {
	xxx_messageInfo_MallShop.DiscardUnknown(m)
}

var xxx_messageInfo_MallShop proto.InternalMessageInfo

func (m *MallShop) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MallShop) GetGrandTotal() int32 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *MallShop) GetItems() []*ShopItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// 获取商城信息
type C2SMall struct {
}

func (m *C2SMall) Reset()         { *m = C2SMall{} }
func (m *C2SMall) String() string { return proto.CompactTextString(m) }
func (*C2SMall) ProtoMessage()    {}
func (*C2SMall) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{131}
}
func (m *C2SMall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SMall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SMall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SMall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SMall.Merge(m, src)
}
func (m *C2SMall) XXX_Size() int {
	return m.Size()
}
func (m *C2SMall) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SMall.DiscardUnknown(m)
}

var xxx_messageInfo_C2SMall proto.InternalMessageInfo

type S2CMall struct {
	Code  ErrorCode   `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Packs []*MallPack `protobuf:"bytes,2,rep,name=packs,proto3" json:"packs,omitempty"`
	Shops []*MallShop `protobuf:"bytes,3,rep,name=shops,proto3" json:"shops,omitempty"`
}

func (m *S2CMall) Reset()         { *m = S2CMall{} }
func (m *S2CMall) String() string { return proto.CompactTextString(m) }
func (*S2CMall) ProtoMessage()    {}
func (*S2CMall) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{132}
}
func (m *S2CMall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CMall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CMall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CMall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CMall.Merge(m, src)
}
func (m *S2CMall) XXX_Size() int {
	return m.Size()
}
func (m *S2CMall) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CMall.DiscardUnknown(m)
}

var xxx_messageInfo_S2CMall proto.InternalMessageInfo

func (m *S2CMall) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CMall) GetPacks() []*MallPack {
	if m != nil {
		return m.Packs
	}
	return nil
}

func (m *S2CMall) GetShops() []*MallShop {
	if m != nil {
		return m.Shops
	}
	return nil
}

// 真实货币支付
type C2SRealPay struct {
	Pack     bool       `protobuf:"varint,1,opt,name=pack,proto3" json:"pack,omitempty"`
	Id       int32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PayChann PayChannel `protobuf:"varint,3,opt,name=payChann,proto3,enum=PayChannel" json:"payChann,omitempty"`
}

func (m *C2SRealPay) Reset()         { *m = C2SRealPay{} }
func (m *C2SRealPay) String() string { return proto.CompactTextString(m) }
func (*C2SRealPay) ProtoMessage()    {}
func (*C2SRealPay) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{133}
}
func (m *C2SRealPay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SRealPay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SRealPay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SRealPay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SRealPay.Merge(m, src)
}
func (m *C2SRealPay) XXX_Size() int {
	return m.Size()
}
func (m *C2SRealPay) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SRealPay.DiscardUnknown(m)
}

var xxx_messageInfo_C2SRealPay proto.InternalMessageInfo

func (m *C2SRealPay) GetPack() bool {
	if m != nil {
		return m.Pack
	}
	return false
}

func (m *C2SRealPay) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SRealPay) GetPayChann() PayChannel {
	if m != nil {
		return m.PayChann
	}
	return PayChannel_PayChannel_None
}

type S2CRealPay struct {
	Code            ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	OrderId         string    `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	PlatformGoodsId string    `protobuf:"bytes,3,opt,name=platformGoodsId,proto3" json:"platformGoodsId,omitempty"`
}

func (m *S2CRealPay) Reset()         { *m = S2CRealPay{} }
func (m *S2CRealPay) String() string { return proto.CompactTextString(m) }
func (*S2CRealPay) ProtoMessage()    {}
func (*S2CRealPay) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{134}
}
func (m *S2CRealPay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CRealPay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CRealPay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CRealPay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CRealPay.Merge(m, src)
}
func (m *S2CRealPay) XXX_Size() int {
	return m.Size()
}
func (m *S2CRealPay) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CRealPay.DiscardUnknown(m)
}

var xxx_messageInfo_S2CRealPay proto.InternalMessageInfo

func (m *S2CRealPay) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CRealPay) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *S2CRealPay) GetPlatformGoodsId() string {
	if m != nil {
		return m.PlatformGoodsId
	}
	return ""
}

// 真实货币发货完成
type S2CRealPayFinish struct {
	Pack bool  `protobuf:"varint,1,opt,name=pack,proto3" json:"pack,omitempty"`
	Id   int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CRealPayFinish) Reset()         { *m = S2CRealPayFinish{} }
func (m *S2CRealPayFinish) String() string { return proto.CompactTextString(m) }
func (*S2CRealPayFinish) ProtoMessage()    {}
func (*S2CRealPayFinish) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{135}
}
func (m *S2CRealPayFinish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CRealPayFinish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CRealPayFinish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CRealPayFinish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CRealPayFinish.Merge(m, src)
}
func (m *S2CRealPayFinish) XXX_Size() int {
	return m.Size()
}
func (m *S2CRealPayFinish) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CRealPayFinish.DiscardUnknown(m)
}

var xxx_messageInfo_S2CRealPayFinish proto.InternalMessageInfo

func (m *S2CRealPayFinish) GetPack() bool {
	if m != nil {
		return m.Pack
	}
	return false
}

func (m *S2CRealPayFinish) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 游戏货币支付
type C2SGamePay struct {
	Pack bool  `protobuf:"varint,1,opt,name=pack,proto3" json:"pack,omitempty"`
	Id   int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SGamePay) Reset()         { *m = C2SGamePay{} }
func (m *C2SGamePay) String() string { return proto.CompactTextString(m) }
func (*C2SGamePay) ProtoMessage()    {}
func (*C2SGamePay) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{136}
}
func (m *C2SGamePay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SGamePay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SGamePay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SGamePay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SGamePay.Merge(m, src)
}
func (m *C2SGamePay) XXX_Size() int {
	return m.Size()
}
func (m *C2SGamePay) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SGamePay.DiscardUnknown(m)
}

var xxx_messageInfo_C2SGamePay proto.InternalMessageInfo

func (m *C2SGamePay) GetPack() bool {
	if m != nil {
		return m.Pack
	}
	return false
}

func (m *C2SGamePay) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CGamePay struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CGamePay) Reset()         { *m = S2CGamePay{} }
func (m *S2CGamePay) String() string { return proto.CompactTextString(m) }
func (*S2CGamePay) ProtoMessage()    {}
func (*S2CGamePay) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{137}
}
func (m *S2CGamePay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGamePay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGamePay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGamePay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGamePay.Merge(m, src)
}
func (m *S2CGamePay) XXX_Size() int {
	return m.Size()
}
func (m *S2CGamePay) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGamePay.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGamePay proto.InternalMessageInfo

func (m *S2CGamePay) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// 领取商店累计购买奖励
type C2STakeShopAccumulateAward struct {
	Id int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2STakeShopAccumulateAward) Reset()         { *m = C2STakeShopAccumulateAward{} }
func (m *C2STakeShopAccumulateAward) String() string { return proto.CompactTextString(m) }
func (*C2STakeShopAccumulateAward) ProtoMessage()    {}
func (*C2STakeShopAccumulateAward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{138}
}
func (m *C2STakeShopAccumulateAward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2STakeShopAccumulateAward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2STakeShopAccumulateAward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2STakeShopAccumulateAward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2STakeShopAccumulateAward.Merge(m, src)
}
func (m *C2STakeShopAccumulateAward) XXX_Size() int {
	return m.Size()
}
func (m *C2STakeShopAccumulateAward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2STakeShopAccumulateAward.DiscardUnknown(m)
}

var xxx_messageInfo_C2STakeShopAccumulateAward proto.InternalMessageInfo

func (m *C2STakeShopAccumulateAward) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CTakeShopAccumulateAward struct {
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *S2CTakeShopAccumulateAward) Reset()         { *m = S2CTakeShopAccumulateAward{} }
func (m *S2CTakeShopAccumulateAward) String() string { return proto.CompactTextString(m) }
func (*S2CTakeShopAccumulateAward) ProtoMessage()    {}
func (*S2CTakeShopAccumulateAward) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{139}
}
func (m *S2CTakeShopAccumulateAward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CTakeShopAccumulateAward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CTakeShopAccumulateAward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CTakeShopAccumulateAward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CTakeShopAccumulateAward.Merge(m, src)
}
func (m *S2CTakeShopAccumulateAward) XXX_Size() int {
	return m.Size()
}
func (m *S2CTakeShopAccumulateAward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CTakeShopAccumulateAward.DiscardUnknown(m)
}

var xxx_messageInfo_S2CTakeShopAccumulateAward proto.InternalMessageInfo

func (m *S2CTakeShopAccumulateAward) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

// pay-lobby 支付成功通知
type P2LPay struct {
	Uid     string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *P2LPay) Reset()         { *m = P2LPay{} }
func (m *P2LPay) String() string { return proto.CompactTextString(m) }
func (*P2LPay) ProtoMessage()    {}
func (*P2LPay) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{140}
}
func (m *P2LPay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *P2LPay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_P2LPay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *P2LPay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2LPay.Merge(m, src)
}
func (m *P2LPay) XXX_Size() int {
	return m.Size()
}
func (m *P2LPay) XXX_DiscardUnknown() {
	xxx_messageInfo_P2LPay.DiscardUnknown(m)
}

var xxx_messageInfo_P2LPay proto.InternalMessageInfo

func (m *P2LPay) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *P2LPay) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type C2SSetUserDetail struct {
	Type   UserDetailEvent `protobuf:"varint,1,opt,name=type,proto3,enum=UserDetailEvent" json:"type,omitempty"`
	CardId int32           `protobuf:"varint,2,opt,name=cardId,proto3" json:"cardId,omitempty"`
}

func (m *C2SSetUserDetail) Reset()         { *m = C2SSetUserDetail{} }
func (m *C2SSetUserDetail) String() string { return proto.CompactTextString(m) }
func (*C2SSetUserDetail) ProtoMessage()    {}
func (*C2SSetUserDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{141}
}
func (m *C2SSetUserDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SSetUserDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SSetUserDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SSetUserDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SSetUserDetail.Merge(m, src)
}
func (m *C2SSetUserDetail) XXX_Size() int {
	return m.Size()
}
func (m *C2SSetUserDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SSetUserDetail.DiscardUnknown(m)
}

var xxx_messageInfo_C2SSetUserDetail proto.InternalMessageInfo

func (m *C2SSetUserDetail) GetType() UserDetailEvent {
	if m != nil {
		return m.Type
	}
	return UserDetailEvent_UserDetail_None
}

func (m *C2SSetUserDetail) GetCardId() int32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

type S2CSetUserDetail struct {
	Code       ErrorCode       `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Type       UserDetailEvent `protobuf:"varint,2,opt,name=type,proto3,enum=UserDetailEvent" json:"type,omitempty"`
	UpdateData *UserDatail     `protobuf:"bytes,3,opt,name=updateData,proto3" json:"updateData,omitempty"`
}

func (m *S2CSetUserDetail) Reset()         { *m = S2CSetUserDetail{} }
func (m *S2CSetUserDetail) String() string { return proto.CompactTextString(m) }
func (*S2CSetUserDetail) ProtoMessage()    {}
func (*S2CSetUserDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{142}
}
func (m *S2CSetUserDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CSetUserDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CSetUserDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CSetUserDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CSetUserDetail.Merge(m, src)
}
func (m *S2CSetUserDetail) XXX_Size() int {
	return m.Size()
}
func (m *S2CSetUserDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CSetUserDetail.DiscardUnknown(m)
}

var xxx_messageInfo_S2CSetUserDetail proto.InternalMessageInfo

func (m *S2CSetUserDetail) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CSetUserDetail) GetType() UserDetailEvent {
	if m != nil {
		return m.Type
	}
	return UserDetailEvent_UserDetail_None
}

func (m *S2CSetUserDetail) GetUpdateData() *UserDatail {
	if m != nil {
		return m.UpdateData
	}
	return nil
}

type BattlePlayerReport struct {
	Uid            string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SeasonInfo     *SeasonInfo       `protobuf:"bytes,3,opt,name=seasonInfo,proto3" json:"seasonInfo,omitempty"`
	LastSeasonInfo *SeasonInfo       `protobuf:"bytes,4,opt,name=lastSeasonInfo,proto3" json:"lastSeasonInfo,omitempty"`
	Head           int32             `protobuf:"varint,5,opt,name=head,proto3" json:"head,omitempty"`
	CardDetails    []*CardDetailInfo `protobuf:"bytes,6,rep,name=cardDetails,proto3" json:"cardDetails,omitempty"`
	Result         int32             `protobuf:"varint,7,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *BattlePlayerReport) Reset()         { *m = BattlePlayerReport{} }
func (m *BattlePlayerReport) String() string { return proto.CompactTextString(m) }
func (*BattlePlayerReport) ProtoMessage()    {}
func (*BattlePlayerReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{143}
}
func (m *BattlePlayerReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattlePlayerReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattlePlayerReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattlePlayerReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattlePlayerReport.Merge(m, src)
}
func (m *BattlePlayerReport) XXX_Size() int {
	return m.Size()
}
func (m *BattlePlayerReport) XXX_DiscardUnknown() {
	xxx_messageInfo_BattlePlayerReport.DiscardUnknown(m)
}

var xxx_messageInfo_BattlePlayerReport proto.InternalMessageInfo

func (m *BattlePlayerReport) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *BattlePlayerReport) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BattlePlayerReport) GetSeasonInfo() *SeasonInfo {
	if m != nil {
		return m.SeasonInfo
	}
	return nil
}

func (m *BattlePlayerReport) GetLastSeasonInfo() *SeasonInfo {
	if m != nil {
		return m.LastSeasonInfo
	}
	return nil
}

func (m *BattlePlayerReport) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *BattlePlayerReport) GetCardDetails() []*CardDetailInfo {
	if m != nil {
		return m.CardDetails
	}
	return nil
}

func (m *BattlePlayerReport) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type BattleReport struct {
	Players   []*BattlePlayerReport `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Timestamp int64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *BattleReport) Reset()         { *m = BattleReport{} }
func (m *BattleReport) String() string { return proto.CompactTextString(m) }
func (*BattleReport) ProtoMessage()    {}
func (*BattleReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{144}
}
func (m *BattleReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleReport.Merge(m, src)
}
func (m *BattleReport) XXX_Size() int {
	return m.Size()
}
func (m *BattleReport) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleReport.DiscardUnknown(m)
}

var xxx_messageInfo_BattleReport proto.InternalMessageInfo

func (m *BattleReport) GetPlayers() []*BattlePlayerReport {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *BattleReport) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 请求战报
type C2SGetBattleReport struct {
}

func (m *C2SGetBattleReport) Reset()         { *m = C2SGetBattleReport{} }
func (m *C2SGetBattleReport) String() string { return proto.CompactTextString(m) }
func (*C2SGetBattleReport) ProtoMessage()    {}
func (*C2SGetBattleReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{145}
}
func (m *C2SGetBattleReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SGetBattleReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SGetBattleReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SGetBattleReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SGetBattleReport.Merge(m, src)
}
func (m *C2SGetBattleReport) XXX_Size() int {
	return m.Size()
}
func (m *C2SGetBattleReport) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SGetBattleReport.DiscardUnknown(m)
}

var xxx_messageInfo_C2SGetBattleReport proto.InternalMessageInfo

type S2CGetBattleReport struct {
	BattleReports []*BattleReport `protobuf:"bytes,1,rep,name=battle_reports,json=battleReports,proto3" json:"battle_reports,omitempty"`
}

func (m *S2CGetBattleReport) Reset()         { *m = S2CGetBattleReport{} }
func (m *S2CGetBattleReport) String() string { return proto.CompactTextString(m) }
func (*S2CGetBattleReport) ProtoMessage()    {}
func (*S2CGetBattleReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{146}
}
func (m *S2CGetBattleReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGetBattleReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGetBattleReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGetBattleReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGetBattleReport.Merge(m, src)
}
func (m *S2CGetBattleReport) XXX_Size() int {
	return m.Size()
}
func (m *S2CGetBattleReport) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGetBattleReport.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGetBattleReport proto.InternalMessageInfo

func (m *S2CGetBattleReport) GetBattleReports() []*BattleReport {
	if m != nil {
		return m.BattleReports
	}
	return nil
}

// 邮件列表
type C2SMailList struct {
}

func (m *C2SMailList) Reset()         { *m = C2SMailList{} }
func (m *C2SMailList) String() string { return proto.CompactTextString(m) }
func (*C2SMailList) ProtoMessage()    {}
func (*C2SMailList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{147}
}
func (m *C2SMailList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SMailList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SMailList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SMailList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SMailList.Merge(m, src)
}
func (m *C2SMailList) XXX_Size() int {
	return m.Size()
}
func (m *C2SMailList) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SMailList.DiscardUnknown(m)
}

var xxx_messageInfo_C2SMailList proto.InternalMessageInfo

type S2CMailList struct {
	MailBriefs []*MailBrief `protobuf:"bytes,1,rep,name=mail_briefs,json=mailBriefs,proto3" json:"mail_briefs,omitempty"`
}

func (m *S2CMailList) Reset()         { *m = S2CMailList{} }
func (m *S2CMailList) String() string { return proto.CompactTextString(m) }
func (*S2CMailList) ProtoMessage()    {}
func (*S2CMailList) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{148}
}
func (m *S2CMailList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CMailList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CMailList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CMailList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CMailList.Merge(m, src)
}
func (m *S2CMailList) XXX_Size() int {
	return m.Size()
}
func (m *S2CMailList) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CMailList.DiscardUnknown(m)
}

var xxx_messageInfo_S2CMailList proto.InternalMessageInfo

func (m *S2CMailList) GetMailBriefs() []*MailBrief {
	if m != nil {
		return m.MailBriefs
	}
	return nil
}

type NewMailNtf struct {
	NewMails []*Mail `protobuf:"bytes,1,rep,name=new_mails,json=newMails,proto3" json:"new_mails,omitempty"`
}

func (m *NewMailNtf) Reset()         { *m = NewMailNtf{} }
func (m *NewMailNtf) String() string { return proto.CompactTextString(m) }
func (*NewMailNtf) ProtoMessage()    {}
func (*NewMailNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{149}
}
func (m *NewMailNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewMailNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewMailNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewMailNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMailNtf.Merge(m, src)
}
func (m *NewMailNtf) XXX_Size() int {
	return m.Size()
}
func (m *NewMailNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMailNtf.DiscardUnknown(m)
}

var xxx_messageInfo_NewMailNtf proto.InternalMessageInfo

func (m *NewMailNtf) GetNewMails() []*Mail {
	if m != nil {
		return m.NewMails
	}
	return nil
}

// 阅读邮件
type C2SReadMail struct {
	MailId  int64 `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	AllRead bool  `protobuf:"varint,2,opt,name=allRead,proto3" json:"allRead,omitempty"`
}

func (m *C2SReadMail) Reset()         { *m = C2SReadMail{} }
func (m *C2SReadMail) String() string { return proto.CompactTextString(m) }
func (*C2SReadMail) ProtoMessage()    {}
func (*C2SReadMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{150}
}
func (m *C2SReadMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SReadMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SReadMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SReadMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SReadMail.Merge(m, src)
}
func (m *C2SReadMail) XXX_Size() int {
	return m.Size()
}
func (m *C2SReadMail) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SReadMail.DiscardUnknown(m)
}

var xxx_messageInfo_C2SReadMail proto.InternalMessageInfo

func (m *C2SReadMail) GetMailId() int64 {
	if m != nil {
		return m.MailId
	}
	return 0
}

func (m *C2SReadMail) GetAllRead() bool {
	if m != nil {
		return m.AllRead
	}
	return false
}

type S2CReadMail struct {
	Code     ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	ReadMail []*Mail   `protobuf:"bytes,2,rep,name=read_mail,json=readMail,proto3" json:"read_mail,omitempty"`
}

func (m *S2CReadMail) Reset()         { *m = S2CReadMail{} }
func (m *S2CReadMail) String() string { return proto.CompactTextString(m) }
func (*S2CReadMail) ProtoMessage()    {}
func (*S2CReadMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{151}
}
func (m *S2CReadMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CReadMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CReadMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CReadMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CReadMail.Merge(m, src)
}
func (m *S2CReadMail) XXX_Size() int {
	return m.Size()
}
func (m *S2CReadMail) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CReadMail.DiscardUnknown(m)
}

var xxx_messageInfo_S2CReadMail proto.InternalMessageInfo

func (m *S2CReadMail) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CReadMail) GetReadMail() []*Mail {
	if m != nil {
		return m.ReadMail
	}
	return nil
}

// 领取邮件
type C2SRecvMail struct {
	MailId  int64 `protobuf:"varint,1,opt,name=mailId,proto3" json:"mailId,omitempty"`
	AllRecv bool  `protobuf:"varint,2,opt,name=allRecv,proto3" json:"allRecv,omitempty"`
}

func (m *C2SRecvMail) Reset()         { *m = C2SRecvMail{} }
func (m *C2SRecvMail) String() string { return proto.CompactTextString(m) }
func (*C2SRecvMail) ProtoMessage()    {}
func (*C2SRecvMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{152}
}
func (m *C2SRecvMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SRecvMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SRecvMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SRecvMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SRecvMail.Merge(m, src)
}
func (m *C2SRecvMail) XXX_Size() int {
	return m.Size()
}
func (m *C2SRecvMail) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SRecvMail.DiscardUnknown(m)
}

var xxx_messageInfo_C2SRecvMail proto.InternalMessageInfo

func (m *C2SRecvMail) GetMailId() int64 {
	if m != nil {
		return m.MailId
	}
	return 0
}

func (m *C2SRecvMail) GetAllRecv() bool {
	if m != nil {
		return m.AllRecv
	}
	return false
}

type S2CRecvMail struct {
	Code     ErrorCode   `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	RecvMail []*Mail     `protobuf:"bytes,2,rep,name=recvMail,proto3" json:"recvMail,omitempty"`
	Item     []*ItemInfo `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`
}

func (m *S2CRecvMail) Reset()         { *m = S2CRecvMail{} }
func (m *S2CRecvMail) String() string { return proto.CompactTextString(m) }
func (*S2CRecvMail) ProtoMessage()    {}
func (*S2CRecvMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{153}
}
func (m *S2CRecvMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CRecvMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CRecvMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CRecvMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CRecvMail.Merge(m, src)
}
func (m *S2CRecvMail) XXX_Size() int {
	return m.Size()
}
func (m *S2CRecvMail) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CRecvMail.DiscardUnknown(m)
}

var xxx_messageInfo_S2CRecvMail proto.InternalMessageInfo

func (m *S2CRecvMail) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CRecvMail) GetRecvMail() []*Mail {
	if m != nil {
		return m.RecvMail
	}
	return nil
}

func (m *S2CRecvMail) GetItem() []*ItemInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

// 删除邮件
type C2SDelMail struct {
	MailId int64 `protobuf:"varint,1,opt,name=mailId,proto3" json:"mailId,omitempty"`
}

func (m *C2SDelMail) Reset()         { *m = C2SDelMail{} }
func (m *C2SDelMail) String() string { return proto.CompactTextString(m) }
func (*C2SDelMail) ProtoMessage()    {}
func (*C2SDelMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{154}
}
func (m *C2SDelMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SDelMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SDelMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SDelMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SDelMail.Merge(m, src)
}
func (m *C2SDelMail) XXX_Size() int {
	return m.Size()
}
func (m *C2SDelMail) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SDelMail.DiscardUnknown(m)
}

var xxx_messageInfo_C2SDelMail proto.InternalMessageInfo

func (m *C2SDelMail) GetMailId() int64 {
	if m != nil {
		return m.MailId
	}
	return 0
}

// 删除邮件
type S2CDelMail struct {
	Error   ErrorCode `protobuf:"varint,1,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	DelMail []*Mail   `protobuf:"bytes,2,rep,name=delMail,proto3" json:"delMail,omitempty"`
}

func (m *S2CDelMail) Reset()         { *m = S2CDelMail{} }
func (m *S2CDelMail) String() string { return proto.CompactTextString(m) }
func (*S2CDelMail) ProtoMessage()    {}
func (*S2CDelMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{155}
}
func (m *S2CDelMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CDelMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CDelMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CDelMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CDelMail.Merge(m, src)
}
func (m *S2CDelMail) XXX_Size() int {
	return m.Size()
}
func (m *S2CDelMail) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CDelMail.DiscardUnknown(m)
}

var xxx_messageInfo_S2CDelMail proto.InternalMessageInfo

func (m *S2CDelMail) GetError() ErrorCode {
	if m != nil {
		return m.Error
	}
	return ErrorCode_None
}

func (m *S2CDelMail) GetDelMail() []*Mail {
	if m != nil {
		return m.DelMail
	}
	return nil
}

// 获取绑定渠道
type C2SFindBoundChannel struct {
}

func (m *C2SFindBoundChannel) Reset()         { *m = C2SFindBoundChannel{} }
func (m *C2SFindBoundChannel) String() string { return proto.CompactTextString(m) }
func (*C2SFindBoundChannel) ProtoMessage()    {}
func (*C2SFindBoundChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{156}
}
func (m *C2SFindBoundChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SFindBoundChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SFindBoundChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SFindBoundChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SFindBoundChannel.Merge(m, src)
}
func (m *C2SFindBoundChannel) XXX_Size() int {
	return m.Size()
}
func (m *C2SFindBoundChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SFindBoundChannel.DiscardUnknown(m)
}

var xxx_messageInfo_C2SFindBoundChannel proto.InternalMessageInfo

type S2CFindBoundChannel struct {
	Code     ErrorCode      `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Channels []LoginChannel `protobuf:"varint,2,rep,packed,name=channels,proto3,enum=LoginChannel" json:"channels,omitempty"`
}

func (m *S2CFindBoundChannel) Reset()         { *m = S2CFindBoundChannel{} }
func (m *S2CFindBoundChannel) String() string { return proto.CompactTextString(m) }
func (*S2CFindBoundChannel) ProtoMessage()    {}
func (*S2CFindBoundChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_39882c1247f3d5a2, []int{157}
}
func (m *S2CFindBoundChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CFindBoundChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CFindBoundChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CFindBoundChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CFindBoundChannel.Merge(m, src)
}
func (m *S2CFindBoundChannel) XXX_Size() int {
	return m.Size()
}
func (m *S2CFindBoundChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CFindBoundChannel.DiscardUnknown(m)
}

var xxx_messageInfo_S2CFindBoundChannel proto.InternalMessageInfo

func (m *S2CFindBoundChannel) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *S2CFindBoundChannel) GetChannels() []LoginChannel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func init() {
	proto.RegisterEnum("TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("UserDetailEvent", UserDetailEvent_name, UserDetailEvent_value)
	proto.RegisterType((*AccountVerifyResult)(nil), "AccountVerifyResult")
	proto.RegisterType((*C2SRegister)(nil), "C2SRegister")
	proto.RegisterType((*S2CRegister)(nil), "S2CRegister")
	proto.RegisterType((*C2SLogin)(nil), "C2SLogin")
	proto.RegisterType((*S2CLogin)(nil), "S2CLogin")
	proto.RegisterType((*C2SUserVerify)(nil), "C2SUserVerify")
	proto.RegisterType((*S2CUserVerify)(nil), "S2CUserVerify")
	proto.RegisterType((*C2SAutoRegister)(nil), "C2SAutoRegister")
	proto.RegisterType((*S2CAutoRegister)(nil), "S2CAutoRegister")
	proto.RegisterType((*C2SLoginByChannel)(nil), "C2SLoginByChannel")
	proto.RegisterMapType((map[string]string)(nil), "C2SLoginByChannel.ArgsEntry")
	proto.RegisterType((*S2CLoginByChannel)(nil), "S2CLoginByChannel")
	proto.RegisterType((*C2SBindChannelAccount)(nil), "C2SBindChannelAccount")
	proto.RegisterMapType((map[string]string)(nil), "C2SBindChannelAccount.ArgsEntry")
	proto.RegisterType((*S2CBindChannelAccount)(nil), "S2CBindChannelAccount")
	proto.RegisterType((*UserDatail)(nil), "UserDatail")
	proto.RegisterMapType((map[int32]int32)(nil), "UserDatail.CardPreferencesEntry")
	proto.RegisterType((*UserDatailNtf)(nil), "UserDatailNtf")
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*C2SVerifyToken)(nil), "C2SVerifyToken")
	proto.RegisterType((*S2CVerifyToken)(nil), "S2CVerifyToken")
	proto.RegisterType((*C2SReconnection)(nil), "C2SReconnection")
	proto.RegisterType((*S2CReconnection)(nil), "S2CReconnection")
	proto.RegisterType((*C2SSetHead)(nil), "C2SSetHead")
	proto.RegisterType((*S2CSetHead)(nil), "S2CSetHead")
	proto.RegisterType((*C2SSetName)(nil), "C2SSetName")
	proto.RegisterType((*S2CSetName)(nil), "S2CSetName")
	proto.RegisterType((*C2SCreateDeck)(nil), "C2SCreateDeck")
	proto.RegisterType((*S2CCreateDeck)(nil), "S2CCreateDeck")
	proto.RegisterType((*C2SUpdateDeck)(nil), "C2SUpdateDeck")
	proto.RegisterType((*S2CUpdateDeck)(nil), "S2CUpdateDeck")
	proto.RegisterType((*C2SApplyAllDeck)(nil), "C2SApplyAllDeck")
	proto.RegisterType((*S2CApplyAllDeck)(nil), "S2CApplyAllDeck")
	proto.RegisterType((*C2SDeleteDeck)(nil), "C2SDeleteDeck")
	proto.RegisterType((*S2CDeleteDeck)(nil), "S2CDeleteDeck")
	proto.RegisterType((*C2SQueryDecks)(nil), "C2SQueryDecks")
	proto.RegisterType((*S2CQueryDecks)(nil), "S2CQueryDecks")
	proto.RegisterType((*CardDetailInfoNtf)(nil), "CardDetailInfoNtf")
	proto.RegisterType((*C2SCardList)(nil), "C2SCardList")
	proto.RegisterType((*S2CCardList)(nil), "S2CCardList")
	proto.RegisterType((*C2SUpgradeCard)(nil), "C2SUpgradeCard")
	proto.RegisterType((*S2CUpgradeCard)(nil), "S2CUpgradeCard")
	proto.RegisterType((*C2SEvolveCard)(nil), "C2SEvolveCard")
	proto.RegisterType((*S2CEvolveCard)(nil), "S2CEvolveCard")
	proto.RegisterType((*C2SSetCard)(nil), "C2SSetCard")
	proto.RegisterType((*S2CSetCard)(nil), "S2CSetCard")
	proto.RegisterType((*C2SRecommendCard)(nil), "C2SRecommendCard")
	proto.RegisterType((*S2CRecommendCard)(nil), "S2CRecommendCard")
	proto.RegisterType((*C2SApplyMatch)(nil), "C2SApplyMatch")
	proto.RegisterType((*S2CApplyMatch)(nil), "S2CApplyMatch")
	proto.RegisterType((*C2SExitMatch)(nil), "C2SExitMatch")
	proto.RegisterType((*S2CExitMatch)(nil), "S2CExitMatch")
	proto.RegisterType((*C2SUpBattleDeck)(nil), "C2SUpBattleDeck")
	proto.RegisterType((*S2CUpBattleDeck)(nil), "S2CUpBattleDeck")
	proto.RegisterType((*C2SQueryBattleDeck)(nil), "C2SQueryBattleDeck")
	proto.RegisterType((*S2CQueryBattleDeck)(nil), "S2CQueryBattleDeck")
	proto.RegisterType((*LotteryInfo)(nil), "LotteryInfo")
	proto.RegisterType((*C2SLotteryList)(nil), "C2SLotteryList")
	proto.RegisterType((*S2CLotteryList)(nil), "S2CLotteryList")
	proto.RegisterMapType((map[int32]*LotteryInfo)(nil), "S2CLotteryList.LotteryListEntry")
	proto.RegisterType((*LotteryHistoryData)(nil), "LotteryHistoryData")
	proto.RegisterType((*C2SLotteryHistoryList)(nil), "C2SLotteryHistoryList")
	proto.RegisterType((*S2CLotteryHistoryList)(nil), "S2CLotteryHistoryList")
	proto.RegisterType((*C2SLotteryRedemption)(nil), "C2SLotteryRedemption")
	proto.RegisterType((*S2CLotteryRedemption)(nil), "S2CLotteryRedemption")
	proto.RegisterType((*C2SLottery)(nil), "C2SLottery")
	proto.RegisterType((*S2CLottery)(nil), "S2CLottery")
	proto.RegisterType((*S2CItem)(nil), "S2CItem")
	proto.RegisterType((*C2SItemList)(nil), "C2SItemList")
	proto.RegisterType((*S2CItemList)(nil), "S2CItemList")
	proto.RegisterType((*Spaceship)(nil), "Spaceship")
	proto.RegisterType((*C2SSpaceshipList)(nil), "C2SSpaceshipList")
	proto.RegisterType((*S2CSpaceshipList)(nil), "S2CSpaceshipList")
	proto.RegisterType((*C2SUpSpaceship)(nil), "C2SUpSpaceship")
	proto.RegisterType((*S2CUpSpaceship)(nil), "S2CUpSpaceship")
	proto.RegisterType((*ExploreItem)(nil), "ExploreItem")
	proto.RegisterType((*Explore)(nil), "Explore")
	proto.RegisterType((*C2SQueryExplore)(nil), "C2SQueryExplore")
	proto.RegisterType((*S2CQueryExplore)(nil), "S2CQueryExplore")
	proto.RegisterType((*C2SStartExplore)(nil), "C2SStartExplore")
	proto.RegisterType((*S2CStartExplore)(nil), "S2CStartExplore")
	proto.RegisterType((*C2SEndExplore)(nil), "C2SEndExplore")
	proto.RegisterType((*S2CEndExplore)(nil), "S2CEndExplore")
	proto.RegisterType((*C2SGetTime)(nil), "C2SGetTime")
	proto.RegisterType((*S2CGetTime)(nil), "S2CGetTime")
	proto.RegisterType((*Guide)(nil), "Guide")
	proto.RegisterType((*C2SUpdateGuide)(nil), "C2SUpdateGuide")
	proto.RegisterType((*S2CUpdateGuide)(nil), "S2CUpdateGuide")
	proto.RegisterType((*TaskInfo)(nil), "TaskInfo")
	proto.RegisterType((*C2STaskList)(nil), "C2STaskList")
	proto.RegisterType((*S2CTaskList)(nil), "S2CTaskList")
	proto.RegisterType((*TaskInfoNtf)(nil), "TaskInfoNtf")
	proto.RegisterType((*C2SGetTaskReward)(nil), "C2SGetTaskReward")
	proto.RegisterType((*S2CGetTaskReward)(nil), "S2CGetTaskReward")
	proto.RegisterType((*C2SBuyTask)(nil), "C2SBuyTask")
	proto.RegisterType((*S2CBuyTask)(nil), "S2CBuyTask")
	proto.RegisterType((*WeekTaskInfo)(nil), "WeekTaskInfo")
	proto.RegisterType((*C2SWeekTaskInfo)(nil), "C2SWeekTaskInfo")
	proto.RegisterType((*S2CWeekTaskInfo)(nil), "S2CWeekTaskInfo")
	proto.RegisterType((*WeekTaskInfoNtf)(nil), "WeekTaskInfoNtf")
	proto.RegisterType((*C2SGetWeekTaskReward)(nil), "C2SGetWeekTaskReward")
	proto.RegisterType((*S2CGetWeekTaskReward)(nil), "S2CGetWeekTaskReward")
	proto.RegisterType((*R2LMatchGameOver)(nil), "R2LMatchGameOver")
	proto.RegisterMapType((map[string]*RoomPlayerInfo)(nil), "R2LMatchGameOver.PlayersEntry")
	proto.RegisterType((*L2RMatchGameOver)(nil), "L2RMatchGameOver")
	proto.RegisterType((*R2LBattlePlayerReport)(nil), "R2LBattlePlayerReport")
	proto.RegisterType((*L2RBattlePlayerReport)(nil), "L2RBattlePlayerReport")
	proto.RegisterType((*S2CMatchGameOver)(nil), "S2CMatchGameOver")
	proto.RegisterType((*R2LGameRoundOver)(nil), "R2LGameRoundOver")
	proto.RegisterMapType((map[string]*RoundPlayerInfo)(nil), "R2LGameRoundOver.PlayersEntry")
	proto.RegisterType((*L2RGameRoundOver)(nil), "L2RGameRoundOver")
	proto.RegisterType((*Conn2LOnline)(nil), "Conn2LOnline")
	proto.RegisterType((*SeasonChapter)(nil), "SeasonChapter")
	proto.RegisterType((*C2SSeasonInfo)(nil), "C2SSeasonInfo")
	proto.RegisterType((*S2CSeasonInfo)(nil), "S2CSeasonInfo")
	proto.RegisterType((*SeasonInfoUpdateNtf)(nil), "SeasonInfoUpdateNtf")
	proto.RegisterType((*C2SGetChapterReward)(nil), "C2SGetChapterReward")
	proto.RegisterType((*S2CGetChapterReward)(nil), "S2CGetChapterReward")
	proto.RegisterType((*C2SSeasonPassCard)(nil), "C2SSeasonPassCard")
	proto.RegisterType((*S2CSeasonPassCard)(nil), "S2CSeasonPassCard")
	proto.RegisterType((*SeasonPassCardNtf)(nil), "SeasonPassCardNtf")
	proto.RegisterType((*C2SSeasonPassCardReward)(nil), "C2SSeasonPassCardReward")
	proto.RegisterType((*S2CSeasonPassCardReward)(nil), "S2CSeasonPassCardReward")
	proto.RegisterType((*C2SSeasonPassCardBuyLv)(nil), "C2SSeasonPassCardBuyLv")
	proto.RegisterType((*S2CSeasonPassCardBuyLv)(nil), "S2CSeasonPassCardBuyLv")
	proto.RegisterType((*C2SSetUserInfo)(nil), "C2SSetUserInfo")
	proto.RegisterType((*S2CSetUserInfo)(nil), "S2CSetUserInfo")
	proto.RegisterType((*C2SRankInfo)(nil), "C2SRankInfo")
	proto.RegisterType((*RankInfo)(nil), "RankInfo")
	proto.RegisterType((*S2CRankInfo)(nil), "S2CRankInfo")
	proto.RegisterType((*RankInfoUpdateNtf)(nil), "RankInfoUpdateNtf")
	proto.RegisterType((*C2SRankReward)(nil), "C2SRankReward")
	proto.RegisterType((*S2CRankReward)(nil), "S2CRankReward")
	proto.RegisterType((*FunctionOpenNtf)(nil), "FunctionOpenNtf")
	proto.RegisterType((*MallPack)(nil), "MallPack")
	proto.RegisterType((*ShopItem)(nil), "ShopItem")
	proto.RegisterType((*MallShop)(nil), "MallShop")
	proto.RegisterType((*C2SMall)(nil), "C2SMall")
	proto.RegisterType((*S2CMall)(nil), "S2CMall")
	proto.RegisterType((*C2SRealPay)(nil), "C2SRealPay")
	proto.RegisterType((*S2CRealPay)(nil), "S2CRealPay")
	proto.RegisterType((*S2CRealPayFinish)(nil), "S2CRealPayFinish")
	proto.RegisterType((*C2SGamePay)(nil), "C2SGamePay")
	proto.RegisterType((*S2CGamePay)(nil), "S2CGamePay")
	proto.RegisterType((*C2STakeShopAccumulateAward)(nil), "C2STakeShopAccumulateAward")
	proto.RegisterType((*S2CTakeShopAccumulateAward)(nil), "S2CTakeShopAccumulateAward")
	proto.RegisterType((*P2LPay)(nil), "P2LPay")
	proto.RegisterType((*C2SSetUserDetail)(nil), "C2SSetUserDetail")
	proto.RegisterType((*S2CSetUserDetail)(nil), "S2CSetUserDetail")
	proto.RegisterType((*BattlePlayerReport)(nil), "BattlePlayerReport")
	proto.RegisterType((*BattleReport)(nil), "BattleReport")
	proto.RegisterType((*C2SGetBattleReport)(nil), "C2SGetBattleReport")
	proto.RegisterType((*S2CGetBattleReport)(nil), "S2CGetBattleReport")
	proto.RegisterType((*C2SMailList)(nil), "C2SMailList")
	proto.RegisterType((*S2CMailList)(nil), "S2CMailList")
	proto.RegisterType((*NewMailNtf)(nil), "NewMailNtf")
	proto.RegisterType((*C2SReadMail)(nil), "C2SReadMail")
	proto.RegisterType((*S2CReadMail)(nil), "S2CReadMail")
	proto.RegisterType((*C2SRecvMail)(nil), "C2SRecvMail")
	proto.RegisterType((*S2CRecvMail)(nil), "S2CRecvMail")
	proto.RegisterType((*C2SDelMail)(nil), "C2SDelMail")
	proto.RegisterType((*S2CDelMail)(nil), "S2CDelMail")
	proto.RegisterType((*C2SFindBoundChannel)(nil), "C2SFindBoundChannel")
	proto.RegisterType((*S2CFindBoundChannel)(nil), "S2CFindBoundChannel")
}

func init() { proto.RegisterFile("proto/base/lobby.proto", fileDescriptor_39882c1247f3d5a2) }

var fileDescriptor_39882c1247f3d5a2 = []byte{
	// 3879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3b, 0xcb, 0x92, 0x1b, 0x47,
	0x72, 0x6a, 0x3c, 0x06, 0x40, 0x62, 0x1e, 0x60, 0x0f, 0x1f, 0xd0, 0x48, 0x3b, 0x1c, 0x95, 0x45,
	0x69, 0x96, 0xd2, 0x36, 0xa5, 0xd6, 0x8b, 0xab, 0xdd, 0xb5, 0xc4, 0x01, 0xc9, 0x11, 0x76, 0x87,
	0xd4, 0xa8, 0x31, 0xf4, 0x63, 0x15, 0x6b, 0xb8, 0xa6, 0xbb, 0x06, 0xd3, 0x81, 0x46, 0x37, 0xdc,
	0xdd, 0xc0, 0x10, 0x47, 0x1f, 0x1c, 0xe1, 0xa3, 0x0f, 0x7b, 0x70, 0x84, 0xaf, 0x76, 0xd8, 0xe1,
	0x8b, 0xfd, 0x01, 0xf6, 0xc9, 0xe1, 0x08, 0x1f, 0xf7, 0xe8, 0xe3, 0x06, 0xf9, 0x19, 0xbe, 0x38,
	0x2a, 0xab, 0xaa, 0x1f, 0x00, 0x66, 0x1a, 0x92, 0x78, 0xd8, 0x13, 0xba, 0xb2, 0xb2, 0xb2, 0xf2,
	0x55, 0x99, 0x59, 0x0f, 0xc0, 0xcd, 0x71, 0x18, 0xc4, 0xc1, 0xbd, 0x53, 0x1a, 0xb1, 0x7b, 0x5e,
	0x70, 0x7a, 0x3a, 0x33, 0x10, 0xb0, 0x93, 0x85, 0xb3, 0x30, 0x0c, 0x42, 0x09, 0xbf, 0x95, 0x81,
	0xdb, 0xc1, 0x68, 0x14, 0xf8, 0xa2, 0x83, 0xfc, 0x56, 0x83, 0xed, 0x07, 0xb6, 0x1d, 0x4c, 0xfc,
	0xf8, 0x4f, 0x58, 0xe8, 0x9e, 0xcd, 0x2c, 0x16, 0x4d, 0xbc, 0x58, 0xdf, 0x85, 0x8a, 0x1d, 0x38,
	0xac, 0xad, 0xed, 0x69, 0xfb, 0x9b, 0x26, 0x18, 0x8f, 0x38, 0xb1, 0x4e, 0xe0, 0x30, 0x0b, 0xe1,
	0x7a, 0x0b, 0xca, 0x13, 0xd7, 0x69, 0x97, 0xf6, 0xb4, 0xfd, 0x86, 0xc5, 0x3f, 0xf5, 0x9b, 0xb0,
	0x36, 0x45, 0x0a, 0xed, 0xf2, 0x9e, 0xb6, 0x5f, 0xb5, 0x64, 0x4b, 0xbf, 0x05, 0xb5, 0x41, 0x3f,
	0x0e, 0x86, 0xcc, 0x6f, 0x57, 0x10, 0x7b, 0x6d, 0x70, 0xc2, 0x5b, 0xfa, 0x0e, 0xd4, 0x5d, 0xe7,
	0xe9, 0x64, 0x74, 0xca, 0xc2, 0x76, 0x15, 0x7b, 0x92, 0x36, 0xe9, 0x40, 0xb3, 0x63, 0xf6, 0x2c,
	0x36, 0x70, 0xa3, 0x98, 0x85, 0x7a, 0x1b, 0x6a, 0x54, 0x30, 0x89, 0x0c, 0x35, 0x2c, 0xd5, 0xe4,
	0x44, 0xc6, 0x34, 0x8a, 0x2e, 0x82, 0x50, 0x31, 0x93, 0xb4, 0xc9, 0x27, 0xd0, 0xec, 0x99, 0x9d,
	0x84, 0xc8, 0x3b, 0x50, 0x0e, 0x59, 0x84, 0x04, 0x9a, 0xe6, 0x75, 0x63, 0x89, 0xd4, 0x16, 0x47,
	0x20, 0x5f, 0x42, 0xbd, 0x63, 0xf6, 0x8e, 0x82, 0x81, 0xeb, 0x7f, 0xcf, 0x89, 0x4d, 0xa8, 0xf7,
	0xcc, 0x8e, 0xa0, 0xb0, 0xea, 0xac, 0xdf, 0xc0, 0x46, 0xc7, 0xec, 0x3d, 0x8b, 0x58, 0x28, 0xfa,
	0x94, 0x86, 0xb5, 0x54, 0xc3, 0x3a, 0x54, 0x7c, 0x3a, 0x62, 0x72, 0x3a, 0xfc, 0xce, 0x29, 0xb1,
	0x3c, 0xa7, 0xc4, 0xcf, 0x60, 0xa3, 0x67, 0x76, 0x32, 0x24, 0x57, 0xe5, 0xe5, 0x1a, 0x6c, 0x75,
	0xcc, 0xde, 0x83, 0x49, 0x1c, 0x28, 0xe5, 0x91, 0x00, 0xb6, 0x7a, 0x66, 0x27, 0x0b, 0xfa, 0x7e,
	0xba, 0x51, 0x3c, 0x94, 0x8b, 0x78, 0xf8, 0x67, 0x0d, 0xae, 0x29, 0x33, 0x1c, 0xcc, 0x3a, 0xe7,
	0xd4, 0xf7, 0x99, 0xa7, 0xbf, 0x0b, 0x35, 0x5b, 0x7c, 0x4a, 0xcf, 0xdc, 0x30, 0x10, 0x43, 0xf6,
	0x5b, 0xaa, 0x57, 0xff, 0x00, 0x2a, 0x34, 0x1c, 0x44, 0xed, 0xd2, 0x5e, 0x79, 0xbf, 0x69, 0xbe,
	0x69, 0x2c, 0x90, 0x32, 0x1e, 0x84, 0x83, 0xe8, 0x91, 0x1f, 0x87, 0x33, 0x0b, 0x31, 0x77, 0x3e,
	0x83, 0x46, 0x02, 0xe2, 0xca, 0x1f, 0xb2, 0x99, 0x52, 0xfe, 0x90, 0xcd, 0xf4, 0xeb, 0x50, 0x9d,
	0x52, 0x6f, 0xa2, 0xb4, 0x2f, 0x1a, 0x9f, 0x97, 0xee, 0x6b, 0xe4, 0x67, 0x70, 0x4d, 0x59, 0x3b,
	0x65, 0x74, 0x55, 0x55, 0xff, 0x9b, 0x06, 0x37, 0x3a, 0x66, 0xef, 0xc0, 0xf5, 0x1d, 0x39, 0x54,
	0xa2, 0xae, 0x2e, 0xea, 0xc7, 0x39, 0x51, 0xf7, 0x8c, 0xa5, 0xe4, 0x5e, 0x9d, 0xb8, 0x9f, 0xc1,
	0x8d, 0x9e, 0xd9, 0x59, 0xc2, 0x70, 0x41, 0xc8, 0x20, 0xff, 0xa1, 0x01, 0x70, 0x67, 0x7c, 0x48,
	0x63, 0xea, 0x7a, 0xfa, 0x8f, 0x00, 0x42, 0xe6, 0xf4, 0xc7, 0x81, 0xeb, 0xc7, 0x5c, 0x51, 0xe5,
	0xfd, 0xaa, 0xd5, 0x08, 0x99, 0x73, 0x8c, 0x00, 0xfd, 0x57, 0xd0, 0xb2, 0x69, 0xe8, 0xf4, 0xc7,
	0x21, 0x3b, 0x63, 0x21, 0xf3, 0x6d, 0x96, 0x4a, 0x98, 0x52, 0x31, 0x3a, 0x34, 0x74, 0x8e, 0x53,
	0x14, 0x21, 0xe1, 0x96, 0x9d, 0x87, 0xee, 0x1c, 0xc0, 0xf5, 0x65, 0x88, 0x59, 0xb9, 0xab, 0x4b,
	0xe4, 0xae, 0x66, 0xe5, 0xfe, 0x39, 0x6c, 0xa4, 0xf3, 0x3e, 0x8d, 0xcf, 0xf4, 0xf7, 0x00, 0x26,
	0x1c, 0xc0, 0x38, 0x40, 0x5a, 0xba, 0x99, 0xe1, 0xcd, 0xca, 0x74, 0x93, 0x97, 0x25, 0xa8, 0xf0,
	0xae, 0x15, 0x97, 0x75, 0x0b, 0xca, 0x74, 0xc0, 0x64, 0x24, 0xe5, 0x9f, 0xfa, 0xbb, 0xb0, 0x15,
	0x32, 0xfb, 0x9c, 0x86, 0x03, 0xd6, 0xa7, 0x23, 0x5c, 0x75, 0x15, 0xec, 0xdd, 0x54, 0xe0, 0x07,
	0x08, 0xd5, 0x4d, 0xb8, 0x91, 0x20, 0x86, 0xec, 0x2c, 0x64, 0xd1, 0x79, 0x3f, 0x76, 0x47, 0x0c,
	0x63, 0x6c, 0xd9, 0xda, 0x56, 0x9d, 0x96, 0xe8, 0x3b, 0x71, 0x47, 0x8c, 0xb3, 0x70, 0xce, 0xa8,
	0xd3, 0x5e, 0x43, 0x8a, 0xf8, 0xad, 0xef, 0x02, 0xb0, 0xe7, 0xe3, 0x90, 0x45, 0x91, 0x1b, 0xf8,
	0xed, 0x1a, 0xda, 0x27, 0x03, 0xd1, 0xdf, 0x84, 0xc6, 0x20, 0x64, 0x2c, 0x76, 0xfd, 0x41, 0xd4,
	0xae, 0x0b, 0xf3, 0x25, 0x00, 0x7d, 0x0f, 0x9a, 0x59, 0xcb, 0x35, 0xb0, 0x3f, 0x0b, 0xd2, 0xef,
	0xc0, 0x66, 0x30, 0x66, 0x7e, 0xff, 0x6c, 0xe2, 0xdb, 0xb1, 0x1b, 0xf8, 0x51, 0x1b, 0x10, 0x69,
	0x83, 0x43, 0x1f, 0x2b, 0xe0, 0x9c, 0x96, 0x9b, 0x57, 0x6b, 0xf9, 0x3e, 0x6c, 0x76, 0xcc, 0x9e,
	0x58, 0x65, 0x22, 0xc9, 0x2c, 0xaa, 0xfb, 0x3a, 0x54, 0x45, 0x36, 0x92, 0x9e, 0x8d, 0x0d, 0xf2,
	0xb7, 0x1a, 0x6c, 0xf6, 0xcc, 0x4e, 0x76, 0x68, 0x51, 0x0a, 0x7c, 0x1d, 0x2a, 0x7c, 0x6a, 0xa4,
	0xd3, 0x34, 0xab, 0xc8, 0x93, 0x85, 0x20, 0xfd, 0x0e, 0xc0, 0x60, 0xe2, 0x3a, 0xac, 0x7f, 0xe4,
	0x46, 0x71, 0xbb, 0x8c, 0x6e, 0xbb, 0x66, 0x1c, 0x72, 0x90, 0xd5, 0xc0, 0x1e, 0xde, 0x91, 0xb2,
	0x52, 0xc9, 0xb2, 0xf2, 0x53, 0x8c, 0xbe, 0x16, 0xb3, 0x03, 0xdf, 0x67, 0xa8, 0x85, 0x95, 0xa5,
	0x38, 0xc4, 0x28, 0x9d, 0x1b, 0x5a, 0x24, 0xc5, 0x72, 0x42, 0x7b, 0x00, 0x1d, 0xb3, 0xd7, 0x63,
	0xf1, 0x57, 0xdc, 0x15, 0x94, 0x7b, 0x68, 0xa9, 0x7b, 0x90, 0xf7, 0x01, 0x7a, 0x66, 0x47, 0x61,
	0x14, 0xad, 0xfd, 0x84, 0xde, 0x53, 0x2a, 0xdc, 0x0d, 0x3d, 0x5e, 0x4b, 0x3d, 0x3e, 0xa5, 0x87,
	0x18, 0x45, 0xf4, 0xbe, 0xc0, 0x6c, 0xd9, 0x09, 0x19, 0x8d, 0xd9, 0x43, 0x66, 0x0f, 0x79, 0xca,
	0xe1, 0x8b, 0x1e, 0xf5, 0x2d, 0x62, 0x49, 0xd2, 0x5e, 0xb6, 0xc0, 0xc8, 0x2f, 0x31, 0x37, 0x66,
	0x08, 0xac, 0x60, 0x6d, 0x87, 0xd9, 0xc3, 0xc4, 0xda, 0x7c, 0x90, 0x85, 0x20, 0xf2, 0x0f, 0x9a,
	0xc8, 0xdd, 0x63, 0x47, 0x11, 0xdb, 0x84, 0x92, 0xab, 0xd4, 0x55, 0x72, 0x9d, 0x1c, 0x77, 0xa5,
	0x4b, 0xb8, 0x2b, 0xe7, 0xb3, 0xfa, 0x29, 0xb5, 0x87, 0xbd, 0xa1, 0xeb, 0xcb, 0x55, 0x9e, 0xb4,
	0x79, 0x9d, 0x15, 0xbb, 0xb1, 0xc7, 0x22, 0x5c, 0xd0, 0x55, 0x4b, 0xb6, 0x38, 0x9c, 0x4e, 0x69,
	0x4c, 0x43, 0xb9, 0x8a, 0x65, 0x4b, 0x4a, 0x9a, 0x61, 0xee, 0x07, 0x48, 0xfa, 0x1b, 0x51, 0x18,
	0x8c, 0xc7, 0xde, 0xec, 0x81, 0xe7, 0x29, 0xc5, 0xbf, 0x32, 0x56, 0x4f, 0x44, 0x91, 0x91, 0x25,
	0x5f, 0xc4, 0xec, 0x5b, 0x50, 0xe7, 0x9c, 0x25, 0x9a, 0x4d, 0x18, 0x4e, 0xc0, 0xe4, 0x36, 0x5a,
	0xe7, 0x21, 0xf3, 0xd8, 0x72, 0xeb, 0x70, 0x67, 0xea, 0x99, 0x9d, 0x0c, 0x42, 0xd1, 0xa4, 0x82,
	0x40, 0x29, 0x21, 0xb0, 0x85, 0x33, 0x7c, 0x33, 0x61, 0xe1, 0x8c, 0x8f, 0x8f, 0x88, 0x85, 0x14,
	0x53, 0xc0, 0xab, 0x10, 0xe3, 0x21, 0x5c, 0xe3, 0x39, 0x4c, 0x44, 0xba, 0xae, 0x7f, 0x16, 0xf0,
	0x1c, 0x74, 0x0f, 0x60, 0x82, 0x96, 0xe5, 0x5d, 0x32, 0x07, 0x6d, 0x19, 0x79, 0x3c, 0x2b, 0x83,
	0x42, 0x36, 0xb0, 0xb0, 0xee, 0x48, 0xe7, 0x23, 0x27, 0x58, 0x22, 0xab, 0x66, 0x21, 0x9b, 0x77,
	0xa0, 0xca, 0xfd, 0x56, 0x65, 0xe2, 0x85, 0x99, 0x44, 0x2f, 0x79, 0x8c, 0x61, 0xf8, 0xd9, 0x78,
	0x10, 0x52, 0x07, 0xa7, 0xe5, 0x9b, 0x00, 0xcc, 0xe6, 0x89, 0xde, 0xd7, 0x78, 0xb3, 0xeb, 0xe8,
	0x6f, 0x40, 0x23, 0xe6, 0xd9, 0x28, 0xee, 0x7b, 0x53, 0xa9, 0xd1, 0xba, 0x00, 0x1c, 0x4d, 0xc9,
	0x07, 0x18, 0x93, 0xb3, 0x74, 0x8a, 0xe2, 0xc2, 0x3e, 0x5a, 0xe2, 0xd1, 0x34, 0xf0, 0xa6, 0x57,
	0x4f, 0x4c, 0x3a, 0x68, 0xa2, 0x0c, 0x66, 0x91, 0xec, 0x3a, 0x54, 0x5c, 0x3b, 0xf0, 0x25, 0x93,
	0xf8, 0x4d, 0xbe, 0x50, 0x61, 0xed, 0x6a, 0x21, 0xdb, 0x50, 0xb3, 0x27, 0x61, 0x97, 0x8f, 0x16,
	0x4b, 0x44, 0x35, 0xd3, 0xa8, 0xb7, 0x92, 0x74, 0x06, 0xb4, 0x64, 0x66, 0x18, 0x8d, 0x98, 0xef,
	0xe0, 0x98, 0x2b, 0x02, 0x1f, 0xf9, 0x19, 0xb4, 0x64, 0x3a, 0x48, 0xf1, 0x45, 0x1d, 0x21, 0x00,
	0x7d, 0x61, 0x4c, 0x31, 0x6c, 0x33, 0xcc, 0xe2, 0x45, 0xe4, 0x1e, 0xaa, 0x12, 0x17, 0xe3, 0x13,
	0x1a, 0xdb, 0xe7, 0x9c, 0xbb, 0x51, 0x96, 0x3b, 0x84, 0x3e, 0x41, 0xee, 0x38, 0x9c, 0x0f, 0x50,
	0xab, 0x37, 0x19, 0x70, 0xa5, 0x38, 0x9b, 0xb0, 0xce, 0x8d, 0xf5, 0xdc, 0x8d, 0x11, 0x9f, 0x18,
	0xb0, 0xce, 0x4d, 0xa2, 0xda, 0x85, 0xe3, 0xdf, 0xc2, 0x68, 0xf4, 0x6c, 0x7c, 0x40, 0xe3, 0xd8,
	0x5b, 0xbe, 0xb4, 0x3f, 0xc4, 0x88, 0x92, 0x43, 0x29, 0xa2, 0x7a, 0x1d, 0x74, 0xb5, 0x98, 0xd3,
	0x51, 0xe4, 0x6d, 0xd0, 0xd5, 0x8a, 0x5e, 0x98, 0x2e, 0x0d, 0x04, 0xff, 0xae, 0x41, 0xf3, 0x28,
	0x88, 0x63, 0x16, 0xce, 0xf8, 0x7a, 0xe0, 0x35, 0xae, 0x27, 0x9a, 0xa9, 0x53, 0x34, 0x24, 0xa4,
	0xeb, 0xe8, 0x77, 0xe1, 0xda, 0x20, 0xf0, 0x1c, 0xe6, 0xf7, 0x9d, 0x90, 0x5e, 0x60, 0x95, 0x16,
	0x49, 0x6a, 0x5b, 0xa2, 0xe3, 0x61, 0x48, 0x2f, 0x78, 0x85, 0x16, 0xe9, 0xef, 0x83, 0x3e, 0xa2,
	0x03, 0xd7, 0xa6, 0x5e, 0x16, 0x59, 0x14, 0x88, 0x2d, 0xd9, 0x93, 0x62, 0xef, 0x43, 0x2b, 0x0e,
	0xe2, 0x3c, 0xae, 0x2c, 0x17, 0x11, 0x9e, 0x60, 0x92, 0x16, 0xae, 0x55, 0xc9, 0x34, 0x7a, 0xcd,
	0x7f, 0x89, 0x52, 0x28, 0x03, 0x2a, 0x5c, 0x1b, 0x1d, 0x58, 0x57, 0x72, 0x7a, 0x69, 0x08, 0xdb,
	0x33, 0xf2, 0x64, 0x8c, 0xcc, 0xb7, 0x28, 0xd4, 0x9b, 0x5e, 0x0a, 0xd9, 0x39, 0x82, 0xd6, 0x3c,
	0xc2, 0x92, 0x02, 0x9d, 0x64, 0x0b, 0xf4, 0xa6, 0xb9, 0x6e, 0x64, 0xf4, 0x9d, 0x2d, 0xd7, 0xbf,
	0x02, 0x5d, 0xf6, 0x7c, 0xe5, 0x46, 0x71, 0x10, 0xce, 0x78, 0xb9, 0xc8, 0xab, 0x1d, 0x37, 0x66,
	0x23, 0xe5, 0xf3, 0xa2, 0xc1, 0x4b, 0x59, 0x54, 0x51, 0x4c, 0x47, 0x63, 0xa4, 0x5b, 0xb6, 0x52,
	0x00, 0xf9, 0x14, 0x77, 0x68, 0x79, 0x62, 0xa8, 0x95, 0xab, 0xad, 0x4b, 0x0e, 0x70, 0xa3, 0xb4,
	0x64, 0xdc, 0x8f, 0xa1, 0xea, 0xd0, 0x98, 0x0a, 0x26, 0x9a, 0xe6, 0xb6, 0xb1, 0xc8, 0xa8, 0x25,
	0x30, 0xc8, 0xaf, 0xe1, 0x7a, 0x3a, 0xb7, 0xc5, 0x1c, 0x36, 0x1a, 0x63, 0x55, 0x77, 0x13, 0xd6,
	0xba, 0x31, 0x1b, 0x75, 0xc5, 0xb4, 0x65, 0x4b, 0xb6, 0xb8, 0xbe, 0x9e, 0x4e, 0x46, 0xd2, 0x87,
	0xf8, 0x27, 0x8f, 0x3d, 0xcf, 0x22, 0xc6, 0xbb, 0xd1, 0x59, 0xca, 0x96, 0x6a, 0x92, 0x4f, 0xe1,
	0x7a, 0xca, 0x5f, 0x86, 0x76, 0xd1, 0x02, 0xf9, 0x05, 0x06, 0x3d, 0x39, 0xae, 0xc8, 0xc5, 0x5b,
	0x50, 0xf6, 0x53, 0x86, 0xfc, 0xc9, 0x88, 0xfc, 0x8b, 0x86, 0x31, 0x4f, 0x8d, 0x2f, 0x72, 0xad,
	0x7b, 0xa9, 0x6b, 0xb9, 0xfe, 0x59, 0xb0, 0xd4, 0xec, 0xca, 0x8d, 0xe4, 0x9a, 0xab, 0xb8, 0x42,
	0x5a, 0xae, 0xdc, 0x86, 0x81, 0x9a, 0xe1, 0x58, 0x08, 0xd6, 0xef, 0x82, 0x5a, 0x2d, 0x87, 0x13,
	0x1a, 0x52, 0x3f, 0x66, 0x0c, 0x57, 0x46, 0xdd, 0x5a, 0x80, 0x93, 0x7d, 0xa8, 0xf5, 0xcc, 0x0e,
	0x27, 0x90, 0x50, 0xd5, 0x96, 0x52, 0x95, 0x69, 0x95, 0x03, 0x71, 0x09, 0x3d, 0xc3, 0xb4, 0xaa,
	0x9a, 0x85, 0x32, 0xbe, 0x03, 0x0d, 0x4e, 0x25, 0xbb, 0x76, 0x32, 0x33, 0xd4, 0x5d, 0x45, 0xf6,
	0x4b, 0x68, 0xf4, 0xc6, 0xd4, 0x66, 0xd1, 0xb9, 0x3b, 0xe6, 0xd9, 0x86, 0xff, 0x66, 0xb2, 0x0d,
	0x6f, 0x76, 0xaf, 0x2c, 0x36, 0x89, 0x8e, 0x19, 0x24, 0x21, 0x82, 0x30, 0x86, 0x59, 0x22, 0x07,
	0x2b, 0xe4, 0xf8, 0x43, 0xd8, 0x8c, 0xd4, 0x80, 0x2c, 0xdb, 0x60, 0x24, 0x74, 0xac, 0x8d, 0x28,
	0x37, 0xcd, 0x81, 0x2c, 0x0a, 0x52, 0x09, 0x3e, 0x80, 0x14, 0x85, 0x4b, 0x2a, 0xeb, 0x97, 0xe5,
	0x34, 0x38, 0x02, 0x39, 0x95, 0x05, 0x41, 0x4a, 0xa3, 0x88, 0xd1, 0x85, 0x39, 0x4a, 0x45, 0x73,
	0x3c, 0x86, 0xe6, 0xa3, 0xe7, 0x63, 0x2f, 0x08, 0x71, 0x95, 0x28, 0x07, 0xd6, 0x12, 0x07, 0xd6,
	0xef, 0x40, 0x62, 0x91, 0xab, 0x8c, 0xf5, 0x42, 0x83, 0x9a, 0x24, 0x74, 0xb9, 0xad, 0xde, 0x80,
	0xc6, 0x80, 0x7a, 0xf4, 0x39, 0x2e, 0x1e, 0x59, 0xfe, 0x08, 0x40, 0xd7, 0xe1, 0x4b, 0x2b, 0x8a,
	0x69, 0x18, 0x8b, 0xed, 0xbb, 0x58, 0xbd, 0x0d, 0x84, 0xe0, 0xa6, 0xfd, 0x75, 0xa8, 0xf3, 0x1c,
	0x8e, 0x9d, 0x15, 0xb1, 0xb4, 0x99, 0xef, 0xa8, 0xfd, 0xfc, 0xd9, 0x84, 0x79, 0xb2, 0xec, 0xc6,
	0x6f, 0x3e, 0x15, 0xff, 0x15, 0xf8, 0x6b, 0x88, 0x5f, 0xe7, 0x00, 0x1c, 0xf0, 0x29, 0x6c, 0xb1,
	0x54, 0x68, 0x14, 0xad, 0x86, 0xa2, 0xad, 0x1b, 0x19, 0x65, 0x58, 0xf3, 0x48, 0xf2, 0xa4, 0x10,
	0xd3, 0xa2, 0xc4, 0x23, 0x9f, 0x60, 0xca, 0xcd, 0x82, 0x74, 0x02, 0x35, 0x39, 0x50, 0x9a, 0xb8,
	0xae, 0xa8, 0x5a, 0xaa, 0x83, 0x7c, 0x8b, 0x94, 0x7a, 0x5c, 0xba, 0x1f, 0xa6, 0x35, 0x1d, 0x2a,
	0x89, 0xbe, 0xaa, 0x16, 0x7e, 0x93, 0x67, 0xc8, 0x53, 0x8e, 0x78, 0x91, 0xe3, 0x64, 0x78, 0x2e,
	0x5d, 0xc6, 0xb3, 0xa8, 0xfb, 0x1f, 0xf9, 0x8e, 0x92, 0xbd, 0x27, 0x8a, 0xca, 0x04, 0xf0, 0x4a,
	0x66, 0x59, 0xc7, 0x78, 0x7b, 0xc8, 0xd0, 0xea, 0x64, 0x17, 0xa3, 0xa7, 0x6c, 0xa1, 0x77, 0x06,
	0x17, 0x32, 0x09, 0xf0, 0x4f, 0xf2, 0x53, 0xa8, 0xe2, 0x39, 0x03, 0x77, 0x0f, 0x71, 0x06, 0x91,
	0xa8, 0xaf, 0x86, 0xed, 0xae, 0xa3, 0xdf, 0x80, 0xb5, 0x68, 0x72, 0x9a, 0x2a, 0xaf, 0x1a, 0x4d,
	0x4e, 0xbb, 0x0e, 0x31, 0xe4, 0x0a, 0xe5, 0x9b, 0x05, 0x41, 0xe3, 0x4d, 0xa8, 0xe2, 0x18, 0x69,
	0x36, 0x75, 0x84, 0x21, 0x80, 0xe4, 0xa9, 0x5c, 0x8d, 0x29, 0x7e, 0x91, 0xb8, 0x09, 0xbd, 0xd2,
	0x32, 0x7a, 0x16, 0xd4, 0x4f, 0x68, 0x34, 0xc4, 0x28, 0x7e, 0x0b, 0x6a, 0x31, 0x8d, 0x86, 0x19,
	0xdb, 0xf3, 0xa6, 0x48, 0x28, 0x53, 0xea, 0xa9, 0x84, 0x32, 0xa5, 0xe8, 0xd8, 0x13, 0xdf, 0xfd,
	0xab, 0x09, 0x4a, 0xca, 0xad, 0x5e, 0xb1, 0xea, 0x02, 0xd0, 0x55, 0xfb, 0x1d, 0x4e, 0x16, 0xfd,
	0xf5, 0x5f, 0x35, 0x8c, 0xcc, 0xaa, 0xbd, 0x42, 0x9c, 0xdb, 0x12, 0x6c, 0xf8, 0x67, 0x01, 0xc6,
	0xb9, 0x28, 0x59, 0xf2, 0x8a, 0x55, 0x6b, 0x23, 0x96, 0x5f, 0x9c, 0x62, 0xa4, 0xbf, 0x05, 0xeb,
	0xb9, 0x63, 0x37, 0xb1, 0x6e, 0x9b, 0x61, 0xe6, 0xb8, 0xed, 0x0e, 0x6c, 0x2a, 0x14, 0x3c, 0x3a,
	0x8d, 0xe4, 0xfa, 0xdd, 0x90, 0xd0, 0x0e, 0x02, 0x91, 0x59, 0x35, 0x0b, 0xdf, 0xec, 0xfd, 0x31,
	0xdc, 0x14, 0x3b, 0xb9, 0xfe, 0x3c, 0x4f, 0xda, 0x3c, 0x4f, 0xdb, 0x02, 0xf1, 0x24, 0xc7, 0xd9,
	0x7d, 0xd8, 0x76, 0x78, 0x00, 0x28, 0x12, 0xa8, 0xe5, 0x30, 0xef, 0xe4, 0x3b, 0xca, 0x44, 0xee,
	0x61, 0x66, 0xe1, 0x7e, 0x49, 0xa3, 0xa1, 0xc5, 0x2e, 0xf8, 0x5e, 0x23, 0x67, 0x19, 0x6d, 0xce,
	0x32, 0x26, 0xa6, 0x9d, 0xfc, 0x80, 0xa2, 0xd2, 0x43, 0x2c, 0x85, 0x83, 0xc9, 0x8c, 0x8f, 0x91,
	0x9b, 0x27, 0xd9, 0x2a, 0x1c, 0x1b, 0xc2, 0xfa, 0x9f, 0x32, 0x36, 0x2c, 0xf6, 0xb0, 0xeb, 0x50,
	0x8d, 0x62, 0x3a, 0x60, 0x32, 0x79, 0x8a, 0x86, 0xf2, 0xbb, 0x72, 0xea, 0x77, 0xf3, 0x4a, 0xa9,
	0x2c, 0x2a, 0x45, 0x84, 0xc7, 0xec, 0xb4, 0xe4, 0x37, 0x18, 0x8a, 0x72, 0x9c, 0x14, 0x39, 0xe1,
	0x5d, 0xbe, 0x47, 0x96, 0x36, 0x93, 0x2b, 0x67, 0xc3, 0xc8, 0x52, 0xe0, 0x5b, 0x66, 0x49, 0xfe,
	0x17, 0xb0, 0x95, 0xed, 0xe1, 0x6e, 0xf3, 0x5d, 0x86, 0x7f, 0x88, 0xf5, 0xe6, 0x21, 0x8b, 0x55,
	0xbf, 0x34, 0xcc, 0xeb, 0x50, 0x47, 0x35, 0x64, 0x82, 0x09, 0xb6, 0xbb, 0x8e, 0x2c, 0x23, 0x17,
	0x87, 0x14, 0xd9, 0xe3, 0xa5, 0x06, 0x2d, 0xcb, 0x3c, 0xc2, 0xad, 0xde, 0x21, 0x1d, 0xb1, 0xaf,
	0xa7, 0xe2, 0x4e, 0x69, 0xc4, 0x01, 0x5d, 0x75, 0xd8, 0xa9, 0x9a, 0xbc, 0x46, 0xbf, 0x70, 0x7d,
	0x9f, 0x85, 0xcf, 0x92, 0x6b, 0xc7, 0x14, 0xa0, 0x0e, 0x48, 0xcb, 0xe9, 0x01, 0xe9, 0x7d, 0xa8,
	0x8d, 0x3d, 0x3a, 0x63, 0x21, 0x5f, 0x5c, 0xdc, 0xc1, 0x77, 0x8d, 0xf9, 0xd9, 0x8c, 0x63, 0x81,
	0x20, 0xf6, 0x22, 0x0a, 0x7d, 0xe7, 0x57, 0xb0, 0x9e, 0xed, 0x58, 0x72, 0x39, 0x72, 0x27, 0xbf,
	0x07, 0xd9, 0x32, 0xac, 0x20, 0x18, 0x89, 0x31, 0xf3, 0xdb, 0x90, 0x07, 0xd0, 0x3a, 0x32, 0xad,
	0xbc, 0x90, 0x3f, 0x81, 0x5a, 0xc8, 0xc6, 0x41, 0x98, 0xac, 0xbd, 0x6d, 0x43, 0xec, 0x29, 0x05,
	0x09, 0x0b, 0xfb, 0x2c, 0x85, 0x43, 0xfe, 0x0c, 0x6e, 0x58, 0xe6, 0xd1, 0x22, 0xc6, 0x92, 0x53,
	0xe1, 0xef, 0x48, 0xf9, 0x16, 0xdc, 0x38, 0x32, 0xad, 0x45, 0x0c, 0x12, 0xe1, 0xda, 0xcc, 0x73,
	0xbd, 0x0f, 0x8d, 0xc8, 0xe6, 0xb9, 0x3f, 0x57, 0xa9, 0x29, 0x88, 0x95, 0x76, 0x72, 0xbe, 0x2e,
	0x5c, 0x75, 0x50, 0xc2, 0x3f, 0xf5, 0x3f, 0xe2, 0x7c, 0x5d, 0xe0, 0x61, 0xc3, 0x42, 0x59, 0xae,
	0x7a, 0xc8, 0xef, 0x85, 0x43, 0xf0, 0x09, 0xad, 0x60, 0xe2, 0x3b, 0x05, 0x0e, 0xd1, 0x86, 0x5a,
	0xc8, 0xd1, 0xba, 0x2a, 0x8b, 0xa9, 0xe6, 0xca, 0xce, 0x90, 0x9b, 0xe9, 0x12, 0x67, 0x38, 0x2a,
	0x74, 0x86, 0x77, 0xf2, 0xce, 0xd0, 0x32, 0x90, 0xe4, 0x72, 0x6f, 0xd0, 0xd1, 0x1b, 0x72, 0xf3,
	0x92, 0x3d, 0x58, 0xef, 0x04, 0xbe, 0x6f, 0x1e, 0x7d, 0xed, 0x7b, 0xae, 0xcf, 0x16, 0xad, 0x4a,
	0xfe, 0x53, 0x83, 0x8d, 0x1e, 0xa3, 0x51, 0xe0, 0x77, 0xce, 0xe9, 0x38, 0x66, 0x21, 0xaf, 0x0c,
	0x6d, 0xf1, 0x99, 0xd9, 0x74, 0x49, 0x48, 0xd7, 0xf9, 0x3e, 0x59, 0xeb, 0x2e, 0xb4, 0xce, 0x5c,
	0xdf, 0x8d, 0xce, 0x39, 0x82, 0xc8, 0x3f, 0xea, 0x70, 0x61, 0x1e, 0xae, 0x1b, 0xa0, 0xbb, 0x67,
	0x87, 0x2c, 0x96, 0xdc, 0x88, 0xf5, 0x2e, 0x37, 0x51, 0x4b, 0x7a, 0x64, 0x99, 0x24, 0x24, 0xc0,
	0x28, 0xf3, 0xd7, 0x1a, 0xd6, 0x49, 0x29, 0xa4, 0x30, 0x04, 0xbe, 0x01, 0x8d, 0x08, 0xb1, 0x33,
	0x15, 0x9f, 0x00, 0x74, 0x1d, 0xfd, 0x23, 0xd8, 0x50, 0xda, 0x10, 0xc2, 0x0a, 0x1f, 0xdb, 0x34,
	0x72, 0x4a, 0xb3, 0xd6, 0x25, 0x12, 0x0a, 0x4c, 0x06, 0xb0, 0x9d, 0xce, 0x2f, 0x6a, 0x18, 0x1e,
	0x2c, 0x73, 0x13, 0x69, 0xaf, 0x62, 0xa2, 0x27, 0xb0, 0x2d, 0x42, 0x6a, 0x4e, 0x29, 0x45, 0x26,
	0xcc, 0x64, 0xa7, 0x52, 0x36, 0x3b, 0x91, 0x4f, 0x60, 0x5b, 0x84, 0xdb, 0x3c, 0xb9, 0xa2, 0x68,
	0xbb, 0x8d, 0xb7, 0xe9, 0x82, 0xcf, 0x63, 0x1a, 0x45, 0x78, 0x18, 0xfc, 0xdf, 0x1a, 0x5e, 0x5d,
	0xe7, 0xa1, 0xdc, 0x01, 0xd9, 0xf3, 0xb1, 0xda, 0xf1, 0xb0, 0xe7, 0x63, 0x7d, 0x13, 0x4a, 0xc9,
	0xe9, 0x6c, 0xc9, 0x9b, 0xea, 0x04, 0xd6, 0x27, 0xbe, 0x17, 0xd8, 0xc3, 0x1e, 0xf3, 0xdd, 0x40,
	0x3c, 0x3c, 0xa8, 0x5b, 0x39, 0x98, 0xbe, 0x0b, 0x20, 0x16, 0x36, 0x73, 0x8e, 0xa6, 0xf2, 0xec,
	0x29, 0x03, 0xe1, 0x0e, 0x17, 0x21, 0xa6, 0x95, 0x62, 0x89, 0xed, 0xca, 0x02, 0x3c, 0x11, 0x6e,
	0xed, 0x12, 0xe1, 0xfe, 0x89, 0xcb, 0x91, 0x13, 0x82, 0x9b, 0xf2, 0x0f, 0x4e, 0x0e, 0xf2, 0x09,
	0xdc, 0x5a, 0x30, 0x82, 0xb4, 0xdf, 0x0e, 0xd4, 0xdd, 0x33, 0xc9, 0x86, 0x86, 0x6c, 0x24, 0x6d,
	0xf2, 0x8f, 0x1a, 0xdc, 0x5a, 0x30, 0x53, 0x62, 0xf7, 0x2c, 0x7b, 0xda, 0x4a, 0xec, 0x95, 0x2e,
	0x51, 0x73, 0xc1, 0xc9, 0x89, 0xb2, 0x42, 0xe5, 0xd2, 0xb3, 0xf7, 0x9b, 0x0b, 0xd2, 0x1d, 0x4c,
	0x66, 0x47, 0x53, 0xa9, 0x77, 0x4d, 0xe9, 0x9d, 0xdc, 0x87, 0x9b, 0x0b, 0xf2, 0x08, 0xcc, 0x22,
	0x37, 0x1e, 0xe3, 0x16, 0xa5, 0xc7, 0xe2, 0x67, 0x91, 0x88, 0xae, 0x73, 0xd7, 0xd4, 0xda, 0xd5,
	0xd7, 0xd4, 0xa5, 0x82, 0x6b, 0xea, 0xf2, 0xc2, 0x35, 0xb5, 0xbc, 0x83, 0xc8, 0xcf, 0x78, 0x35,
	0x8f, 0x62, 0xcb, 0x61, 0x51, 0x5f, 0x94, 0x54, 0xbf, 0xd5, 0xa0, 0xae, 0x1a, 0xbc, 0xb6, 0xc4,
	0xcb, 0x0c, 0xa9, 0x0c, 0xd1, 0xc0, 0x54, 0x46, 0xfd, 0xa1, 0xeb, 0x0f, 0x92, 0x54, 0x26, 0x9a,
	0x58, 0x8b, 0xf2, 0xbc, 0x2a, 0x63, 0xb1, 0x68, 0x88, 0xfd, 0x83, 0x30, 0x5b, 0x5f, 0x90, 0x13,
	0x7e, 0xb9, 0xa1, 0xa0, 0x87, 0x48, 0xf6, 0x0d, 0x68, 0x8c, 0xe8, 0x73, 0x89, 0x21, 0x7c, 0xb2,
	0x3e, 0xa2, 0xcf, 0xb1, 0x93, 0x7c, 0x2c, 0x1e, 0x47, 0x29, 0xc6, 0xee, 0x40, 0x3d, 0x94, 0xdf,
	0x32, 0xb9, 0x37, 0x0c, 0xd5, 0x69, 0x25, 0x5d, 0xe4, 0x73, 0xb8, 0xa6, 0xa0, 0x69, 0xcc, 0x5c,
	0x71, 0xac, 0x48, 0x03, 0xbc, 0x43, 0xe6, 0x85, 0xa7, 0x98, 0x05, 0x52, 0x40, 0x61, 0x16, 0x50,
	0x0e, 0x5a, 0x5a, 0x7e, 0x08, 0x67, 0xc2, 0x96, 0x7a, 0x37, 0xf0, 0xf5, 0x98, 0xf9, 0x9c, 0xb5,
	0xdb, 0xd0, 0x54, 0xef, 0x0b, 0x44, 0x98, 0x45, 0xf7, 0x50, 0xa0, 0xae, 0x43, 0xee, 0x43, 0xfd,
	0x09, 0xf5, 0xbc, 0x63, 0xba, 0xe4, 0xd6, 0xf6, 0x4d, 0x68, 0xe0, 0xf6, 0xcc, 0x09, 0x2e, 0x54,
	0x35, 0x93, 0x02, 0xc8, 0xdf, 0x6b, 0x50, 0xef, 0x9d, 0x07, 0x63, 0x3c, 0x25, 0x5a, 0x72, 0xe1,
	0x7b, 0x3a, 0x99, 0x61, 0xbe, 0x54, 0xe9, 0x4a, 0xb5, 0xb9, 0xc7, 0x9e, 0xb9, 0x61, 0x14, 0x1f,
	0x04, 0xfe, 0x24, 0x92, 0x31, 0x27, 0x03, 0xe1, 0x51, 0x89, 0xda, 0xf1, 0x84, 0x7a, 0xf2, 0x84,
	0x57, 0xd8, 0x36, 0x07, 0xcb, 0xb3, 0x56, 0x9d, 0x67, 0xed, 0x5b, 0x21, 0x14, 0xe7, 0x6e, 0x81,
	0xb3, 0x5d, 0x80, 0x41, 0x48, 0x7d, 0xe7, 0x24, 0x88, 0x93, 0x6d, 0x74, 0x06, 0xa2, 0xdf, 0x56,
	0x27, 0xe4, 0x2a, 0x0a, 0x28, 0x19, 0xe5, 0x61, 0x39, 0x69, 0x40, 0xad, 0x63, 0xf6, 0x38, 0x7d,
	0x32, 0xc4, 0xf3, 0x51, 0xfe, 0x59, 0x68, 0xba, 0xdb, 0x50, 0x1d, 0x53, 0x7b, 0x98, 0x16, 0x22,
	0x4a, 0xeb, 0x96, 0x80, 0x73, 0x84, 0xe8, 0x3c, 0x18, 0xa7, 0xf3, 0x2a, 0x09, 0x2c, 0x01, 0x27,
	0x7f, 0x8e, 0x7b, 0x3f, 0x8b, 0x51, 0xef, 0x98, 0xce, 0x74, 0x1d, 0x2a, 0x7c, 0x9c, 0x8c, 0x95,
	0xf8, 0x3d, 0x7f, 0x1b, 0xa3, 0xbf, 0x0b, 0xf5, 0x31, 0x15, 0x2f, 0xb2, 0x50, 0xcd, 0x9b, 0x66,
	0xd3, 0x38, 0xa6, 0xea, 0x89, 0x96, 0x95, 0x74, 0x92, 0x31, 0x6e, 0x24, 0x15, 0xe9, 0x22, 0x51,
	0xda, 0x50, 0x0b, 0x42, 0x87, 0x67, 0x69, 0xb9, 0x0f, 0x51, 0x4d, 0x7d, 0x1f, 0xb6, 0xc6, 0x1e,
	0x8d, 0xcf, 0x82, 0x70, 0x74, 0x18, 0x04, 0x4e, 0xd4, 0x55, 0x45, 0xe8, 0x3c, 0x98, 0x7c, 0x2a,
	0x6f, 0xe6, 0x70, 0xc6, 0xc7, 0x58, 0x60, 0xad, 0x22, 0x12, 0xf9, 0x40, 0x9c, 0x05, 0xd1, 0x11,
	0x5b, 0x51, 0x09, 0x72, 0x93, 0xac, 0x46, 0x14, 0xc5, 0xae, 0xf7, 0x61, 0x07, 0x8f, 0x4b, 0x86,
	0x8c, 0xab, 0xfe, 0x81, 0x6d, 0x4f, 0x46, 0x13, 0x8f, 0xc6, 0xec, 0x01, 0xae, 0xcf, 0x79, 0xda,
	0x3f, 0x87, 0x1d, 0x3c, 0x4c, 0x59, 0x8e, 0x5d, 0x34, 0xd7, 0xc7, 0xb0, 0x76, 0x6c, 0x1e, 0x71,
	0xae, 0x16, 0x37, 0x32, 0x97, 0xea, 0x98, 0x1c, 0x8b, 0x13, 0x6c, 0x11, 0x8f, 0xc5, 0xd5, 0xb3,
	0xfe, 0x36, 0x54, 0xe2, 0xd9, 0x58, 0xcd, 0xd4, 0x32, 0xd2, 0xae, 0x47, 0x53, 0xe6, 0xc7, 0x16,
	0xf6, 0xea, 0x37, 0x41, 0xde, 0xc7, 0xaa, 0x8a, 0x4a, 0xde, 0x04, 0xff, 0x8d, 0x26, 0x0e, 0xc0,
	0x73, 0x24, 0x8b, 0x9c, 0x40, 0x4d, 0x59, 0xba, 0x72, 0xca, 0xf7, 0xd4, 0xf5, 0xfc, 0x43, 0x1a,
	0x53, 0xf9, 0xe6, 0x71, 0xee, 0xf1, 0x52, 0xd2, 0x4d, 0xfe, 0x4f, 0x03, 0x7d, 0xa5, 0x5d, 0xde,
	0xb2, 0x07, 0x63, 0xef, 0x01, 0x44, 0x49, 0x39, 0x9b, 0xcc, 0x94, 0x56, 0xb8, 0x56, 0xa6, 0x5b,
	0xff, 0x08, 0x36, 0x3d, 0x1a, 0xc5, 0x69, 0x2f, 0xc6, 0x98, 0xb9, 0x01, 0x73, 0x28, 0xc9, 0x23,
	0xa0, 0x6a, 0xe6, 0x8d, 0xd8, 0x87, 0xd0, 0xb4, 0x93, 0x17, 0x00, 0x51, 0x7b, 0x6d, 0xf9, 0xab,
	0x80, 0x2c, 0x0e, 0xb7, 0x42, 0x88, 0xef, 0x1f, 0xdb, 0x35, 0x61, 0x05, 0xd1, 0x22, 0xdf, 0xc2,
	0xba, 0x10, 0x5e, 0x8a, 0xfd, 0x93, 0x74, 0xcb, 0xa6, 0x5d, 0xb1, 0x95, 0x95, 0x38, 0x05, 0x57,
	0x78, 0xe2, 0x4e, 0xf7, 0x90, 0xc5, 0xd9, 0x29, 0xc8, 0x2f, 0xf1, 0x4e, 0x77, 0x0e, 0xaa, 0x7f,
	0x0c, 0x9b, 0xa7, 0xd8, 0xee, 0xab, 0xad, 0xb4, 0x98, 0x7f, 0xc3, 0xc8, 0xa2, 0x59, 0x1b, 0xa7,
	0x99, 0x56, 0x24, 0x93, 0xfe, 0x13, 0xea, 0x7a, 0x78, 0xce, 0xf8, 0x39, 0x66, 0x57, 0xd5, 0xd4,
	0xdf, 0x83, 0xe6, 0x88, 0xba, 0x5e, 0xff, 0x34, 0x74, 0xd9, 0x99, 0x22, 0x08, 0x06, 0xef, 0x3f,
	0xe0, 0x20, 0x0b, 0x46, 0xea, 0x93, 0x57, 0x1c, 0xf0, 0x94, 0x5d, 0x3c, 0x91, 0xaf, 0x0c, 0x09,
	0x34, 0x7c, 0x76, 0xd1, 0x1f, 0xa1, 0x82, 0x35, 0xf9, 0x34, 0x84, 0x77, 0x5a, 0x75, 0x5f, 0x60,
	0x45, 0xe4, 0x4b, 0xf9, 0x5a, 0x9a, 0x3a, 0xbc, 0xcd, 0xf7, 0x0e, 0x38, 0x9b, 0x9b, 0xdc, 0x0e,
	0xf2, 0xa6, 0xd8, 0x32, 0x53, 0xcf, 0xe3, 0x78, 0xa8, 0xa2, 0xba, 0xa5, 0x9a, 0xe4, 0x1b, 0xf9,
	0x54, 0x5a, 0x52, 0x28, 0x3e, 0xb6, 0x6e, 0x84, 0x8c, 0x3a, 0xc8, 0x55, 0xf2, 0x5e, 0x45, 0x30,
	0x15, 0x4a, 0x1a, 0xe4, 0x0b, 0xc9, 0x94, 0x3d, 0x45, 0x92, 0x37, 0x41, 0x72, 0x71, 0x09, 0x4f,
	0xf6, 0x34, 0xc7, 0x93, 0x3d, 0x25, 0x81, 0xe4, 0x49, 0x12, 0x58, 0xe1, 0x09, 0x4d, 0x28, 0x71,
	0x17, 0x58, 0x92, 0x24, 0xae, 0x2e, 0x70, 0xc9, 0xdb, 0x18, 0x5c, 0x1f, 0x32, 0xef, 0x2a, 0x86,
	0xc9, 0xd7, 0x18, 0x50, 0x15, 0xd6, 0x1e, 0x54, 0xf1, 0x9d, 0xfd, 0x12, 0xb6, 0x44, 0x87, 0x7e,
	0x1b, 0x6a, 0x8e, 0x40, 0xce, 0xb3, 0xa5, 0xa0, 0xe4, 0x06, 0x6e, 0x10, 0x1f, 0xbb, 0xbe, 0x73,
	0x10, 0x4c, 0x92, 0x57, 0xb5, 0xe4, 0x2f, 0x71, 0xa3, 0x37, 0x0f, 0x2e, 0x54, 0xc3, 0x8f, 0xa1,
	0x2e, 0x1f, 0x06, 0x8b, 0x5c, 0xbb, 0xf0, 0x6e, 0x38, 0xe9, 0xbe, 0xfb, 0x58, 0x9c, 0xb7, 0x9f,
	0xf0, 0x48, 0x75, 0x0d, 0x36, 0xd4, 0x77, 0xff, 0x69, 0xe0, 0xb3, 0xd6, 0x6b, 0xba, 0x0e, 0x9b,
	0x09, 0xe8, 0x21, 0x75, 0xbd, 0x59, 0x4b, 0xd3, 0xb7, 0x61, 0x2b, 0x81, 0x89, 0xd8, 0xd0, 0x2a,
	0xdf, 0xfd, 0x0b, 0xd8, 0x9a, 0x0b, 0x7f, 0x1c, 0x2f, 0x05, 0x29, 0x82, 0xb7, 0x60, 0x3b, 0x03,
	0xb4, 0xe4, 0x53, 0xdf, 0x96, 0xa6, 0xff, 0x08, 0x5e, 0xcf, 0x74, 0xe4, 0x5f, 0xea, 0xb6, 0x4a,
	0x07, 0xdd, 0xff, 0x79, 0xb1, 0xab, 0xfd, 0xee, 0xc5, 0xae, 0xf6, 0xfb, 0x17, 0xbb, 0xda, 0xdf,
	0xbd, 0xdc, 0x7d, 0xed, 0x77, 0x2f, 0x77, 0x5f, 0xfb, 0xdf, 0x97, 0xbb, 0xaf, 0xc1, 0x6d, 0x3b,
	0x18, 0x19, 0xd1, 0xf9, 0x24, 0xa2, 0xfe, 0xc0, 0x88, 0xed, 0x81, 0xf8, 0x53, 0x83, 0x1d, 0x78,
	0x86, 0xed, 0xb9, 0xcc, 0x8f, 0x8f, 0xb5, 0x5f, 0xaf, 0x77, 0x3a, 0x87, 0x3d, 0x16, 0x4e, 0x59,
	0x78, 0x6f, 0x7c, 0x7a, 0xba, 0x86, 0x08, 0x1f, 0xfd, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6,
	0x6d, 0x52, 0x7b, 0x40, 0x31, 0x00, 0x00,
}

func (m *AccountVerifyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountVerifyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountVerifyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IdNumber) > 0 {
		i -= len(m.IdNumber)
		copy(dAtA[i:], m.IdNumber)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.IdNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GToken) > 0 {
		i -= len(m.GToken)
		copy(dAtA[i:], m.GToken)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.GToken)))
		i--
		dAtA[i] = 0x22
	}
	if m.Verify != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Verify))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SUserVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUserVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SUserVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IdNumber) > 0 {
		i -= len(m.IdNumber)
		copy(dAtA[i:], m.IdNumber)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.IdNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CUserVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUserVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CUserVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SAutoRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SAutoRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SAutoRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CAutoRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAutoRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CAutoRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SLoginByChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLoginByChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SLoginByChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintLobby(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLobby(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLobby(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Channel != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CLoginByChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLoginByChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CLoginByChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SBindChannelAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBindChannelAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SBindChannelAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintLobby(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLobby(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLobby(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Channel != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CBindChannelAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBindChannelAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CBindChannelAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserDatail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDatail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDatail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardPreferences) > 0 {
		for k := range m.CardPreferences {
			v := m.CardPreferences[k]
			baseI := i
			i = encodeVarintLobby(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintLobby(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLobby(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RedPoints) > 0 {
		dAtA7 := make([]byte, len(m.RedPoints)*10)
		var j6 int
		for _, num1 := range m.RedPoints {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintLobby(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserDatailNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDatailNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDatailNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserDetail != nil {
		{
			size, err := m.UserDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserDetail != nil {
		{
			size, err := m.UserDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.OpenFunctions) > 0 {
		dAtA11 := make([]byte, len(m.OpenFunctions)*10)
		var j10 int
		for _, num1 := range m.OpenFunctions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintLobby(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Preferences) > 0 {
		dAtA13 := make([]byte, len(m.Preferences)*10)
		var j12 int
		for _, num1 := range m.Preferences {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintLobby(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Greetings) > 0 {
		dAtA15 := make([]byte, len(m.Greetings)*10)
		var j14 int
		for _, num1 := range m.Greetings {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintLobby(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Expression) > 0 {
		dAtA17 := make([]byte, len(m.Expression)*10)
		var j16 int
		for _, num1 := range m.Expression {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintLobby(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x3a
	}
	if m.Head != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Head))
		i--
		dAtA[i] = 0x30
	}
	if m.RechargeRefreshTime != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RechargeRefreshTime))
		i--
		dAtA[i] = 0x28
	}
	if m.RechargeAmount != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RechargeAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.Age != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SVerifyToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SVerifyToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SVerifyToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CVerifyToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVerifyToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CVerifyToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Guide_List) > 0 {
		for iNdEx := len(m.Guide_List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Guide_List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SReconnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SReconnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SReconnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CReconnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReconnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CReconnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSetHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSetHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Head != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Head))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CSetHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSetHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSetName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSetName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CSetName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSetName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SCreateDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SCreateDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CardList) > 0 {
		dAtA20 := make([]byte, len(m.CardList)*10)
		var j19 int
		for _, num1 := range m.CardList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintLobby(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CCreateDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CCreateDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deck != nil {
		{
			size, err := m.Deck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SUpdateDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SUpdateDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avatar != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Avatar))
		i--
		dAtA[i] = 0x30
	}
	if m.Titles != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Titles))
		i--
		dAtA[i] = 0x28
	}
	if m.BackSkin != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.BackSkin))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CardList) > 0 {
		dAtA23 := make([]byte, len(m.CardList)*10)
		var j22 int
		for _, num1 := range m.CardList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintLobby(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CUpdateDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CUpdateDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deck != nil {
		{
			size, err := m.Deck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SApplyAllDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SApplyAllDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SApplyAllDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avatar != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Avatar))
		i--
		dAtA[i] = 0x30
	}
	if m.Titles != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Titles))
		i--
		dAtA[i] = 0x28
	}
	if m.BackSkin != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.BackSkin))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *S2CApplyAllDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CApplyAllDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CApplyAllDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeckList) > 0 {
		for iNdEx := len(m.DeckList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeckList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SDeleteDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SDeleteDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SDeleteDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CDeleteDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CDeleteDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CDeleteDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SQueryDecks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SQueryDecks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SQueryDecks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CQueryDecks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CQueryDecks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CQueryDecks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeckList) > 0 {
		for iNdEx := len(m.DeckList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeckList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardDetailInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardDetailInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardDetailInfoNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateCard != nil {
		{
			size, err := m.UpdateCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SCardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCardList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SCardList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CCardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCardList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CCardList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for iNdEx := len(m.Cards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SUpgradeCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SUpgradeCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetLv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.TargetLv))
		i--
		dAtA[i] = 0x10
	}
	if m.CardId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CUpgradeCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CUpgradeCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SEvolveCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SEvolveCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SEvolveCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CEvolveCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CEvolveCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CEvolveCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Icon != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Icon))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSetCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSetCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurIcon != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.CurIcon))
		i--
		dAtA[i] = 0x20
	}
	if m.CardId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CSetCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSetCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SRecommendCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRecommendCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SRecommendCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardList) > 0 {
		dAtA27 := make([]byte, len(m.CardList)*10)
		var j26 int
		for _, num1 := range m.CardList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		i -= j26
		copy(dAtA[i:], dAtA27[:j26])
		i = encodeVarintLobby(dAtA, i, uint64(j26))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CRecommendCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecommendCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CRecommendCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecommendCards) > 0 {
		dAtA29 := make([]byte, len(m.RecommendCards)*10)
		var j28 int
		for _, num1 := range m.RecommendCards {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		i -= j28
		copy(dAtA[i:], dAtA29[:j28])
		i = encodeVarintLobby(dAtA, i, uint64(j28))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SApplyMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SApplyMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SApplyMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CApplyMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CApplyMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CApplyMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SExitMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SExitMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SExitMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CExitMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CExitMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CExitMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SUpBattleDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpBattleDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SUpBattleDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CUpBattleDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpBattleDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CUpBattleDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SQueryBattleDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SQueryBattleDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SQueryBattleDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CQueryBattleDeck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CQueryBattleDeck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CQueryBattleDeck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *LotteryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDrawTimes != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.TotalDrawTimes))
		i--
		dAtA[i] = 0x20
	}
	if m.MagicalDrawTimes != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.MagicalDrawTimes))
		i--
		dAtA[i] = 0x18
	}
	if m.GoldenDrawTimes != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.GoldenDrawTimes))
		i--
		dAtA[i] = 0x10
	}
	if m.LotteryId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.LotteryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SLotteryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLotteryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SLotteryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CLotteryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLotteryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CLotteryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LotteryList) > 0 {
		for k := range m.LotteryList {
			v := m.LotteryList[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLobby(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintLobby(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLobby(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LotteryHistoryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryHistoryData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryHistoryData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		dAtA32 := make([]byte, len(m.Items)*10)
		var j31 int
		for _, num1 := range m.Items {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintLobby(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SLotteryHistoryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLotteryHistoryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SLotteryHistoryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LotteryId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.LotteryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CLotteryHistoryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLotteryHistoryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CLotteryHistoryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2SLotteryRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLotteryRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SLotteryRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseItem != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.UseItem))
		i--
		dAtA[i] = 0x18
	}
	if m.Num != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CLotteryRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLotteryRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CLotteryRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SLottery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLottery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SLottery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.LotteryId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.LotteryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CLottery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLottery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CLottery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicalGuarantee {
		i--
		if m.MagicalGuarantee {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LotteryInfo != nil {
		{
			size, err := m.LotteryInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2SItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Spaceship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Spaceship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Spaceship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardList) > 0 {
		dAtA35 := make([]byte, len(m.CardList)*10)
		var j34 int
		for _, num1 := range m.CardList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		i -= j34
		copy(dAtA[i:], dAtA35[:j34])
		i = encodeVarintLobby(dAtA, i, uint64(j34))
		i--
		dAtA[i] = 0x12
	}
	if m.ShipId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.ShipId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSpaceshipList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSpaceshipList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSpaceshipList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CSpaceshipList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSpaceshipList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSpaceshipList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpaceshipList) > 0 {
		for iNdEx := len(m.SpaceshipList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpaceshipList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SUpSpaceship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpSpaceship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SUpSpaceship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpaceshipInfo != nil {
		{
			size, err := m.SpaceshipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CUpSpaceship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpSpaceship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CUpSpaceship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpaceshipInfo != nil {
		{
			size, err := m.SpaceshipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExploreItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExploreItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExploreItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Num != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Explore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Explore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Explore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExploreItemList) > 0 {
		for iNdEx := len(m.ExploreItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExploreItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FuelTime != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.FuelTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Fuel != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Fuel))
		i--
		dAtA[i] = 0x28
	}
	if m.EndTime != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.GalaxyId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.GalaxyId))
		i--
		dAtA[i] = 0x10
	}
	if m.ShipId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.ShipId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SQueryExplore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SQueryExplore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SQueryExplore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CQueryExplore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CQueryExplore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CQueryExplore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Explore != nil {
		{
			size, err := m.Explore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SStartExplore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SStartExplore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SStartExplore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if m.GalaxyId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.GalaxyId))
		i--
		dAtA[i] = 0x10
	}
	if m.ShipId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.ShipId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CStartExplore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CStartExplore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CStartExplore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Explore != nil {
		{
			size, err := m.Explore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SEndExplore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SEndExplore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SEndExplore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CEndExplore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CEndExplore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CEndExplore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Explore != nil {
		{
			size, err := m.Explore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SGetTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SGetTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CGetTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGetTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Now != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Now))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Guide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.SubId))
		i--
		dAtA[i] = 0x10
	}
	if m.GuideId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.GuideId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SUpdateGuide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateGuide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SUpdateGuide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Guide != nil {
		{
			size, err := m.Guide.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CUpdateGuide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateGuide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CUpdateGuide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Guide != nil {
		{
			size, err := m.Guide.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x18
	}
	if m.Val != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Val))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2STaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2STaskList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2STaskList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CTaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTaskList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CTaskList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefreshCounts != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RefreshCounts))
		i--
		dAtA[i] = 0x20
	}
	if m.RefreshTime != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RefreshTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskInfoLists) > 0 {
		for iNdEx := len(m.TaskInfoLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskInfoLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskInfoNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefreshTime != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RefreshTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DelTaskInfoLists) > 0 {
		for iNdEx := len(m.DelTaskInfoLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelTaskInfoLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UpdateTaskInfoLists) > 0 {
		for iNdEx := len(m.UpdateTaskInfoLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateTaskInfoLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2SGetTaskReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetTaskReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SGetTaskReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CGetTaskReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetTaskReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGetTaskReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SBuyTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBuyTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SBuyTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CBuyTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuyTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CBuyTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeekTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeekTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeekTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefreshTime != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RefreshTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Val != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Val))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Stage) > 0 {
		dAtA44 := make([]byte, len(m.Stage)*10)
		var j43 int
		for _, num1 := range m.Stage {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA44[j43] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j43++
			}
			dAtA44[j43] = uint8(num)
			j43++
		}
		i -= j43
		copy(dAtA[i:], dAtA44[:j43])
		i = encodeVarintLobby(dAtA, i, uint64(j43))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SWeekTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWeekTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SWeekTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CWeekTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWeekTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CWeekTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskInfo != nil {
		{
			size, err := m.TaskInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeekTaskInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeekTaskInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeekTaskInfoNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskInfo != nil {
		{
			size, err := m.TaskInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *C2SGetWeekTaskReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetWeekTaskReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SGetWeekTaskReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.StageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CGetWeekTaskReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetWeekTaskReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGetWeekTaskReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *R2LMatchGameOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *R2LMatchGameOver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *R2LMatchGameOver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for k := range m.Players {
			v := m.Players[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLobby(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLobby(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLobby(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WinnerUid) > 0 {
		i -= len(m.WinnerUid)
		copy(dAtA[i:], m.WinnerUid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.WinnerUid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MatchId) > 0 {
		i -= len(m.MatchId)
		copy(dAtA[i:], m.MatchId)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.MatchId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *L2RMatchGameOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L2RMatchGameOver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L2RMatchGameOver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *R2LBattlePlayerReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *R2LBattlePlayerReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *R2LBattlePlayerReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *L2RBattlePlayerReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L2RBattlePlayerReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L2RBattlePlayerReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CMatchGameOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMatchGameOver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CMatchGameOver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Win != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Win))
		i--
		dAtA[i] = 0x10
	}
	if m.ScoreInfo != nil {
		{
			size, err := m.ScoreInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *R2LGameRoundOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *R2LGameRoundOver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *R2LGameRoundOver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for k := range m.Players {
			v := m.Players[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLobby(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLobby(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLobby(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RoundId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MatchId) > 0 {
		i -= len(m.MatchId)
		copy(dAtA[i:], m.MatchId)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.MatchId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *L2RGameRoundOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L2RGameRoundOver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L2RGameRoundOver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Conn2LOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conn2LOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Conn2LOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChapter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChapter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChapter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IfGetChapterReward {
		i--
		if m.IfGetChapterReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FinishTaskCounts != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.FinishTaskCounts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskInfoLists) > 0 {
		for iNdEx := len(m.TaskInfoLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskInfoLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ChapterId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.ChapterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSeasonInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSeasonInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSeasonInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CSeasonInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSeasonInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSeasonInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChapterLists) > 0 {
		for iNdEx := len(m.ChapterLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChapterLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SeasonId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonInfoUpdateNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonInfoUpdateNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonInfoUpdateNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChapterLists) > 0 {
		for iNdEx := len(m.ChapterLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChapterLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SeasonId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SGetChapterReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetChapterReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SGetChapterReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChapterId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.ChapterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CGetChapterReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetChapterReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGetChapterReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSeasonPassCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSeasonPassCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSeasonPassCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CSeasonPassCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSeasonPassCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSeasonPassCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x30
	}
	if m.SeniorRewardedLv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.SeniorRewardedLv))
		i--
		dAtA[i] = 0x28
	}
	if m.RewardedLv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RewardedLv))
		i--
		dAtA[i] = 0x20
	}
	if m.UnlockSenior {
		i--
		if m.UnlockSenior {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Lv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Lv))
		i--
		dAtA[i] = 0x10
	}
	if m.Exp != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonPassCardNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonPassCardNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonPassCardNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeniorRewardedLv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.SeniorRewardedLv))
		i--
		dAtA[i] = 0x28
	}
	if m.RewardedLv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RewardedLv))
		i--
		dAtA[i] = 0x20
	}
	if m.UnlockSenior {
		i--
		if m.UnlockSenior {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Lv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Lv))
		i--
		dAtA[i] = 0x10
	}
	if m.Exp != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSeasonPassCardReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSeasonPassCardReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSeasonPassCardReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IfSenior {
		i--
		if m.IfSenior {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CSeasonPassCardReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSeasonPassCardReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSeasonPassCardReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SeniorRewardedLv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.SeniorRewardedLv))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardedLv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RewardedLv))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSeasonPassCardBuyLv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSeasonPassCardBuyLv) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSeasonPassCardBuyLv) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lv != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Lv))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CSeasonPassCardBuyLv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSeasonPassCardBuyLv) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSeasonPassCardBuyLv) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SSetUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSetUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Preferences) > 0 {
		dAtA51 := make([]byte, len(m.Preferences)*10)
		var j50 int
		for _, num1 := range m.Preferences {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA51[j50] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j50++
			}
			dAtA51[j50] = uint8(num)
			j50++
		}
		i -= j50
		copy(dAtA[i:], dAtA51[:j50])
		i = encodeVarintLobby(dAtA, i, uint64(j50))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Greetings) > 0 {
		dAtA53 := make([]byte, len(m.Greetings)*10)
		var j52 int
		for _, num1 := range m.Greetings {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA53[j52] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j52++
			}
			dAtA53[j52] = uint8(num)
			j52++
		}
		i -= j52
		copy(dAtA[i:], dAtA53[:j52])
		i = encodeVarintLobby(dAtA, i, uint64(j52))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Expression) > 0 {
		dAtA55 := make([]byte, len(m.Expression)*10)
		var j54 int
		for _, num1 := range m.Expression {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA55[j54] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j54++
			}
			dAtA55[j54] = uint8(num)
			j54++
		}
		i -= j54
		copy(dAtA[i:], dAtA55[:j54])
		i = encodeVarintLobby(dAtA, i, uint64(j54))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CSetUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSetUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxGrade != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.MaxGrade))
		i--
		dAtA[i] = 0x28
	}
	if m.RewardedGrade != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.RewardedGrade))
		i--
		dAtA[i] = 0x20
	}
	if m.Score != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if m.Ranking != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Ranking))
		i--
		dAtA[i] = 0x10
	}
	if m.Grade != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Grade))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RankInfo != nil {
		{
			size, err := m.RankInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankInfoUpdateNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankInfoUpdateNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankInfoUpdateNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RankInfo != nil {
		{
			size, err := m.RankInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SRankReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRankReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SRankReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CRankReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRankReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CRankReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FunctionOpenNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionOpenNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionOpenNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FunctionId) > 0 {
		dAtA59 := make([]byte, len(m.FunctionId)*10)
		var j58 int
		for _, num1 := range m.FunctionId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA59[j58] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j58++
			}
			dAtA59[j58] = uint8(num)
			j58++
		}
		i -= j58
		copy(dAtA[i:], dAtA59[:j58])
		i = encodeVarintLobby(dAtA, i, uint64(j58))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MallPack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MallPack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MallPack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Countdown != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Countdown))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShopItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShopItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Countdown != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Countdown))
		i--
		dAtA[i] = 0x28
	}
	if m.ActualItemId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.ActualItemId))
		i--
		dAtA[i] = 0x20
	}
	if m.FirstBonus {
		i--
		if m.FirstBonus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BuyCount != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.BuyCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MallShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MallShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MallShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.GrandTotal != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.GrandTotal))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SMall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SMall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CMall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CMall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shops) > 0 {
		for iNdEx := len(m.Shops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Packs) > 0 {
		for iNdEx := len(m.Packs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SRealPay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRealPay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SRealPay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayChann != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.PayChann))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Pack {
		i--
		if m.Pack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CRealPay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRealPay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CRealPay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlatformGoodsId) > 0 {
		i -= len(m.PlatformGoodsId)
		copy(dAtA[i:], m.PlatformGoodsId)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.PlatformGoodsId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CRealPayFinish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRealPayFinish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CRealPayFinish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Pack {
		i--
		if m.Pack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SGamePay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGamePay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SGamePay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Pack {
		i--
		if m.Pack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CGamePay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGamePay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGamePay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2STakeShopAccumulateAward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2STakeShopAccumulateAward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2STakeShopAccumulateAward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *S2CTakeShopAccumulateAward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTakeShopAccumulateAward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CTakeShopAccumulateAward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *P2LPay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2LPay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *P2LPay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2SSetUserDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetUserDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SSetUserDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CSetUserDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetUserDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CSetUserDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateData != nil {
		{
			size, err := m.UpdateData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattlePlayerReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattlePlayerReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattlePlayerReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CardDetails) > 0 {
		for iNdEx := len(m.CardDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CardDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Head != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Head))
		i--
		dAtA[i] = 0x28
	}
	if m.LastSeasonInfo != nil {
		{
			size, err := m.LastSeasonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SeasonInfo != nil {
		{
			size, err := m.SeasonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobby(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BattleReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2SGetBattleReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetBattleReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SGetBattleReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CGetBattleReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetBattleReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGetBattleReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BattleReports) > 0 {
		for iNdEx := len(m.BattleReports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BattleReports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2SMailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMailList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SMailList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CMailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMailList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CMailList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MailBriefs) > 0 {
		for iNdEx := len(m.MailBriefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MailBriefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewMailNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewMailNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewMailNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewMails) > 0 {
		for iNdEx := len(m.NewMails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewMails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2SReadMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SReadMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SReadMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllRead {
		i--
		if m.AllRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.MailId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CReadMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReadMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CReadMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReadMail) > 0 {
		for iNdEx := len(m.ReadMail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReadMail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SRecvMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRecvMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SRecvMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllRecv {
		i--
		if m.AllRecv {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.MailId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CRecvMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecvMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CRecvMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RecvMail) > 0 {
		for iNdEx := len(m.RecvMail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecvMail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SDelMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SDelMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SDelMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MailId != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CDelMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CDelMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CDelMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelMail) > 0 {
		for iNdEx := len(m.DelMail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelMail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobby(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SFindBoundChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SFindBoundChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SFindBoundChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2CFindBoundChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFindBoundChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CFindBoundChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		dAtA64 := make([]byte, len(m.Channels)*10)
		var j63 int
		for _, num := range m.Channels {
			for num >= 1<<7 {
				dAtA64[j63] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j63++
			}
			dAtA64[j63] = uint8(num)
			j63++
		}
		i -= j63
		copy(dAtA[i:], dAtA64[:j63])
		i = encodeVarintLobby(dAtA, i, uint64(j63))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintLobby(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLobby(dAtA []byte, offset int, v uint64) int {
	offset -= sovLobby(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountVerifyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.Verify != 0 {
		n += 1 + sovLobby(uint64(m.Verify))
	}
	l = len(m.GToken)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.IdNumber)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SUserVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.IdNumber)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CUserVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SAutoRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CAutoRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SLoginByChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovLobby(uint64(m.Channel))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovLobby(uint64(len(k))) + 1 + len(v) + sovLobby(uint64(len(v)))
			n += mapEntrySize + 1 + sovLobby(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *S2CLoginByChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SBindChannelAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovLobby(uint64(m.Channel))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovLobby(uint64(len(k))) + 1 + len(v) + sovLobby(uint64(len(v)))
			n += mapEntrySize + 1 + sovLobby(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *S2CBindChannelAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *UserDatail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedPoints) > 0 {
		l = 0
		for _, e := range m.RedPoints {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if len(m.CardPreferences) > 0 {
		for k, v := range m.CardPreferences {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLobby(uint64(k)) + 1 + sovLobby(uint64(v))
			n += mapEntrySize + 1 + sovLobby(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UserDatailNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDetail != nil {
		l = m.UserDetail.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovLobby(uint64(m.Age))
	}
	if m.RechargeAmount != 0 {
		n += 1 + sovLobby(uint64(m.RechargeAmount))
	}
	if m.RechargeRefreshTime != 0 {
		n += 1 + sovLobby(uint64(m.RechargeRefreshTime))
	}
	if m.Head != 0 {
		n += 1 + sovLobby(uint64(m.Head))
	}
	if len(m.Expression) > 0 {
		l = 0
		for _, e := range m.Expression {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if len(m.Greetings) > 0 {
		l = 0
		for _, e := range m.Greetings {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if len(m.Preferences) > 0 {
		l = 0
		for _, e := range m.Preferences {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if len(m.OpenFunctions) > 0 {
		l = 0
		for _, e := range m.OpenFunctions {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if m.UserDetail != nil {
		l = m.UserDetail.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SVerifyToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CVerifyToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	if len(m.Guide_List) > 0 {
		for _, e := range m.Guide_List {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SReconnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CReconnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SSetHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != 0 {
		n += 1 + sovLobby(uint64(m.Head))
	}
	return n
}

func (m *S2CSetHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SSetName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CSetName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SCreateDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CardList) > 0 {
		l = 0
		for _, e := range m.CardList {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CCreateDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.Deck != nil {
		l = m.Deck.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SUpdateDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	if len(m.CardList) > 0 {
		l = 0
		for _, e := range m.CardList {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.BackSkin != 0 {
		n += 1 + sovLobby(uint64(m.BackSkin))
	}
	if m.Titles != 0 {
		n += 1 + sovLobby(uint64(m.Titles))
	}
	if m.Avatar != 0 {
		n += 1 + sovLobby(uint64(m.Avatar))
	}
	return n
}

func (m *S2CUpdateDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.Deck != nil {
		l = m.Deck.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SApplyAllDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackSkin != 0 {
		n += 1 + sovLobby(uint64(m.BackSkin))
	}
	if m.Titles != 0 {
		n += 1 + sovLobby(uint64(m.Titles))
	}
	if m.Avatar != 0 {
		n += 1 + sovLobby(uint64(m.Avatar))
	}
	return n
}

func (m *S2CApplyAllDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.DeckList) > 0 {
		for _, e := range m.DeckList {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SDeleteDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	return n
}

func (m *S2CDeleteDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	return n
}

func (m *C2SQueryDecks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CQueryDecks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.DeckList) > 0 {
		for _, e := range m.DeckList {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *CardDetailInfoNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateCard != nil {
		l = m.UpdateCard.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SCardList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CCardList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SUpgradeCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != 0 {
		n += 1 + sovLobby(uint64(m.CardId))
	}
	if m.TargetLv != 0 {
		n += 1 + sovLobby(uint64(m.TargetLv))
	}
	return n
}

func (m *S2CUpgradeCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SEvolveCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != 0 {
		n += 1 + sovLobby(uint64(m.CardId))
	}
	return n
}

func (m *S2CEvolveCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.Icon != 0 {
		n += 1 + sovLobby(uint64(m.Icon))
	}
	return n
}

func (m *C2SSetCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != 0 {
		n += 1 + sovLobby(uint64(m.CardId))
	}
	if m.CurIcon != 0 {
		n += 1 + sovLobby(uint64(m.CurIcon))
	}
	return n
}

func (m *S2CSetCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SRecommendCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CardList) > 0 {
		l = 0
		for _, e := range m.CardList {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	return n
}

func (m *S2CRecommendCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecommendCards) > 0 {
		l = 0
		for _, e := range m.RecommendCards {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	return n
}

func (m *C2SApplyMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovLobby(uint64(m.Mode))
	}
	return n
}

func (m *S2CApplyMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SExitMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CExitMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SUpBattleDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	return n
}

func (m *S2CUpBattleDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SQueryBattleDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CQueryBattleDeck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	return n
}

func (m *LotteryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LotteryId != 0 {
		n += 1 + sovLobby(uint64(m.LotteryId))
	}
	if m.GoldenDrawTimes != 0 {
		n += 1 + sovLobby(uint64(m.GoldenDrawTimes))
	}
	if m.MagicalDrawTimes != 0 {
		n += 1 + sovLobby(uint64(m.MagicalDrawTimes))
	}
	if m.TotalDrawTimes != 0 {
		n += 1 + sovLobby(uint64(m.TotalDrawTimes))
	}
	return n
}

func (m *C2SLotteryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CLotteryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.LotteryList) > 0 {
		for k, v := range m.LotteryList {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLobby(uint64(l))
			}
			mapEntrySize := 1 + sovLobby(uint64(k)) + l
			n += mapEntrySize + 1 + sovLobby(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LotteryHistoryData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		l = 0
		for _, e := range m.Items {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if m.Timestamp != 0 {
		n += 1 + sovLobby(uint64(m.Timestamp))
	}
	return n
}

func (m *C2SLotteryHistoryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LotteryId != 0 {
		n += 1 + sovLobby(uint64(m.LotteryId))
	}
	return n
}

func (m *S2CLotteryHistoryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SLotteryRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovLobby(uint64(m.ItemId))
	}
	if m.Num != 0 {
		n += 1 + sovLobby(uint64(m.Num))
	}
	if m.UseItem != 0 {
		n += 1 + sovLobby(uint64(m.UseItem))
	}
	return n
}

func (m *S2CLotteryRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SLottery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LotteryId != 0 {
		n += 1 + sovLobby(uint64(m.LotteryId))
	}
	if m.Num != 0 {
		n += 1 + sovLobby(uint64(m.Num))
	}
	return n
}

func (m *S2CLottery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.LotteryInfo != nil {
		l = m.LotteryInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if m.MagicalGuarantee {
		n += 2
	}
	return n
}

func (m *S2CItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *Spaceship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShipId != 0 {
		n += 1 + sovLobby(uint64(m.ShipId))
	}
	if len(m.CardList) > 0 {
		l = 0
		for _, e := range m.CardList {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	return n
}

func (m *C2SSpaceshipList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CSpaceshipList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.SpaceshipList) > 0 {
		for _, e := range m.SpaceshipList {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SUpSpaceship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceshipInfo != nil {
		l = m.SpaceshipInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CUpSpaceship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.SpaceshipInfo != nil {
		l = m.SpaceshipInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *ExploreItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovLobby(uint64(m.Num))
	}
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *Explore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShipId != 0 {
		n += 1 + sovLobby(uint64(m.ShipId))
	}
	if m.GalaxyId != 0 {
		n += 1 + sovLobby(uint64(m.GalaxyId))
	}
	if m.StartTime != 0 {
		n += 1 + sovLobby(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovLobby(uint64(m.EndTime))
	}
	if m.Fuel != 0 {
		n += 1 + sovLobby(uint64(m.Fuel))
	}
	if m.FuelTime != 0 {
		n += 1 + sovLobby(uint64(m.FuelTime))
	}
	if len(m.ExploreItemList) > 0 {
		for _, e := range m.ExploreItemList {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SQueryExplore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CQueryExplore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Explore != nil {
		l = m.Explore.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SStartExplore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShipId != 0 {
		n += 1 + sovLobby(uint64(m.ShipId))
	}
	if m.GalaxyId != 0 {
		n += 1 + sovLobby(uint64(m.GalaxyId))
	}
	if m.Time != 0 {
		n += 1 + sovLobby(uint64(m.Time))
	}
	return n
}

func (m *S2CStartExplore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.Explore != nil {
		l = m.Explore.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SEndExplore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CEndExplore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.Explore != nil {
		l = m.Explore.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SGetTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CGetTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Now != 0 {
		n += 1 + sovLobby(uint64(m.Now))
	}
	return n
}

func (m *Guide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GuideId != 0 {
		n += 1 + sovLobby(uint64(m.GuideId))
	}
	if m.SubId != 0 {
		n += 1 + sovLobby(uint64(m.SubId))
	}
	return n
}

func (m *C2SUpdateGuide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Guide != nil {
		l = m.Guide.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CUpdateGuide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.Guide != nil {
		l = m.Guide.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *TaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLobby(uint64(m.TaskId))
	}
	if m.Val != 0 {
		n += 1 + sovLobby(uint64(m.Val))
	}
	if m.UniqueId != 0 {
		n += 1 + sovLobby(uint64(m.UniqueId))
	}
	return n
}

func (m *C2STaskList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CTaskList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.TaskInfoLists) > 0 {
		for _, e := range m.TaskInfoLists {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if m.RefreshTime != 0 {
		n += 1 + sovLobby(uint64(m.RefreshTime))
	}
	if m.RefreshCounts != 0 {
		n += 1 + sovLobby(uint64(m.RefreshCounts))
	}
	return n
}

func (m *TaskInfoNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdateTaskInfoLists) > 0 {
		for _, e := range m.UpdateTaskInfoLists {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if len(m.DelTaskInfoLists) > 0 {
		for _, e := range m.DelTaskInfoLists {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if m.RefreshTime != 0 {
		n += 1 + sovLobby(uint64(m.RefreshTime))
	}
	return n
}

func (m *C2SGetTaskReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UniqueId != 0 {
		n += 1 + sovLobby(uint64(m.UniqueId))
	}
	return n
}

func (m *S2CGetTaskReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SBuyTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CBuyTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *WeekTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLobby(uint64(m.TaskId))
	}
	if len(m.Stage) > 0 {
		l = 0
		for _, e := range m.Stage {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if m.Val != 0 {
		n += 1 + sovLobby(uint64(m.Val))
	}
	if m.RefreshTime != 0 {
		n += 1 + sovLobby(uint64(m.RefreshTime))
	}
	return n
}

func (m *C2SWeekTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CWeekTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.TaskInfo != nil {
		l = m.TaskInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *WeekTaskInfoNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskInfo != nil {
		l = m.TaskInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SGetWeekTaskReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovLobby(uint64(m.StageId))
	}
	return n
}

func (m *S2CGetWeekTaskReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *R2LMatchGameOver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MatchId)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.WinnerUid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if len(m.Players) > 0 {
		for k, v := range m.Players {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLobby(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLobby(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLobby(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *L2RMatchGameOver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *R2LBattlePlayerReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *L2RBattlePlayerReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CMatchGameOver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScoreInfo != nil {
		l = m.ScoreInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.Win != 0 {
		n += 1 + sovLobby(uint64(m.Win))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *R2LGameRoundOver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MatchId)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovLobby(uint64(m.RoundId))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if len(m.Players) > 0 {
		for k, v := range m.Players {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLobby(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLobby(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLobby(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *L2RGameRoundOver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Conn2LOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *SeasonChapter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChapterId != 0 {
		n += 1 + sovLobby(uint64(m.ChapterId))
	}
	if len(m.TaskInfoLists) > 0 {
		for _, e := range m.TaskInfoLists {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if m.FinishTaskCounts != 0 {
		n += 1 + sovLobby(uint64(m.FinishTaskCounts))
	}
	if m.IfGetChapterReward {
		n += 2
	}
	return n
}

func (m *C2SSeasonInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CSeasonInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.SeasonId != 0 {
		n += 1 + sovLobby(uint64(m.SeasonId))
	}
	if len(m.ChapterLists) > 0 {
		for _, e := range m.ChapterLists {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *SeasonInfoUpdateNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovLobby(uint64(m.SeasonId))
	}
	if len(m.ChapterLists) > 0 {
		for _, e := range m.ChapterLists {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SGetChapterReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChapterId != 0 {
		n += 1 + sovLobby(uint64(m.ChapterId))
	}
	if m.TaskId != 0 {
		n += 1 + sovLobby(uint64(m.TaskId))
	}
	return n
}

func (m *S2CGetChapterReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SSeasonPassCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CSeasonPassCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exp != 0 {
		n += 1 + sovLobby(uint64(m.Exp))
	}
	if m.Lv != 0 {
		n += 1 + sovLobby(uint64(m.Lv))
	}
	if m.UnlockSenior {
		n += 2
	}
	if m.RewardedLv != 0 {
		n += 1 + sovLobby(uint64(m.RewardedLv))
	}
	if m.SeniorRewardedLv != 0 {
		n += 1 + sovLobby(uint64(m.SeniorRewardedLv))
	}
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *SeasonPassCardNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exp != 0 {
		n += 1 + sovLobby(uint64(m.Exp))
	}
	if m.Lv != 0 {
		n += 1 + sovLobby(uint64(m.Lv))
	}
	if m.UnlockSenior {
		n += 2
	}
	if m.RewardedLv != 0 {
		n += 1 + sovLobby(uint64(m.RewardedLv))
	}
	if m.SeniorRewardedLv != 0 {
		n += 1 + sovLobby(uint64(m.SeniorRewardedLv))
	}
	return n
}

func (m *C2SSeasonPassCardReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IfSenior {
		n += 2
	}
	return n
}

func (m *S2CSeasonPassCardReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardedLv != 0 {
		n += 1 + sovLobby(uint64(m.RewardedLv))
	}
	if m.SeniorRewardedLv != 0 {
		n += 1 + sovLobby(uint64(m.SeniorRewardedLv))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SSeasonPassCardBuyLv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lv != 0 {
		n += 1 + sovLobby(uint64(m.Lv))
	}
	return n
}

func (m *S2CSeasonPassCardBuyLv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SSetUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Expression) > 0 {
		l = 0
		for _, e := range m.Expression {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if len(m.Greetings) > 0 {
		l = 0
		for _, e := range m.Greetings {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	if len(m.Preferences) > 0 {
		l = 0
		for _, e := range m.Preferences {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	return n
}

func (m *S2CSetUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2SRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Grade != 0 {
		n += 1 + sovLobby(uint64(m.Grade))
	}
	if m.Ranking != 0 {
		n += 1 + sovLobby(uint64(m.Ranking))
	}
	if m.Score != 0 {
		n += 1 + sovLobby(uint64(m.Score))
	}
	if m.RewardedGrade != 0 {
		n += 1 + sovLobby(uint64(m.RewardedGrade))
	}
	if m.MaxGrade != 0 {
		n += 1 + sovLobby(uint64(m.MaxGrade))
	}
	return n
}

func (m *S2CRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankInfo != nil {
		l = m.RankInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *RankInfoUpdateNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankInfo != nil {
		l = m.RankInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SRankReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CRankReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *FunctionOpenNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FunctionId) > 0 {
		l = 0
		for _, e := range m.FunctionId {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	return n
}

func (m *MallPack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	if m.Countdown != 0 {
		n += 1 + sovLobby(uint64(m.Countdown))
	}
	return n
}

func (m *ShopItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	if m.BuyCount != 0 {
		n += 1 + sovLobby(uint64(m.BuyCount))
	}
	if m.FirstBonus {
		n += 2
	}
	if m.ActualItemId != 0 {
		n += 1 + sovLobby(uint64(m.ActualItemId))
	}
	if m.Countdown != 0 {
		n += 1 + sovLobby(uint64(m.Countdown))
	}
	return n
}

func (m *MallShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	if m.GrandTotal != 0 {
		n += 1 + sovLobby(uint64(m.GrandTotal))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SMall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CMall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.Packs) > 0 {
		for _, e := range m.Packs {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if len(m.Shops) > 0 {
		for _, e := range m.Shops {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SRealPay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pack {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	if m.PayChann != 0 {
		n += 1 + sovLobby(uint64(m.PayChann))
	}
	return n
}

func (m *S2CRealPay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.PlatformGoodsId)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *S2CRealPayFinish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pack {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	return n
}

func (m *C2SGamePay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pack {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	return n
}

func (m *S2CGamePay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *C2STakeShopAccumulateAward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLobby(uint64(m.Id))
	}
	return n
}

func (m *S2CTakeShopAccumulateAward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	return n
}

func (m *P2LPay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *C2SSetUserDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLobby(uint64(m.Type))
	}
	if m.CardId != 0 {
		n += 1 + sovLobby(uint64(m.CardId))
	}
	return n
}

func (m *S2CSetUserDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if m.Type != 0 {
		n += 1 + sovLobby(uint64(m.Type))
	}
	if m.UpdateData != nil {
		l = m.UpdateData.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *BattlePlayerReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.SeasonInfo != nil {
		l = m.SeasonInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.LastSeasonInfo != nil {
		l = m.LastSeasonInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	if m.Head != 0 {
		n += 1 + sovLobby(uint64(m.Head))
	}
	if len(m.CardDetails) > 0 {
		for _, e := range m.CardDetails {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if m.Result != 0 {
		n += 1 + sovLobby(uint64(m.Result))
	}
	return n
}

func (m *BattleReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovLobby(uint64(m.Timestamp))
	}
	return n
}

func (m *C2SGetBattleReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CGetBattleReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BattleReports) > 0 {
		for _, e := range m.BattleReports {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SMailList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CMailList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MailBriefs) > 0 {
		for _, e := range m.MailBriefs {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *NewMailNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewMails) > 0 {
		for _, e := range m.NewMails {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SReadMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailId != 0 {
		n += 1 + sovLobby(uint64(m.MailId))
	}
	if m.AllRead {
		n += 2
	}
	return n
}

func (m *S2CReadMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.ReadMail) > 0 {
		for _, e := range m.ReadMail {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SRecvMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailId != 0 {
		n += 1 + sovLobby(uint64(m.MailId))
	}
	if m.AllRecv {
		n += 2
	}
	return n
}

func (m *S2CRecvMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.RecvMail) > 0 {
		for _, e := range m.RecvMail {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SDelMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailId != 0 {
		n += 1 + sovLobby(uint64(m.MailId))
	}
	return n
}

func (m *S2CDelMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovLobby(uint64(m.Error))
	}
	if len(m.DelMail) > 0 {
		for _, e := range m.DelMail {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *C2SFindBoundChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2CFindBoundChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLobby(uint64(m.Code))
	}
	if len(m.Channels) > 0 {
		l = 0
		for _, e := range m.Channels {
			l += sovLobby(uint64(e))
		}
		n += 1 + sovLobby(uint64(l)) + l
	}
	return n
}

func sovLobby(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLobby(x uint64) (n int) {
	return sovLobby(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountVerifyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountVerifyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountVerifyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			m.Verify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verify |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &AccountVerifyResult{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &AccountVerifyResult{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUserVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUserVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUserVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUserVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUserVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUserVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &AccountVerifyResult{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SAutoRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SAutoRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SAutoRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAutoRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAutoRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAutoRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &AccountVerifyResult{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLoginByChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLoginByChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLoginByChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= LoginChannel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLobby
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLobby
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobby(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLobby
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLoginByChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLoginByChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLoginByChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &AccountVerifyResult{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SBindChannelAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBindChannelAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBindChannelAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= LoginChannel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLobby
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLobby
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobby(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLobby
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBindChannelAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBindChannelAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBindChannelAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDatail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDatail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDatail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RedPoints = append(m.RedPoints, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RedPoints) == 0 {
					m.RedPoints = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RedPoints = append(m.RedPoints, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPoints", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardPreferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardPreferences == nil {
				m.CardPreferences = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobby(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLobby
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CardPreferences[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDatailNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDatailNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDatailNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDetail == nil {
				m.UserDetail = &UserDatail{}
			}
			if err := m.UserDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeAmount", wireType)
			}
			m.RechargeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RechargeAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeRefreshTime", wireType)
			}
			m.RechargeRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RechargeRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			m.Head = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Head |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Expression = append(m.Expression, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Expression) == 0 {
					m.Expression = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Expression = append(m.Expression, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Greetings = append(m.Greetings, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Greetings) == 0 {
					m.Greetings = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Greetings = append(m.Greetings, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Greetings", wireType)
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Preferences = append(m.Preferences, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Preferences) == 0 {
					m.Preferences = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Preferences = append(m.Preferences, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OpenFunctions = append(m.OpenFunctions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OpenFunctions) == 0 {
					m.OpenFunctions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OpenFunctions = append(m.OpenFunctions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenFunctions", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDetail == nil {
				m.UserDetail = &UserDatail{}
			}
			if err := m.UserDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SVerifyToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SVerifyToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SVerifyToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CVerifyToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVerifyToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVerifyToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guide_List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guide_List = append(m.Guide_List, &Guide{})
			if err := m.Guide_List[len(m.Guide_List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SReconnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SReconnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SReconnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReconnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReconnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReconnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			m.Head = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Head |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardList = append(m.CardList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardList) == 0 {
					m.CardList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardList = append(m.CardList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardList", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deck == nil {
				m.Deck = &Deck{}
			}
			if err := m.Deck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardList = append(m.CardList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardList) == 0 {
					m.CardList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardList = append(m.CardList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardList", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackSkin", wireType)
			}
			m.BackSkin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackSkin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Titles", wireType)
			}
			m.Titles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Titles |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			m.Avatar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avatar |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deck == nil {
				m.Deck = &Deck{}
			}
			if err := m.Deck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SApplyAllDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SApplyAllDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SApplyAllDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackSkin", wireType)
			}
			m.BackSkin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackSkin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Titles", wireType)
			}
			m.Titles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Titles |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			m.Avatar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avatar |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CApplyAllDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CApplyAllDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CApplyAllDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeckList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeckList = append(m.DeckList, &Deck{})
			if err := m.DeckList[len(m.DeckList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SDeleteDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SDeleteDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SDeleteDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CDeleteDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CDeleteDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CDeleteDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SQueryDecks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SQueryDecks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SQueryDecks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CQueryDecks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CQueryDecks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CQueryDecks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeckList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeckList = append(m.DeckList, &Deck{})
			if err := m.DeckList[len(m.DeckList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardDetailInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardDetailInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardDetailInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateCard == nil {
				m.UpdateCard = &CardDetailInfo{}
			}
			if err := m.UpdateCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &CardDetailInfo{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetLv", wireType)
			}
			m.TargetLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetLv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SEvolveCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SEvolveCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SEvolveCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CEvolveCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CEvolveCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CEvolveCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurIcon", wireType)
			}
			m.CurIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurIcon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRecommendCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRecommendCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRecommendCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardList = append(m.CardList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardList) == 0 {
					m.CardList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardList = append(m.CardList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecommendCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecommendCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecommendCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecommendCards = append(m.RecommendCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RecommendCards) == 0 {
					m.RecommendCards = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecommendCards = append(m.RecommendCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendCards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SApplyMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SApplyMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SApplyMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= MatchMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CApplyMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CApplyMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CApplyMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SExitMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SExitMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SExitMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CExitMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CExitMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CExitMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpBattleDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpBattleDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpBattleDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpBattleDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpBattleDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpBattleDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SQueryBattleDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SQueryBattleDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SQueryBattleDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CQueryBattleDeck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CQueryBattleDeck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CQueryBattleDeck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryId", wireType)
			}
			m.LotteryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldenDrawTimes", wireType)
			}
			m.GoldenDrawTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldenDrawTimes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicalDrawTimes", wireType)
			}
			m.MagicalDrawTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicalDrawTimes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDrawTimes", wireType)
			}
			m.TotalDrawTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDrawTimes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLotteryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLotteryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLotteryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLotteryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLotteryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLotteryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LotteryList == nil {
				m.LotteryList = make(map[int32]*LotteryInfo)
			}
			var mapkey int32
			var mapvalue *LotteryInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLobby
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLobby
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LotteryInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobby(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLobby
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LotteryList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryHistoryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryHistoryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryHistoryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Items = append(m.Items, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Items) == 0 {
					m.Items = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Items = append(m.Items, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLotteryHistoryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLotteryHistoryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLotteryHistoryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryId", wireType)
			}
			m.LotteryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLotteryHistoryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLotteryHistoryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLotteryHistoryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &LotteryHistoryData{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLotteryRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLotteryRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLotteryRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseItem", wireType)
			}
			m.UseItem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseItem |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLotteryRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLotteryRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLotteryRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLottery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLottery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLottery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryId", wireType)
			}
			m.LotteryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLottery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLottery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLottery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LotteryInfo == nil {
				m.LotteryInfo = &LotteryInfo{}
			}
			if err := m.LotteryInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &ItemInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicalGuarantee", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MagicalGuarantee = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &ItemInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &ItemInfo{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Spaceship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Spaceship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Spaceship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipId", wireType)
			}
			m.ShipId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardList = append(m.CardList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardList) == 0 {
					m.CardList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardList = append(m.CardList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSpaceshipList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSpaceshipList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSpaceshipList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSpaceshipList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSpaceshipList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSpaceshipList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceshipList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceshipList = append(m.SpaceshipList, &Spaceship{})
			if err := m.SpaceshipList[len(m.SpaceshipList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpSpaceship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpSpaceship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpSpaceship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceshipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceshipInfo == nil {
				m.SpaceshipInfo = &Spaceship{}
			}
			if err := m.SpaceshipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpSpaceship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpSpaceship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpSpaceship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceshipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceshipInfo == nil {
				m.SpaceshipInfo = &Spaceship{}
			}
			if err := m.SpaceshipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExploreItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExploreItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExploreItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &ItemInfo{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Explore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Explore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Explore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipId", wireType)
			}
			m.ShipId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GalaxyId", wireType)
			}
			m.GalaxyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GalaxyId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fuel", wireType)
			}
			m.Fuel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fuel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuelTime", wireType)
			}
			m.FuelTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuelTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExploreItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExploreItemList = append(m.ExploreItemList, &ExploreItem{})
			if err := m.ExploreItemList[len(m.ExploreItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SQueryExplore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SQueryExplore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SQueryExplore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CQueryExplore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CQueryExplore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CQueryExplore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Explore == nil {
				m.Explore = &Explore{}
			}
			if err := m.Explore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SStartExplore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SStartExplore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SStartExplore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipId", wireType)
			}
			m.ShipId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GalaxyId", wireType)
			}
			m.GalaxyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GalaxyId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CStartExplore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CStartExplore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CStartExplore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Explore == nil {
				m.Explore = &Explore{}
			}
			if err := m.Explore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SEndExplore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SEndExplore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SEndExplore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CEndExplore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CEndExplore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CEndExplore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Explore == nil {
				m.Explore = &Explore{}
			}
			if err := m.Explore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Guide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuideId", wireType)
			}
			m.GuideId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuideId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubId", wireType)
			}
			m.SubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateGuide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateGuide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateGuide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guide == nil {
				m.Guide = &Guide{}
			}
			if err := m.Guide.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateGuide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateGuide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateGuide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guide == nil {
				m.Guide = &Guide{}
			}
			if err := m.Guide.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2STaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2STaskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2STaskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTaskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTaskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfoLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskInfoLists = append(m.TaskInfoLists, &TaskInfo{})
			if err := m.TaskInfoLists[len(m.TaskInfoLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshCounts", wireType)
			}
			m.RefreshCounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshCounts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTaskInfoLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTaskInfoLists = append(m.UpdateTaskInfoLists, &TaskInfo{})
			if err := m.UpdateTaskInfoLists[len(m.UpdateTaskInfoLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelTaskInfoLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelTaskInfoLists = append(m.DelTaskInfoLists, &TaskInfo{})
			if err := m.DelTaskInfoLists[len(m.DelTaskInfoLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetTaskReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetTaskReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetTaskReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetTaskReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetTaskReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetTaskReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SBuyTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBuyTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBuyTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuyTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuyTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuyTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeekTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeekTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeekTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stage = append(m.Stage, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stage) == 0 {
					m.Stage = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stage = append(m.Stage, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWeekTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWeekTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWeekTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWeekTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWeekTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWeekTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskInfo == nil {
				m.TaskInfo = &WeekTaskInfo{}
			}
			if err := m.TaskInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeekTaskInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeekTaskInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeekTaskInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskInfo == nil {
				m.TaskInfo = &WeekTaskInfo{}
			}
			if err := m.TaskInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetWeekTaskReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetWeekTaskReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetWeekTaskReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetWeekTaskReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetWeekTaskReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetWeekTaskReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *R2LMatchGameOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: R2LMatchGameOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: R2LMatchGameOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinnerUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Players == nil {
				m.Players = make(map[string]*RoomPlayerInfo)
			}
			var mapkey string
			var mapvalue *RoomPlayerInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLobby
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLobby
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoomPlayerInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobby(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLobby
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Players[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L2RMatchGameOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L2RMatchGameOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L2RMatchGameOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, &BattlePlayerReport{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *R2LBattlePlayerReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: R2LBattlePlayerReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: R2LBattlePlayerReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, &BattlePlayerReport{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L2RBattlePlayerReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L2RBattlePlayerReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L2RBattlePlayerReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMatchGameOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMatchGameOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMatchGameOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScoreInfo == nil {
				m.ScoreInfo = &ScoreInfo{}
			}
			if err := m.ScoreInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			m.Win = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Win |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &ItemInfo{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *R2LGameRoundOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: R2LGameRoundOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: R2LGameRoundOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Players == nil {
				m.Players = make(map[string]*RoundPlayerInfo)
			}
			var mapkey string
			var mapvalue *RoundPlayerInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLobby
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLobby
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLobby
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoundPlayerInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobby(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLobby
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Players[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L2RGameRoundOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L2RGameRoundOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L2RGameRoundOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conn2LOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conn2LOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conn2LOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChapter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChapter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChapter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			m.ChapterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChapterId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfoLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskInfoLists = append(m.TaskInfoLists, &TaskInfo{})
			if err := m.TaskInfoLists[len(m.TaskInfoLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTaskCounts", wireType)
			}
			m.FinishTaskCounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTaskCounts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfGetChapterReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IfGetChapterReward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSeasonInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSeasonInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSeasonInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSeasonInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSeasonInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSeasonInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterLists = append(m.ChapterLists, &SeasonChapter{})
			if err := m.ChapterLists[len(m.ChapterLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonInfoUpdateNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonInfoUpdateNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonInfoUpdateNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterLists = append(m.ChapterLists, &SeasonChapter{})
			if err := m.ChapterLists[len(m.ChapterLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetChapterReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetChapterReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetChapterReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			m.ChapterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChapterId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetChapterReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetChapterReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetChapterReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSeasonPassCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSeasonPassCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSeasonPassCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSeasonPassCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSeasonPassCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSeasonPassCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockSenior", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlockSenior = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedLv", wireType)
			}
			m.RewardedLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardedLv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeniorRewardedLv", wireType)
			}
			m.SeniorRewardedLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeniorRewardedLv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonPassCardNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonPassCardNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonPassCardNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockSenior", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlockSenior = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedLv", wireType)
			}
			m.RewardedLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardedLv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeniorRewardedLv", wireType)
			}
			m.SeniorRewardedLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeniorRewardedLv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSeasonPassCardReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSeasonPassCardReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSeasonPassCardReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfSenior", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IfSenior = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSeasonPassCardReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSeasonPassCardReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSeasonPassCardReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedLv", wireType)
			}
			m.RewardedLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardedLv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeniorRewardedLv", wireType)
			}
			m.SeniorRewardedLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeniorRewardedLv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &ItemInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSeasonPassCardBuyLv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSeasonPassCardBuyLv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSeasonPassCardBuyLv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSeasonPassCardBuyLv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSeasonPassCardBuyLv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSeasonPassCardBuyLv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Expression = append(m.Expression, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Expression) == 0 {
					m.Expression = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Expression = append(m.Expression, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Greetings = append(m.Greetings, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Greetings) == 0 {
					m.Greetings = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Greetings = append(m.Greetings, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Greetings", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Preferences = append(m.Preferences, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Preferences) == 0 {
					m.Preferences = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Preferences = append(m.Preferences, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedGrade", wireType)
			}
			m.RewardedGrade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardedGrade |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGrade", wireType)
			}
			m.MaxGrade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGrade |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankInfo == nil {
				m.RankInfo = &RankInfo{}
			}
			if err := m.RankInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankInfoUpdateNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankInfoUpdateNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankInfoUpdateNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankInfo == nil {
				m.RankInfo = &RankInfo{}
			}
			if err := m.RankInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRankReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRankReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRankReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRankReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRankReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRankReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &ItemInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionOpenNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionOpenNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionOpenNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FunctionId = append(m.FunctionId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FunctionId) == 0 {
					m.FunctionId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FunctionId = append(m.FunctionId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MallPack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MallPack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MallPack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countdown", wireType)
			}
			m.Countdown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Countdown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCount", wireType)
			}
			m.BuyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBonus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstBonus = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualItemId", wireType)
			}
			m.ActualItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualItemId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countdown", wireType)
			}
			m.Countdown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Countdown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MallShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MallShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MallShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			m.GrandTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrandTotal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ShopItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packs = append(m.Packs, &MallPack{})
			if err := m.Packs[len(m.Packs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shops = append(m.Shops, &MallShop{})
			if err := m.Shops[len(m.Shops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRealPay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRealPay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRealPay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pack = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChann", wireType)
			}
			m.PayChann = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayChann |= PayChannel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRealPay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRealPay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRealPay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformGoodsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformGoodsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRealPayFinish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRealPayFinish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRealPayFinish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pack = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGamePay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGamePay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGamePay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pack = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGamePay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGamePay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGamePay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2STakeShopAccumulateAward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2STakeShopAccumulateAward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2STakeShopAccumulateAward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTakeShopAccumulateAward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTakeShopAccumulateAward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTakeShopAccumulateAward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2LPay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P2LPay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P2LPay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetUserDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetUserDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetUserDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UserDetailEvent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetUserDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetUserDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetUserDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UserDetailEvent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateData == nil {
				m.UpdateData = &UserDatail{}
			}
			if err := m.UpdateData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattlePlayerReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattlePlayerReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattlePlayerReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonInfo == nil {
				m.SeasonInfo = &SeasonInfo{}
			}
			if err := m.SeasonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeasonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeasonInfo == nil {
				m.LastSeasonInfo = &SeasonInfo{}
			}
			if err := m.LastSeasonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			m.Head = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Head |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardDetails = append(m.CardDetails, &CardDetailInfo{})
			if err := m.CardDetails[len(m.CardDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &BattlePlayerReport{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetBattleReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetBattleReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetBattleReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetBattleReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetBattleReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetBattleReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BattleReports = append(m.BattleReports, &BattleReport{})
			if err := m.BattleReports[len(m.BattleReports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailBriefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailBriefs = append(m.MailBriefs, &MailBrief{})
			if err := m.MailBriefs[len(m.MailBriefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewMailNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewMailNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewMailNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMails = append(m.NewMails, &Mail{})
			if err := m.NewMails[len(m.NewMails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SReadMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SReadMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SReadMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllRead = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReadMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReadMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReadMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadMail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadMail = append(m.ReadMail, &Mail{})
			if err := m.ReadMail[len(m.ReadMail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRecvMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRecvMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRecvMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllRecv", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllRecv = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecvMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecvMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecvMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvMail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvMail = append(m.RecvMail, &Mail{})
			if err := m.RecvMail[len(m.RecvMail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &ItemInfo{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SDelMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SDelMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SDelMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CDelMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CDelMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CDelMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelMail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobby
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelMail = append(m.DelMail, &Mail{})
			if err := m.DelMail[len(m.DelMail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SFindBoundChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SFindBoundChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SFindBoundChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFindBoundChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFindBoundChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFindBoundChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v LoginChannel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LoginChannel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channels = append(m.Channels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobby
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobby
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Channels) == 0 {
					m.Channels = make([]LoginChannel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LoginChannel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobby
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LoginChannel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channels = append(m.Channels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLobby(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLobby
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLobby
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLobby
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLobby        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLobby          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLobby = fmt.Errorf("proto: unexpected end of group")
)
